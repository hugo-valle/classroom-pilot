name: 🛡️ Security Audit

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      scan_intensity:
        description: 'Security scan intensity level'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - comprehensive
          - deep
      generate_report:
        description: 'Generate detailed security report'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write
  actions: read
  id-token: write

env:
  CACHE_VERSION: v2

jobs:
  comprehensive-security-audit:
    name: 🔍 Comprehensive Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      security-score: ${{ steps.security-metrics.outputs.security-score }}
      critical-vulnerabilities: ${{ steps.security-metrics.outputs.critical-vulnerabilities }}
      high-vulnerabilities: ${{ steps.security-metrics.outputs.high-vulnerabilities }}
      sbom-generated: ${{ steps.security-metrics.outputs.sbom-generated }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive analysis

      - name: 📦 Load workflow utilities
        run: |
          chmod +x .github/scripts/workflow_utils.sh
          source .github/scripts/workflow_utils.sh
          echo "AUDIT_START_TIME=$(date +%s)" >> $GITHUB_ENV
          print_message "info" "Starting comprehensive security audit"

      - name: 🗂️ Setup comprehensive security cache
        run: |
          source .github/scripts/workflow_utils.sh
          setup_cache_directories "/tmp/security-audit"
          
          # Create comprehensive directory structure
          mkdir -p /tmp/security-audit/{sbom,sarif,reports,licenses,metrics,advisories}
          mkdir -p /tmp/security-audit/sbom/{spdx,cyclonedx,syft}
          mkdir -p /tmp/security-audit/sarif/{trivy,secrets,code-analysis}
          
          print_message "success" "Security audit directories created"

      - name: 💾 Cache security audit data
        uses: actions/cache@v4
        with:
          path: |
            /tmp/security-audit
            ~/.cache/trivy
            ~/.cache/syft
          key: ${{ runner.os }}-security-audit-${{ hashFiles('pyproject.toml', 'poetry.lock', 'requirements*.txt') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-security-audit-${{ hashFiles('pyproject.toml', 'poetry.lock', 'requirements*.txt') }}-
            ${{ runner.os }}-security-audit-
            ${{ runner.os }}-security-audit-

      - name: 🏗️ Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install Poetry and dependencies
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 📋 Generate comprehensive SBOM with multiple tools
        run: |
          source .github/scripts/workflow_utils.sh
          print_message "step" "Generating Software Bill of Materials with multiple formats"
          
          # Load security utilities and initialize
          chmod +x .github/scripts/security_utils.sh
          source .github/scripts/security_utils.sh
          initialize_security_cache

      - name: 📋 Generate SBOM with security utilities
        run: |
          source .github/scripts/security_utils.sh
          generate_sbom . all

      - name: 📋 Generate SBOM with Anchore
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          output-file: /tmp/security-audit/sbom/spdx/sbom-anchore-spdx.json

      - name: 📋 Generate CycloneDX SBOM with Anchore  
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: cyclonedx-json
          output-file: /tmp/security-audit/sbom/cyclonedx/sbom-anchore-cyclonedx.json

      - name: 🔧 Install comprehensive security tools
        run: |
          source .github/scripts/workflow_utils.sh
          print_message "step" "Installing comprehensive security scanning tools"
          
          # Install Trivy
          install_trivy() {
            sudo apt-get update
            sudo apt-get install wget apt-transport-https gnupg lsb-release -y
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy -y
          }
          
          # Install Grype (Anchore vulnerability scanner)
          install_grype() {
            curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          }
          
          # Install OSV-Scanner (Google)
          install_osv_scanner() {
            wget -O osv-scanner.zip https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64.zip
            unzip osv-scanner.zip
            sudo mv osv-scanner /usr/local/bin/
            rm osv-scanner.zip
          }
          
          # Install all tools with retry logic
          for tool_func in install_trivy install_grype install_osv_scanner; do
            if retry_with_backoff "$tool_func" "${tool_func#install_} installation" 3; then
              print_message "success" "${tool_func#install_} installed successfully"
            else
              print_message "error" "Failed to install ${tool_func#install_}"
              exit 1
            fi
          done
          
          # Verify installations
          trivy version
          grype version  
          osv-scanner --version

      - name: � Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: �🔍 Comprehensive vulnerability scanning with Trivy
        run: |
          source .github/scripts/workflow_utils.sh
          print_message "step" "Running comprehensive Trivy vulnerability scans"
          
          scan_intensity="${{ github.event.inputs.scan_intensity || 'standard' }}"
          
          # Comprehensive filesystem scan
          trivy fs \
            --cache-dir ~/.cache/trivy \
            --format sarif \
            --output /tmp/security-audit/sarif/trivy/trivy-fs-comprehensive.sarif \
            --severity CRITICAL,HIGH,MEDIUM,LOW \
            --scanners vuln,secret,config,license \
            --exit-code 0 \
            .
          
          # Repository scan for comprehensive analysis - using fs scan for deterministic results
          trivy fs \
            --cache-dir ~/.cache/trivy \
            --format sarif \
            --output /tmp/security-audit/sarif/trivy/trivy-repo.sarif \
            --severity CRITICAL,HIGH,MEDIUM \
            --scanners vuln,secret,config \
            --exit-code 0 \
            .
          
          # Configuration scan for security misconfigurations
          trivy config \
            --cache-dir ~/.cache/trivy \
            --format sarif \
            --output /tmp/security-audit/sarif/trivy/trivy-config.sarif \
            --severity CRITICAL,HIGH,MEDIUM \
            --exit-code 0 \
            .
          
          # Dependency scan using Poetry files
          if [[ -f "pyproject.toml" ]]; then
            trivy fs \
              --cache-dir ~/.cache/trivy \
              --format sarif \
              --output /tmp/security-audit/sarif/trivy/trivy-poetry.sarif \
              --severity CRITICAL,HIGH,MEDIUM \
              --scanners vuln \
              --exit-code 0 \
              pyproject.toml
          fi
          
          print_message "success" "Comprehensive Trivy vulnerability scanning completed"
        continue-on-error: true

      - name: 🔍 Vulnerability scanning with Grype
        run: |
          source .github/scripts/workflow_utils.sh
          print_message "step" "Running Grype vulnerability scanning"
          
          # Scan current directory
          grype . \
            --output sarif \
            --file /tmp/security-audit/sarif/trivy/grype-scan.sarif \
            || true
          
          # Scan SBOM files for cross-validation
          if [[ -f "/tmp/security-audit/sbom/syft/sbom-syft.json" ]]; then
            grype sbom:/tmp/security-audit/sbom/syft/sbom-syft.json \
              --output sarif \
              --file /tmp/security-audit/sarif/trivy/grype-sbom.sarif \
              || true
          fi
          
          print_message "success" "Grype vulnerability scanning completed"
        continue-on-error: true

      - name: 🔍 OSV vulnerability scanning
        run: |
          source .github/scripts/workflow_utils.sh
          print_message "step" "Running OSV-Scanner vulnerability detection"
          
          # Scan with OSV-Scanner
          osv-scanner \
            --format sarif \
            --output /tmp/security-audit/sarif/trivy/osv-scanner.sarif \
            . || true
          
          print_message "success" "OSV-Scanner vulnerability detection completed"
        continue-on-error: true

      - name: 🔍 Advanced secret detection
        timeout-minutes: 20
        run: |
          source .github/scripts/security_utils.sh
          run_secret_detection . all

      - name: 📄 License compliance analysis
        run: |
          source .github/scripts/workflow_utils.sh
          print_message "step" "Running license compliance analysis"
          
          # Install license compliance tools
          pip install licensecheck pip-licenses
          
          # Analyze licenses with pip-licenses
          if poetry env info >/dev/null 2>&1; then
            poetry run pip-licenses \
              --format json \
              --output-file /tmp/security-audit/licenses/pip-licenses.json \
              --with-urls \
              --with-description || true
          fi
          
          # Analyze licenses with licensecheck
          licensecheck \
            --format json \
            --output /tmp/security-audit/licenses/licensecheck.json \
            . || true
          
          # Extract license information from SBOM
          if [[ -f "/tmp/security-audit/sbom/syft/sbom-spdx.json" ]]; then
            jq '.packages[]? | select(.licenseConcluded != null) | {name: .name, license: .licenseConcluded}' \
              /tmp/security-audit/sbom/syft/sbom-spdx.json > /tmp/security-audit/licenses/sbom-licenses.json || true
          fi
          
          print_message "success" "License compliance analysis completed"
        continue-on-error: true

      - name: 🏛️ Security policy validation
        run: |
          source .github/scripts/workflow_utils.sh
          print_message "step" "Validating security policies and configurations"
          
          # Check for required security files
          security_files_check() {
            local missing_files=()
            local security_files=("SECURITY.md" ".github/SECURITY.md" "CONTRIBUTING.md")
            
            for file in "${security_files[@]}"; do
              if [[ ! -f "$file" ]]; then
                missing_files+=("$file")
              fi
            done
            
            if [[ ${#missing_files[@]} -gt 0 ]]; then
              print_message "warning" "Missing security files: ${missing_files[*]}"
            else
              print_message "success" "All required security files present"
            fi
          }
          
          # Check GitHub security settings (via .github directory)
          github_security_check() {
            local gh_security_score=0
            local total_checks=5
            
            # Check for dependabot configuration
            if [[ -f ".github/dependabot.yml" ]]; then
              gh_security_score=$((gh_security_score + 1))
              print_message "info" "✅ Dependabot configuration found"
            else
              print_message "warning" "❌ Dependabot configuration missing"
            fi
            
            # Check for security workflows
            if ls .github/workflows/*security* >/dev/null 2>&1; then
              gh_security_score=$((gh_security_score + 1))
              print_message "info" "✅ Security workflows found"
            else
              print_message "warning" "❌ Security workflows missing"
            fi
            
            # Check for code scanning workflows
            if ls .github/workflows/*scan* >/dev/null 2>&1 || ls .github/workflows/*audit* >/dev/null 2>&1; then
              gh_security_score=$((gh_security_score + 1))
              print_message "info" "✅ Code scanning workflows found"
            else
              print_message "warning" "❌ Code scanning workflows missing"
            fi
            
            # Check for issue templates
            if ls .github/ISSUE_TEMPLATE* >/dev/null 2>&1 || ls .github/issue_template* >/dev/null 2>&1; then
              gh_security_score=$((gh_security_score + 1))
              print_message "info" "✅ Issue templates found"
            else
              print_message "warning" "❌ Issue templates missing"
            fi
            
            # Check for pull request template
            if ls .github/PULL_REQUEST_TEMPLATE* >/dev/null 2>&1 || ls .github/pull_request_template* >/dev/null 2>&1; then
              gh_security_score=$((gh_security_score + 1))
              print_message "info" "✅ Pull request template found"
            else
              print_message "warning" "❌ Pull request template missing"
            fi
            
            echo "$gh_security_score" > /tmp/security-audit/metrics/github-security-score.txt
            print_message "info" "GitHub security score: $gh_security_score/$total_checks"
          }
          
          security_files_check
          github_security_check
          
          print_message "success" "Security policy validation completed"

      - name: 📊 Collect comprehensive security metrics
        id: security-metrics
        run: |
          source .github/scripts/workflow_utils.sh
          print_message "step" "Collecting comprehensive security metrics"
          
          # Initialize counters
          critical_vulns=0
          high_vulns=0
          medium_vulns=0
          low_vulns=0
          secret_findings=0
          license_issues=0
          sbom_files=0
          
          # Count vulnerabilities from all SARIF files
          sarif_files=$(find /tmp/security-audit/sarif -name "*.sarif" -type f)
          for sarif_file in $sarif_files; do
            if [[ -f "$sarif_file" ]] && jq empty "$sarif_file" 2>/dev/null; then
              results=$(jq -r '
                .runs[]?.results[]? as $r |
                ($r.level //
                 $r.properties.severity //
                 ( .runs[]?.tool.driver.rules[]? | select(.id==$r.ruleId) | (.properties.severity // .defaultConfiguration.level) ) //
                 "info")' "$sarif_file" 2>/dev/null || echo "")
              while IFS= read -r level; do
                case "$level" in
                  "error"|"critical") critical_vulns=$((critical_vulns + 1)) ;;
                  "warning"|"high") high_vulns=$((high_vulns + 1)) ;;
                  "info"|"medium") medium_vulns=$((medium_vulns + 1)) ;;
                  "note"|"low") low_vulns=$((low_vulns + 1)) ;;
                esac
              done <<< "$results"
            fi
          done
          
          # Count secret findings
          secret_files=$(find /tmp/security-audit/sarif/secrets -name "*.sarif" -o -name "*.json" -type f)
          for secret_file in $secret_files; do
            if [[ -f "$secret_file" ]]; then
              if [[ "$secret_file" == *.sarif ]]; then
                count=$(jq '.runs[]?.results? | length' "$secret_file" 2>/dev/null || echo "0")
                secret_findings=$((secret_findings + count))
              elif [[ "$secret_file" == *.json ]] && [[ "$secret_file" == *trufflehog* ]]; then
                count=$(jq '. | length' "$secret_file" 2>/dev/null || echo "0")
                secret_findings=$((secret_findings + count))
              fi
            fi
          done
          
          # Count SBOM files
          sbom_files=$(find /tmp/security-audit/sbom -name "*.json" -type f | wc -l)
          
          # Calculate security score (0-100)
          total_findings=$((critical_vulns + high_vulns + medium_vulns + low_vulns + secret_findings))
          
          # Read GitHub security score
          gh_security_score=0
          if [[ -f "/tmp/security-audit/metrics/github-security-score.txt" ]]; then
            gh_security_score=$(cat /tmp/security-audit/metrics/github-security-score.txt)
          fi
          
          # Calculate overall security score
          base_score=100
          penalty=0
          
          # Penalty for critical vulnerabilities (severe)
          penalty=$((penalty + critical_vulns * 20))
          
          # Penalty for high vulnerabilities
          penalty=$((penalty + high_vulns * 10))
          
          # Penalty for medium vulnerabilities  
          penalty=$((penalty + medium_vulns * 5))
          
          # Penalty for low vulnerabilities
          penalty=$((penalty + low_vulns * 1))
          
          # Penalty for secrets
          penalty=$((penalty + secret_findings * 15))
          
          # Bonus for good GitHub security practices
          bonus=$((gh_security_score * 2))
          
          security_score=$((base_score - penalty + bonus))
          security_score=$((security_score < 0 ? 0 : security_score))
          security_score=$((security_score > 100 ? 100 : security_score))
          
          # Save metrics
          cat > /tmp/security-audit/metrics/security-metrics.json << EOF
          {
            "security_score": $security_score,
            "critical_vulnerabilities": $critical_vulns,
            "high_vulnerabilities": $high_vulns,
            "medium_vulnerabilities": $medium_vulns,
            "low_vulnerabilities": $low_vulns,
            "secret_findings": $secret_findings,
            "license_issues": $license_issues,
            "sbom_files_generated": $sbom_files,
            "github_security_score": $gh_security_score,
            "total_findings": $total_findings,
            "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "repository": "${{ github.repository }}",
            "commit_sha": "${{ github.sha }}"
          }
          EOF
          
          # Set outputs
          echo "security-score=$security_score" >> $GITHUB_OUTPUT
          echo "critical-vulnerabilities=$critical_vulns" >> $GITHUB_OUTPUT  
          echo "high-vulnerabilities=$high_vulns" >> $GITHUB_OUTPUT
          echo "sbom-generated=$sbom_files" >> $GITHUB_OUTPUT
          
          print_message "success" "Security metrics collected - Score: $security_score/100, Critical: $critical_vulns, High: $high_vulns, Secrets: $secret_findings"

      - name: 📤 Archive comprehensive security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-security-audit-${{ github.sha }}
          path: |
            /tmp/security-audit/
          retention-days: 90

      - name: 📤 Upload all SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: /tmp/security-audit/sarif/**/*.sarif
        continue-on-error: true

      - name: 📊 Generate comprehensive security report
        if: github.event.inputs.generate_report == 'true' || github.event_name == 'schedule'
        run: |
          source .github/scripts/workflow_utils.sh
          print_message "step" "Generating comprehensive security report"
          
          audit_duration=$(report_step_timing "Comprehensive Security Audit" "$AUDIT_START_TIME")
          
          # Read metrics
          if [[ -f "/tmp/security-audit/metrics/security-metrics.json" ]]; then
            security_score=$(jq -r '.security_score' /tmp/security-audit/metrics/security-metrics.json)
            critical_vulns=$(jq -r '.critical_vulnerabilities' /tmp/security-audit/metrics/security-metrics.json)
            high_vulns=$(jq -r '.high_vulnerabilities' /tmp/security-audit/metrics/security-metrics.json)
            medium_vulns=$(jq -r '.medium_vulnerabilities' /tmp/security-audit/metrics/security-metrics.json)
            low_vulns=$(jq -r '.low_vulnerabilities' /tmp/security-audit/metrics/security-metrics.json)
            secret_findings=$(jq -r '.secret_findings' /tmp/security-audit/metrics/security-metrics.json)
            sbom_files=$(jq -r '.sbom_files_generated' /tmp/security-audit/metrics/security-metrics.json)
            total_findings=$(jq -r '.total_findings' /tmp/security-audit/metrics/security-metrics.json)
          else
            security_score=0
            critical_vulns=0
            high_vulns=0
            medium_vulns=0
            low_vulns=0
            secret_findings=0
            sbom_files=0
            total_findings=0
          fi
          
          # Determine security status
          if [[ $critical_vulns -gt 0 ]]; then
            security_status="🔴 Critical Issues Found"
          elif [[ $high_vulns -gt 5 ]]; then
            security_status="🟡 High Risk"
          elif [[ $total_findings -gt 10 ]]; then
            security_status="🟠 Medium Risk"
          else
            security_status="🟢 Good Security Posture"
          fi
          
          # Generate comprehensive summary
          security_report="# 🛡️ Comprehensive Security Audit Report\n\n"
          security_report+="## 📊 Security Overview\n\n"
          security_report+="| Metric | Value | Status |\n"
          security_report+="| --- | --- | --- |\n"
          security_report+="| **Security Score** | **${security_score}/100** | $([ $security_score -ge 80 ] && echo "🟢 Excellent" || [ $security_score -ge 60 ] && echo "🟡 Good" || [ $security_score -ge 40 ] && echo "🟠 Fair" || echo "🔴 Needs Improvement") |\n"
          security_report+="| **Overall Status** | **${security_status}** | |\n"
          security_report+="| Critical Vulnerabilities | ${critical_vulns} | $([ $critical_vulns -eq 0 ] && echo "✅" || echo "❌") |\n"
          security_report+="| High Vulnerabilities | ${high_vulns} | $([ $high_vulns -le 2 ] && echo "✅" || echo "⚠️") |\n"
          security_report+="| Medium Vulnerabilities | ${medium_vulns} | $([ $medium_vulns -le 5 ] && echo "✅" || echo "⚠️") |\n"
          security_report+="| Low Vulnerabilities | ${low_vulns} | ℹ️ |\n"
          security_report+="| Secret Exposures | ${secret_findings} | $([ $secret_findings -eq 0 ] && echo "✅" || echo "❌") |\n"
          security_report+="| SBOM Files Generated | ${sbom_files} | $([ $sbom_files -gt 0 ] && echo "✅" || echo "❌") |\n"
          security_report+="| **Audit Duration** | **${audit_duration}s** | |\n\n"
          
          security_report+="## 🔧 Security Tools Used\n\n"
          security_report+="- **Trivy**: Comprehensive vulnerability scanning\n"
          security_report+="- **Grype**: Additional vulnerability analysis\n"  
          security_report+="- **OSV-Scanner**: Google's vulnerability database\n"
          security_report+="- **GitLeaks**: Git secret detection\n"
          security_report+="- **TruffleHog**: Advanced secret scanning\n"
          security_report+="- **detect-secrets**: Baseline secret detection\n"
          security_report+="- **Syft & Anchore**: SBOM generation\n"
          security_report+="- **License compliance**: Automated license analysis\n\n"
          
          if [[ $critical_vulns -gt 0 || $high_vulns -gt 5 ]]; then
            security_report+="## ⚠️ Immediate Action Required\n\n"
            security_report+="This repository has **critical security issues** that require immediate attention:\n\n"
            [[ $critical_vulns -gt 0 ]] && security_report+="- 🔴 **${critical_vulns} Critical vulnerabilities** found\n"
            [[ $high_vulns -gt 5 ]] && security_report+="- 🟡 **${high_vulns} High-risk vulnerabilities** found\n"
            [[ $secret_findings -gt 0 ]] && security_report+="- 🔐 **${secret_findings} Potential secrets** detected\n"
            security_report+="\nPlease review the detailed findings in the Security tab and uploaded artifacts.\n\n"
          fi
          
          security_report+="## 📁 Generated Artifacts\n\n"
          security_report+="- **SBOM Files**: Multiple formats (SPDX, CycloneDX, Syft)\n"
          security_report+="- **SARIF Reports**: Detailed vulnerability findings\n"
          security_report+="- **License Reports**: Compliance analysis\n"
          security_report+="- **Security Metrics**: Quantitative security assessment\n\n"
          security_report+="## 🔄 Next Steps\n\n"
          security_report+="1. Review detailed findings in [GitHub Security tab](https://github.com/${{ github.repository }}/security)\n"
          security_report+="2. Download comprehensive audit artifacts for detailed analysis\n"
          security_report+="3. Address critical and high-priority vulnerabilities first\n"
          security_report+="4. Update dependencies and configurations as recommended\n"
          security_report+="5. Re-run audit after applying fixes\n\n"
          security_report+="---\n"
          security_report+="_Audit completed on $(date -u) | Repository: ${{ github.repository }} | Commit: ${{ github.sha }}_"
          
          create_step_summary "Comprehensive Security Audit" "$([ $critical_vulns -eq 0 ] && [ $high_vulns -le 2 ] && echo "success" || echo "warning")" "$security_report"
          
          print_message "$([ $critical_vulns -eq 0 ] && [ $high_vulns -le 2 ] && echo "success" || echo "warning")" "Comprehensive security audit completed - Score: ${security_score}/100, Total findings: ${total_findings}"

  create-security-issue:
    name: 📝 Create Security Issue
    needs: comprehensive-security-audit
    runs-on: ubuntu-latest
    if: needs.comprehensive-security-audit.outputs.critical-vulnerabilities > 0 || needs.comprehensive-security-audit.outputs.high-vulnerabilities > 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📝 Create security advisory issue
        uses: actions/github-script@v7
        with:
          script: |
            const criticalVulns = '${{ needs.comprehensive-security-audit.outputs.critical-vulnerabilities }}';
            const highVulns = '${{ needs.comprehensive-security-audit.outputs.high-vulnerabilities }}';
            const securityScore = '${{ needs.comprehensive-security-audit.outputs.security-score }}';
            
            const title = `🚨 Security Alert: ${criticalVulns} Critical, ${highVulns} High-Risk Vulnerabilities Detected`;
            
            const body = `# 🛡️ Automated Security Alert
            
            Our weekly security audit has detected critical vulnerabilities that require immediate attention.
            
            ## 📊 Security Summary
            - **Security Score**: ${securityScore}/100
            - **Critical Vulnerabilities**: ${criticalVulns}
            - **High-Risk Vulnerabilities**: ${highVulns}
            - **Detection Date**: ${new Date().toISOString().split('T')[0]}
            - **Commit**: ${{ github.sha }}
            
            ## ⚠️ Immediate Actions Required
            1. Review detailed findings in the [Security tab](https://github.com/${{ github.repository }}/security)
            2. Download the comprehensive audit artifacts from the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            3. Prioritize fixing critical vulnerabilities first
            4. Update vulnerable dependencies
            5. Re-run security audit after fixes
            
            ## 🔗 Resources
            - [Security Audit Workflow](${{ github.server_url }}/${{ github.repository }}/actions/workflows/security-audit.yml)
            - [SARIF Reports and SBOM Files](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            _This issue was automatically created by the Security Audit workflow._
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'vulnerability', 'high-priority']
            });