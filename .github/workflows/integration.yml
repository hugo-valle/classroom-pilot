name: Integration Testing

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: false
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'api-only'
          - 'workflow-only'
          - 'config-only'
      api_rate_limit_test:
        description: 'Enable API rate limit testing'
        required: false
        default: false
        type: boolean

env:
  TEST_SCOPE: ${{ github.event.inputs.test_scope || 'full' }}
  ENABLE_RATE_LIMIT_TEST: ${{ github.event.inputs.api_rate_limit_test || 'false' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  setup-integration-environment:
    name: Setup Integration Test Environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      test-org: ${{ steps.setup.outputs.test-org }}
      test-repos: ${{ steps.setup.outputs.test-repos }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Integration Test Environment
        id: setup
        run: |
          TEST_ORG="classroom-pilot-test-$(date +%s)"
          TEST_REPOS="test-assignment-repo-1,test-assignment-repo-2,test-assignment-repo-3"
          echo "test-org=$TEST_ORG" >> $GITHUB_OUTPUT
          echo "test-repos=$TEST_REPOS" >> $GITHUB_OUTPUT
          ./.github/scripts/create_integration_test_config.sh basic integration_test_data

      - name: Upload Integration Test Configuration
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-config
          path: integration_test_data/
          retention-days: 1

  full-workflow-simulation:
    name: Full Workflow Simulation
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: setup-integration-environment
    if: contains(fromJSON('["full", "workflow-only"]'), github.event.inputs.test_scope || 'full')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Download Integration Test Configuration
        uses: actions/download-artifact@v4
        with:
          name: integration-test-config
          path: integration_test_data/

      - name: Load Workflow Utilities
        run: |
          source .github/scripts/workflow_utils.sh
          echo "Loaded workflow utilities for integration testing"

      - name: Test Assignment Setup Workflow
        run: ./.github/scripts/test_cli_commands.sh

      - name: Test Assignment Orchestration Workflow
        run: ./.github/scripts/run_integration_tests.sh integration_test_data

      - name: Test Repository Fetch Workflow
        run: ./.github/scripts/test_cli_commands.sh

      - name: Test Secrets Management Workflow
        run: ./.github/scripts/run_integration_tests.sh integration_test_data

      - name: Test Complete Multi-Script Workflow
        run: ./.github/scripts/run_integration_tests.sh integration_test_data

      - name: Export Workflow Metrics
        run: |
          source .github/scripts/workflow_utils.sh
          export_performance_metrics "workflow_integration" "integration_results/workflow_metrics.json"

  github-api-integration-testing:
    name: GitHub API Integration Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: setup-integration-environment
    if: contains(fromJSON('["full", "api-only"]'), github.event.inputs.test_scope || 'full')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Download Integration Test Configuration
        uses: actions/download-artifact@v4
        with:
          name: integration-test-config
          path: integration_test_data/

      - name: Load Workflow Utilities
        run: |
          source .github/scripts/workflow_utils.sh
          echo "Loaded utilities for API integration testing"

      - name: Test Repository Discovery API Integration
        run: ./.github/scripts/test_github_api_repos.sh

      - name: Test Secret Management API Integration
        run: ./.github/scripts/test_github_api_secrets.sh "${{ github.repository }}"

      - name: Test Collaborator Management API Integration
        run: ./.github/scripts/test_github_api_collaborators.sh "${{ github.repository }}"

      - name: Test API Rate Limiting Behavior
        if: env.ENABLE_RATE_LIMIT_TEST == 'true'
        run: ./.github/scripts/test_github_api_rate_limit.sh

      - name: Export API Integration Metrics
        run: |
          source .github/scripts/workflow_utils.sh
          export_performance_metrics "api_integration" "integration_results/api_metrics.json"

  error-recovery-testing:
    name: Error Recovery Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: setup-integration-environment
    if: contains(fromJSON('["full"]'), github.event.inputs.test_scope || 'full')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Download Integration Test Configuration
        uses: actions/download-artifact@v4
        with:
          name: integration-test-config
          path: integration_test_data/

      - name: Load Workflow Utilities
        run: |
          source .github/scripts/workflow_utils.sh
          echo "Loaded utilities for error recovery testing"

      - name: Test Invalid Configuration Handling
        run: ./.github/scripts/test_error_recovery.sh integration_test_data

      - name: Test Network Failure Simulation
        run: ./.github/scripts/test_error_recovery.sh integration_test_data

      - name: Test Missing Dependencies Handling
        run: ./.github/scripts/test_error_recovery.sh integration_test_data

      - name: Export Error Recovery Metrics
        run: |
          source .github/scripts/workflow_utils.sh
          export_performance_metrics "error_recovery" "integration_results/error_recovery_metrics.json"

  configuration-validation-testing:
    name: Configuration Validation Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: setup-integration-environment
    if: contains(fromJSON('["full", "config-only"]'), github.event.inputs.test_scope || 'full')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Download Integration Test Configuration
        uses: actions/download-artifact@v4
        with:
          name: integration-test-config
          path: integration_test_data/

      - name: Load Workflow Utilities
        run: |
          source .github/scripts/workflow_utils.sh
          echo "Loaded utilities for configuration validation testing"

      - name: Test Basic Configuration Scenarios
        run: ./.github/scripts/create_integration_test_config.sh minimal integration_test_data

      - name: Test Advanced Configuration Scenarios
        run: ./.github/scripts/create_integration_test_config.sh advanced integration_test_data

      - name: Test Edge Case Configuration Scenarios
        run: ./.github/scripts/create_integration_test_config.sh edge-case integration_test_data

      - name: Export Configuration Validation Metrics
        run: |
          source .github/scripts/workflow_utils.sh
          export_performance_metrics "config_validation" "integration_results/config_metrics.json"

  cross-platform-compatibility:
    name: Cross-Platform Compatibility Testing
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    needs: setup-integration-environment
    if: contains(fromJSON('["full"]'), github.event.inputs.test_scope || 'full')
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        shell: [bash, sh]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Download Integration Test Configuration
        uses: actions/download-artifact@v4
        with:
          name: integration-test-config
          path: integration_test_data/

      - name: Load Workflow Utilities
        run: |
          source .github/scripts/workflow_utils.sh
          echo "Loaded utilities for cross-platform testing on ${{ matrix.os }} with ${{ matrix.shell }}"

      - name: Test Shell Script Compatibility
        run: ./.github/scripts/test_cli_commands.sh

      - name: Test CLI Cross-Platform Compatibility
        run: ./.github/scripts/run_integration_tests.sh integration_test_data

      - name: Export Cross-Platform Metrics
        run: |
          source .github/scripts/workflow_utils.sh
          export_performance_metrics "cross_platform_${{ matrix.os }}_${{ matrix.shell }}" \
            "integration_results/cross_platform_metrics.json"

  integration-test-reporting:
    name: Integration Test Reporting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [
      full-workflow-simulation,
      github-api-integration-testing,
      error-recovery-testing,
      configuration-validation-testing,
      cross-platform-compatibility
    ]
    if: always()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download All Integration Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: 'integration-*'
          path: all_integration_results/
          merge-multiple: true

      - name: Load Workflow Utilities
        run: |
          source .github/scripts/workflow_utils.sh
          echo "Loaded utilities for integration test reporting"

      - name: Generate Integration Test Report
        run: ./.github/scripts/generate_integration_report.sh "${{ env.TEST_SCOPE }}" all_integration_results

      - name: Export Final Integration Metrics
        run: |
          source .github/scripts/workflow_utils.sh
          export_performance_metrics "integration_testing" "all_integration_results/final_metrics.json"

      - name: Upload Integration Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-final-report
          path: |
            integration_test_report.md
            all_integration_results/
          retention-days: 30