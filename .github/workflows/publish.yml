name: üöÄ Build and Publish to PyPI

on:
  # Trigger on version tags (always) OR main branch pyproject.toml changes
  push:
    tags:
      - 'v*'
    branches: 
      - main
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (optional - will use pyproject.toml if empty)'
        required: false
        type: string

# Set workflow-level permissions
permissions:
  contents: write       # For creating releases and accessing repository content
  actions: read         # For workflow context
  id-token: write       # For OIDC token access
  pull-requests: read   # For PR information access

jobs:
  # Job 1: Run comprehensive tests
  test:
    name: üß™ Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: üì¶ Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: üîß Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: üì• Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: üì¶ Install project
      run: poetry install --no-interaction
      
    - name: üß™ Run tests
      run: |
        poetry run pytest tests/ -v --tb=short
        echo "‚úÖ All tests passed!"
        
    - name: üìä Test coverage report
      run: |
        poetry run pytest tests/ --cov=classroom_pilot --cov-report=xml --cov-report=term
        
    - name: üì§ Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job 2: Build and publish to PyPI
  publish:
    name: üì¶ Build & Publish to PyPI
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch' || (github.ref == 'refs/heads/main' && contains(github.event.head_commit.modified, 'pyproject.toml'))
    
    environment:
      name: pypi
      url: https://pypi.org/project/classroom-pilot/
      
    permissions:
      id-token: write  # For trusted publishing
      contents: write  # For creating releases
      actions: read    # For workflow context
      attestations: write  # For build attestations
      
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog
        
    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: üì¶ Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: üîß Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
    - name: üì• Install dependencies
      run: poetry install --no-interaction
      
    - name: üìù Extract version from tag or pyproject.toml
      id: version
      run: |
        if [[ ${{ github.event_name }} == 'workflow_dispatch' && -n "${{ github.event.inputs.version }}" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "Using manual version: $VERSION"
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Using tag version: $VERSION"
        else
          VERSION=$(poetry version -s)
          echo "Using pyproject.toml version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: üîÑ Update version if needed
      if: github.event.inputs.version != ''
      run: |
        poetry version ${{ github.event.inputs.version }}
        
    - name: ‚úÖ Validate package configuration
      run: |
        poetry check
        echo "‚úÖ Package configuration is valid"
        
    - name: üèóÔ∏è Build package
      run: |
        poetry build
        echo "‚úÖ Package built successfully"
        ls -la dist/
        
    - name: üîç Verify build contents
      run: |
        echo "üì¶ Package contents:"
        tar -tzf dist/*.tar.gz | head -20
        echo "üîç Wheel contents:"
        unzip -l dist/*.whl | head -20
        
    - name: üöÄ Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.10.3
        
    - name: üìã Create Release Notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## üéâ classroom-pilot v${{ steps.version.outputs.version }}
        
        ### üì¶ Installation
        ```bash
        pip install classroom-pilot==${{ steps.version.outputs.version }}
        ```
        
        ### üöÄ What's New
        - Comprehensive GitHub Classroom automation
        - Modern Python CLI with 153 tests
        - Modular architecture for educational workflows
        
        ### üìä Package Stats
        - **Tests**: 153 passing tests across 9 packages
        - **CLI Commands**: 7 command groups for complete workflow automation
        - **Python Support**: 3.10, 3.11, 3.12
        
        ### üìö Documentation
        - [PyPI Package](https://pypi.org/project/classroom-pilot/)
        - [GitHub Repository](https://github.com/hugo-valle/classroom-pilot)
        - [Installation Guide](https://github.com/hugo-valle/classroom-pilot#installation)
        
        ---
        *Automated release created by GitHub Actions*
        EOF
        
    - name: üè∑Ô∏è Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        name: üéâ classroom-pilot v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'a') || contains(steps.version.outputs.version, 'b') || contains(steps.version.outputs.version, 'rc') }}
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üì¢ Post-publish verification
      run: |
        source .github/scripts/workflow_utils.sh
        
        echo "üîç Verifying package availability..."
        # Try multiple times with increasing delays
        for i in {1..5}; do
          echo "Attempt $i/5..."
          # Check if the specific version is available
          if pip install classroom-pilot==${{ env.VERSION }} --dry-run --quiet 2>/dev/null; then
            echo "‚úÖ Package version ${{ env.VERSION }} found on PyPI!"
            break
          elif [ $i -eq 5 ]; then
            echo "‚ö†Ô∏è Package not yet available on PyPI, but publication likely succeeded"
            echo "Note: PyPI propagation can take several minutes"
            echo "Check manually: https://pypi.org/project/classroom-pilot/${{ env.VERSION }}/"
          else
            echo "Waiting 30 seconds before retry..."
            sleep 30
          fi
        done
        
        echo "‚úÖ Publication process completed!"
        echo "üì¶ Package: https://pypi.org/project/classroom-pilot/${{ env.VERSION }}/"
        
    - name: üí¨ Notify on failure
      if: failure() && !cancelled()
      run: |
        source .github/scripts/workflow_utils.sh
        log_error "‚ùå Publication failed for classroom-pilot v${VERSION:-unknown}"
        
  # Job 3: Update documentation
  update-docs:
    name: üìö Update Documentation
    needs: publish
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main  # Checkout main branch instead of tag
        
    - name: üìù Update publication history
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        DATE=$(date '+%B %d, %Y')
        
        # Update PYPI_PUBLICATION.md
        sed -i "/### Future Releases/i ### v$VERSION ($DATE)\n- **Status**: ‚úÖ Published via GitHub Actions\n- **Features**: Automated release workflow\n- **PyPI**: https://pypi.org/project/classroom-pilot/$VERSION/\n" docs/PYPI_PUBLICATION.md
        
        # Commit changes
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/PYPI_PUBLICATION.md
        git commit -m "docs: update publication history for v$VERSION" || exit 0
        git push origin main
