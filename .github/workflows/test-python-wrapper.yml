name: üêç Python Wrapper Test & Quality Assurance

on:
  push:
    branches: [ main, develop, feature/python-wrapper, feature/python-migration ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CACHE_VERSION: v3
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1

permissions:
  contents: read
  actions: read

jobs:
  test-python-wrapper:
    name: üß™ Test Python Wrapper (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Load workflow utilities
      run: |
        chmod +x .github/scripts/workflow_utils.sh
        source .github/scripts/workflow_utils.sh
        echo "STEP_START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: üíæ Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
        key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('pyproject.toml', 'requirements-dev.txt') }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('pyproject.toml') }}-
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-

    - name: üîß Install Poetry with retry
      run: |
        source .github/scripts/workflow_utils.sh
        
        install_poetry_with_retry() {
          log_info "Installing Poetry for Python ${{ matrix.python-version }}"
          
          if ! retry_with_backoff "pip install poetry" "Poetry installation" 3 5; then
            log_error "Failed to install Poetry after 3 attempts"
            return 1
          fi
          
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry --version
          
          log_success "Poetry installation completed successfully"
          return 0
        }
        
        if ! install_poetry_with_retry; then
          log_error "Poetry installation failed completely"
          exit 1
        fi

    - name: üíæ Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          .venv
          ~/.cache/pypoetry
        key: ${{ runner.os }}-py${{ matrix.python-version }}-poetry-${{ hashFiles('pyproject.toml', 'poetry.lock') }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-poetry-${{ hashFiles('pyproject.toml') }}-
          ${{ runner.os }}-py${{ matrix.python-version }}-poetry-

    - name: Install Python dependencies with validation
      shell: bash
      run: |
        if ! .github/scripts/install_python_dependencies.sh "${{ matrix.python-version }}"; then
          echo "::error::Dependency installation or validation failed"
          exit 1
        fi

    - name: üß™ Test with pytest (comprehensive)
      run: |
        source .github/scripts/workflow_utils.sh
        
        run_comprehensive_tests() {
          log_info "Running comprehensive test suite for Python ${{ matrix.python-version }}"
          
          local test_start_time=$(date +%s)
          
          mkdir -p test-results/python${{ matrix.python-version }}
          
          local pytest_cmd=(
            "poetry" "run" "pytest"
            "tests/"
            "-v"
            "--tb=short"
            "--strict-markers"
            "--disable-warnings"
            "--cov=classroom_pilot"
            "--cov-branch"
            "--cov-report=term-missing:skip-covered"
            "--cov-report=xml:test-results/python${{ matrix.python-version }}/coverage.xml"
            "--cov-report=html:test-results/python${{ matrix.python-version }}/htmlcov"
            "--junitxml=test-results/python${{ matrix.python-version }}/pytest-results.xml"
          )
          
          if ! "${pytest_cmd[@]}"; then
            log_error "Test execution failed for Python ${{ matrix.python-version }}"
            return 1
          fi
          
          local test_end_time=$(date +%s)
          local test_duration=$((test_end_time - test_start_time))
          
          log_success "All tests passed for Python ${{ matrix.python-version }} (${test_duration}s)"
          return 0
        }
        
        if ! run_comprehensive_tests; then
          log_error "Comprehensive test execution failed"
          exit 1
        fi

    - name: üìä Upload test results and coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python${{ matrix.python-version }}
        path: |
          test-results/python${{ matrix.python-version }}/
        retention-days: 30

  test-matrix-summary:
    name: üìä Python Test Matrix Summary
    runs-on: ubuntu-latest
    needs: [test-python-wrapper]
    if: always()
    
    steps:
    - name: üì• Checkout code (for utilities)
      uses: actions/checkout@v4
    
    - name: üì¶ Load workflow utilities
      run: |
        chmod +x .github/scripts/workflow_utils.sh
        source .github/scripts/workflow_utils.sh
    
    - name: üìä Generate test matrix summary
      run: |
        source .github/scripts/workflow_utils.sh
        
        log_info "Python Test Matrix Summary"
        echo "=================================="
        
        success_count=0
        failure_count=0
        
        if [ "${{ needs.test-python-wrapper.result }}" = "success" ]; then
          log_success "Python wrapper tests: PASSED"
          success_count=$((success_count + 1))
        else
          log_error "Python wrapper tests: FAILED"
          failure_count=$((failure_count + 1))
        fi
        
        echo "Summary: $success_count passed, $failure_count failed"
        
        if [ $failure_count -gt 0 ]; then
          log_error "Some Python versions failed testing"
          exit 1
        else
          log_success "All Python versions passed testing successfully!"
        fi
