name: 🐍 Python Wrapper Test & Quality Assurance

on:
  push:
    branches: [ main, develop, feature/python-wrapper, feature/python-migration ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CACHE_VERSION: v3
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1

permissions:
  contents: read
  actions: read

jobs:
  test-python-wrapper:
    name: 🧪 Test Python Wrapper (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Load workflow utilities
      run: |
        chmod +x .github/scripts/workflow_utils.sh
        source .github/scripts/workflow_utils.sh
        echo "STEP_START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: 💾 Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
        key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('pyproject.toml', 'requirements-dev.txt') }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('pyproject.toml') }}-
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-

    - name: 🔧 Install Poetry with retry
      run: ./.github/scripts/install_poetry_with_retry.sh "${{ matrix.python-version }}"

    - name: 💾 Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          .venv
          ~/.cache/pypoetry
        key: ${{ runner.os }}-py${{ matrix.python-version }}-poetry-${{ hashFiles('pyproject.toml', 'poetry.lock') }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-poetry-${{ hashFiles('pyproject.toml') }}-
          ${{ runner.os }}-py${{ matrix.python-version }}-poetry-

    - name: Install Python dependencies with validation
      shell: bash
      run: |
        if ! .github/scripts/install_python_dependencies.sh "${{ matrix.python-version }}"; then
          echo "::error::Dependency installation or validation failed"
          exit 1
        fi

    - name: 🧪 Test with pytest (comprehensive)
      run: ./.github/scripts/run_comprehensive_tests.sh "${{ matrix.python-version }}"

    - name: 📊 Upload test results and coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python${{ matrix.python-version }}
        path: |
          test-results/python${{ matrix.python-version }}/
        retention-days: 30

  test-matrix-summary:
    name: 📊 Python Test Matrix Summary
    runs-on: ubuntu-latest
    needs: [test-python-wrapper]
    if: always()
    
    steps:
    - name: 📥 Checkout code (for utilities)
      uses: actions/checkout@v4
    
    - name: 📦 Load workflow utilities
      run: |
        chmod +x .github/scripts/workflow_utils.sh
        source .github/scripts/workflow_utils.sh
    
    - name: 📊 Generate test matrix summary
      run: ./.github/scripts/generate_test_matrix_summary.sh "${{ needs.test-python-wrapper.result }}"
