name: 🤖 Automated Release (Feature Branches)

# This workflow automatically creates releases when release/hotfix branches are merged to main
# For official production releases with full validation, use git tags to trigger release.yml

on:
  push:
    branches:
      - main
    # Only trigger if merged from release/hotfix branches

permissions:
  contents: write      # Required to create releases and tags
  actions: read        # Required for workflow context
  pull-requests: read  # Required to fetch PR information

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "latest=$TAG" >> $GITHUB_OUTPUT

      - name: Detect release version from branch
        id: version_info
        run: |
          BRANCH_REF=$(git log -1 --pretty=%D | grep -oE 'origin/(release|hotfix)/[0-9]+\.[0-9]+\.[0-9]+' || true)
          if [[ -n "$BRANCH_REF" && "$BRANCH_REF" =~ ^origin/(release|hotfix)/([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "version=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
            echo "type=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "❌ Not a release or hotfix branch. Skipping."
            exit 0
          fi

      - name: Collect merged PRs since last tag
        id: prs
        run: |
          PREV_TAG=${{ steps.get_tag.outputs.latest }}
          NEW_TAG=${{ steps.version_info.outputs.version }}

          echo "Fetching PRs merged between $PREV_TAG..HEAD"

          gh api \
            repos/${{ github.repository }}/pulls \
            --jq '.[] | select(.merged_at != null) | {title: .title, number: .number, labels: [.labels[].name]}' \
            > prs.json

          echo "prs=$(cat prs.json)" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate grouped changelog
        id: changelog
        run: |
          PREV_TAG=${{ steps.get_tag.outputs.latest }}
          NEW_TAG=${{ steps.version_info.outputs.version }}
          TYPE=${{ steps.version_info.outputs.type }}

          if [ -z "$NEW_TAG" ] || [ -z "$TYPE" ]; then
            echo "No release version detected; skipping changelog generation."
            exit 0
          fi

          ./.github/scripts/generate_grouped_changelog.sh "$PREV_TAG" "$NEW_TAG" "$TYPE"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version_info.outputs.version }}
          name: ${{ steps.version_info.outputs.type }} v${{ steps.version_info.outputs.version }}
          body_path: docs/CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}
