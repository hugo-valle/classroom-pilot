name: 🤖 Automated Release (Feature Branches)

# This workflow automatically creates releases when release/hotfix branches are merged to main
# For official production releases with full validation, use git tags to trigger release.yml

on:
  push:
    branches:
      - main
    # Only trigger if merged from release/hotfix branches

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "latest=$TAG" >> $GITHUB_OUTPUT

      - name: Detect release version from branch
        id: version_info
        run: |
          BRANCH_REF=$(git log -1 --pretty=%D | grep -oE 'origin/(release|hotfix)/[0-9]+\.[0-9]+\.[0-9]+' || true)
          if [[ -n "$BRANCH_REF" && "$BRANCH_REF" =~ ^origin/(release|hotfix)/([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "version=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
            echo "type=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "❌ Not a release or hotfix branch. Skipping."
            exit 0
          fi

      - name: Collect merged PRs since last tag
        id: prs
        run: |
          PREV_TAG=${{ steps.get_tag.outputs.latest }}
          NEW_TAG=${{ steps.version_info.outputs.version }}

          echo "Fetching PRs merged between $PREV_TAG..HEAD"

          gh api \
            repos/${{ github.repository }}/pulls \
            --jq '.[] | select(.merged_at != null) | {title: .title, number: .number, labels: [.labels[].name]}' \
            > prs.json

          echo "prs=$(cat prs.json)" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate grouped changelog
        id: changelog
        run: |
          PREV_TAG=${{ steps.get_tag.outputs.latest }}
          NEW_TAG=${{ steps.version_info.outputs.version }}
          TYPE=${{ steps.version_info.outputs.type }}

          echo "## ${TYPE^} v$NEW_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          echo "### 🚀 Features" >> CHANGELOG.md
          jq -r '.[] | select(.labels[]? == "feature") | "- \(.title) (#\(.number))"' prs.json >> CHANGELOG.md || true
          git log $PREV_TAG..HEAD --pretty=format:"- %s" | grep -iE '^feat' | sed 's/^feat:? *//' >> CHANGELOG.md || true
          if ! grep -q "-" CHANGELOG.md; then echo "_No new features_" >> CHANGELOG.md; fi

          echo "" >> CHANGELOG.md
          echo "### 🐛 Fixes" >> CHANGELOG.md
          jq -r '.[] | select(.labels[]? == "bug") | "- \(.title) (#\(.number))"' prs.json >> CHANGELOG.md || true
          git log $PREV_TAG..HEAD --pretty=format:"- %s" | grep -iE '^fix' | sed 's/^fix:? *//' >> CHANGELOG.md || true
          if ! grep -q "-" CHANGELOG.md; then echo "_No bug fixes_" >> CHANGELOG.md; fi

          echo "" >> CHANGELOG.md
          echo "### 📝 Docs" >> CHANGELOG.md
          jq -r '.[] | select(.labels[]? == "docs") | "- \(.title) (#\(.number))"' prs.json >> CHANGELOG.md || true
          git log $PREV_TAG..HEAD --pretty=format:"- %s" | grep -iE '^docs' | sed 's/^docs:? *//' >> CHANGELOG.md || true
          if ! grep -q "-" CHANGELOG.md; then echo "_No docs changes_" >> CHANGELOG.md; fi

          echo "" >> CHANGELOG.md
          echo "### 🔧 Other Changes" >> CHANGELOG.md
          jq -r '.[] | select(.labels[]? | in({"feature":1,"bug":1,"docs":1}) | not) | "- \(.title) (#\(.number))"' prs.json >> CHANGELOG.md || true
          git log $PREV_TAG..HEAD --pretty=format:"- %s" | grep -vE '^(feat|fix|docs)' >> CHANGELOG.md || true
          if ! grep -q "-" CHANGELOG.md; then echo "_None_" >> CHANGELOG.md; fi

          cat CHANGELOG.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version_info.outputs.version }}
          name: ${{ steps.version_info.outputs.type }} v${{ steps.version_info.outputs.version }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}