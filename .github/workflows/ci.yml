name: 🔄 CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

# Permissions for GITHUB_TOKEN
permissions:
  contents: read       # Required to checkout code
  issues: read         # Required for security scanning
  pull-requests: read  # Required for PR context

env:
  # Performance monitoring
  CI_START_TIME: ${{ github.event.head_commit.timestamp }}
  CACHE_VERSION: v2

jobs:
  test:
    name: 🐍 Test Python CLI (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Load workflow utilities
        run: |
          chmod +x .github/scripts/workflow_utils.sh
          source .github/scripts/workflow_utils.sh
          echo "STEP_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: 🔧 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 📚 Install dependencies
        run: |
          source .github/scripts/workflow_utils.sh
          poetry install

      - name: ✅ Validate environment
        run: |
          source .github/scripts/workflow_utils.sh
          validate_environment "python${{ matrix.python-version }}" "git curl poetry"

      - name: 🐍 Test Python CLI syntax
        run: |
          source .github/scripts/workflow_utils.sh
          print_message "step" "Validating Python CLI syntax"
          
          # Test Python syntax and imports
          poetry run python -m py_compile classroom_pilot/__main__.py
          poetry run python -m py_compile classroom_pilot/cli.py
          
          # Test CLI help commands
          poetry run python -m classroom_pilot --help
          poetry run python -m classroom_pilot assignments --help
          poetry run python -m classroom_pilot repos --help
          poetry run python -m classroom_pilot secrets --help
          poetry run python -m classroom_pilot automation --help
          
          print_message "success" "Python CLI validation completed"

      - name: 🧪 Test CLI functionality
        run: |
          source .github/scripts/workflow_utils.sh
          
          # Create comprehensive test files
          echo '{"assignment":"test","version":"1.0"}' > assignment.json
          echo '{"cells":[],"metadata":{},"nbformat":4,"nbformat_minor":4}' > test.ipynb
          echo '{"test_secret": "test_value"}' > test-secrets.json
          
          # Test Python CLI help commands
          print_message "info" "Testing Python CLI help commands"
          poetry run python -m classroom_pilot --help > /dev/null
          poetry run python -m classroom_pilot assignments --help > /dev/null
          poetry run python -m classroom_pilot repos --help > /dev/null
          poetry run python -m classroom_pilot secrets --help > /dev/null
          poetry run python -m classroom_pilot automation --help > /dev/null
          
          print_message "success" "All Python CLI help commands working"

      - name: 📊 Generate test summary
        if: always()
        run: |
          source .github/scripts/workflow_utils.sh
          
          # Calculate step timing
          step_duration=$(report_step_timing "Test Python CLI (Python ${{ matrix.python-version }})" "$STEP_START_TIME")
          
          # Export performance metrics for aggregation
          export_performance_metrics "test_python_cli_${{ matrix.python-version }}" "/tmp/workflow_metrics.json"
          
          # Create comprehensive summary
          if [ "${{ job.status }}" = "success" ]; then
            create_step_summary "Test Python CLI (Python ${{ matrix.python-version }})" "success" "| Python Version | ${{ matrix.python-version }} |\n| Duration | ${step_duration}s |"
          else
            error_report=$(generate_error_report "Test Python CLI (Python ${{ matrix.python-version }})" "Python CLI testing failed" "Matrix: Python ${{ matrix.python-version }}" "- Check Python installation\n- Verify CLI module imports\n- Review command implementation")
            echo "$error_report" >> $GITHUB_STEP_SUMMARY
            create_step_summary "Test Python CLI (Python ${{ matrix.python-version }})" "failure"
          fi

  lint:
    name: 🔍 Python Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Load workflow utilities
        run: |
          chmod +x .github/scripts/workflow_utils.sh
          source .github/scripts/workflow_utils.sh
          echo "STEP_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: 🔧 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 📚 Install dependencies
        run: |
          source .github/scripts/workflow_utils.sh
          poetry install

      - name: 🔍 Run Python code quality checks
        run: |
          source .github/scripts/workflow_utils.sh
          print_message "step" "Running Python code quality analysis"
          
          # Check Python syntax
          log_info "Checking Python syntax..."
          poetry run python -m py_compile classroom_pilot/*.py
          
          # Test imports
          log_info "Testing module imports..."
          poetry run python -c "import classroom_pilot; print('✅ Package imports successfully')"
          
          # Test CLI functionality
          log_info "Testing CLI functionality..."
          poetry run python -m classroom_pilot --help > /dev/null
          
          print_message "success" "Python code quality checks passed"

      - name: 📊 Generate lint summary
        if: always()
        run: |
          source .github/scripts/workflow_utils.sh
          step_duration=$(report_step_timing "Python Code Quality" "$STEP_START_TIME")
          
          # Export performance metrics for aggregation
          export_performance_metrics "python_code_quality" "/tmp/workflow_metrics.json"
          
          if [ "${{ job.status }}" = "success" ]; then
            create_step_summary "Python Code Quality" "success" "| Tool | Python syntax + imports |\n| Duration | ${step_duration}s |"
          else
            create_step_summary "Python Code Quality" "failure"
          fi

  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Load workflow utilities
        run: |
          chmod +x .github/scripts/workflow_utils.sh
          source .github/scripts/workflow_utils.sh
          echo "STEP_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: 🗂️ Setup security cache directories
        run: |
          source .github/scripts/workflow_utils.sh
          create_directory_if_not_exists "/tmp/security-scan-cache"
          create_directory_if_not_exists "/tmp/security-reports"

      - name: 📦 Export Poetry dependencies
        run: |
          chmod +x .github/scripts/export_poetry_dependencies.sh
          .github/scripts/export_poetry_dependencies.sh

      - name: 🔍 Security audit
        run: |
          chmod +x .github/scripts/security_utils.sh
          source .github/scripts/security_utils.sh
          run_comprehensive_security_audit

      - name: 📊 Security report summary
        run: |
          source .github/scripts/security_utils.sh
          generate_security_summary