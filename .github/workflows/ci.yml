name: üîÑ CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: üß™ Test Scripts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shell: [bash, zsh]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install shell
        run: |
          if [ "${{ matrix.shell }}" = "zsh" ]; then
            sudo apt-get update
            sudo apt-get install -y zsh
          fi

      - name: Test script syntax
        run: |
          echo "üîç Testing script syntax with ${{ matrix.shell }}..."
          for script in scripts/*.sh; do
            echo "Checking $script..."
            ${{ matrix.shell }} -n "$script"
          done

      - name: Test help commands
        run: |
          echo "üß™ Testing help commands..."
          
          # Create mock directory structure for testing
          mkdir -p ../mock-assignment
          cd ../mock-assignment
          
          # Create mock assignment.conf
          cat > assignment.conf << 'EOF'
          CLASSROOM_URL="https://classroom.github.com/classrooms/12345/assignments/test"
          TEMPLATE_REPO_URL="https://github.com/test-org/test-template"
          GITHUB_ORGANIZATION="test-org"
          ASSIGNMENT_NOTEBOOK="test.ipynb"
          INSTRUCTOR_TESTS_TOKEN="test-token"
          SECRETS_CONFIG="test-secrets.json"
          STEP_MANAGE_SECRETS="true"
          EOF
          
          # Create mock assignment notebook
          echo '{"cells":[],"metadata":{},"nbformat":4,"nbformat_minor":4}' > test.ipynb
          
          # Create symlink to tools
          ln -s ../gh_classroom_tools tools
          
          # Test help commands with proper context
          ${{ matrix.shell }} tools/scripts/setup-assignment.sh --help
          ${{ matrix.shell }} tools/scripts/assignment-orchestrator.sh --help
          ${{ matrix.shell }} tools/scripts/fetch-student-repos.sh --help

  lint:
    name: üîç Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Shellcheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './scripts'
          severity: info
        env:
          SHELLCHECK_OPTS: -e SC2034,SC2155

  security:
    name: üõ°Ô∏è Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  validate-docs:
    name: üìö Validate Docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check CHANGELOG format
        run: |
          echo "üìù Validating CHANGELOG.md..."
          if [ ! -f "docs/CHANGELOG.md" ]; then
            echo "‚ùå CHANGELOG.md not found"
            exit 1
          fi
          
          # Check for required sections
          if ! grep -q "## \[Unreleased\]" docs/CHANGELOG.md; then
            echo "‚ùå CHANGELOG.md missing [Unreleased] section"
            exit 1
          fi
          
          echo "‚úÖ CHANGELOG.md format is valid"

      - name: Check README exists
        run: |
          if [ ! -f "README.md" ] && [ ! -f "docs/README.md" ]; then
            echo "‚ö†Ô∏è No README.md found"
          else
            echo "‚úÖ README.md found"
          fi
