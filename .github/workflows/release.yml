name: üöÄ Official Release (Tagged)

# This workflow creates comprehensive, production-ready releases with full validation
# Triggered by git tags (v*.*.*) for major releases
# For quick automated releases from feature branches, see auto-release.yml

on:
  push:
    tags:
      - 'v*.*.*'          # Matches v1.0.0, v1.0.0-alpha.1, v1.0.0-beta.1, etc.

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write      # Required to create releases
  issues: read         # Required for security scanning
  pull-requests: read  # Required for workflow context

jobs:
  validate:
    name: üîç Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      release_type: ${{ steps.version.outputs.release_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version info
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "version=${TAG_NAME}" >> $GITHUB_OUTPUT
          
          # Determine if this is a prerelease
          if [[ "$TAG_NAME" =~ -a\.|a[0-9]+|b[0-9]+|rc[0-9]+ ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            if [[ "$TAG_NAME" =~ a[0-9]+ ]]; then
              echo "release_type=alpha" >> $GITHUB_OUTPUT
            elif [[ "$TAG_NAME" =~ b[0-9]+ ]]; then
              echo "release_type=beta" >> $GITHUB_OUTPUT
            else
              echo "release_type=rc" >> $GITHUB_OUTPUT
            fi
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=stable" >> $GITHUB_OUTPUT
          fi

      - name: Validate tag format
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(a[0-9]+|b[0-9]+|rc[0-9]+)?$ ]]; then
            echo "‚ùå Invalid tag format: $TAG_NAME"
            echo "Expected format: v1.0.0, v1.0.0a1, v1.0.0b1, v1.0.0rc1"
            exit 1
          fi
          echo "‚úÖ Valid tag format: $TAG_NAME"

  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-ansi

      - name: Test Python syntax and imports
        run: |
          echo "üîç Testing Python syntax and imports..."
          poetry run python -m py_compile classroom_pilot/__init__.py
          poetry run python -m py_compile classroom_pilot/__main__.py
          poetry run python -m py_compile classroom_pilot/cli.py
          echo "‚úÖ All Python files compile successfully"

      - name: Test CLI functionality
        run: |
          echo "üß™ Testing CLI functionality..."
          poetry run python -m classroom_pilot --help
          poetry run python -m classroom_pilot --version
          echo "‚úÖ CLI commands work correctly"

      - name: Run unit tests
        run: |
          echo "üß™ Running unit tests..."
          poetry run pytest tests/ -v --tb=short
          echo "‚úÖ All tests passed"

      - name: Test package installation
        run: |
          echo "üß™ Testing package installation..."
          poetry build
          pip install dist/*.whl
          classroom-pilot --version
          echo "‚úÖ Package installs and runs correctly"

  security-scan:
    name: üõ°Ô∏è Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run security checks
        run: |
          echo "üõ°Ô∏è Running security checks..."
          # Check for common security issues in Python code
          poetry run python -m py_compile classroom_pilot/*.py
          poetry run python -m py_compile classroom_pilot/*/*.py
          echo "‚úÖ Python security checks passed"

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  generate-changelog:
    name: üìù Generate Release Notes
    runs-on: ubuntu-latest
    needs: [validate, test, security-scan]
    outputs:
      release_notes: ${{ steps.notes.outputs.release_notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          RELEASE_TYPE="${{ needs.validate.outputs.release_type }}"
          
          # Extract changelog section for this version
          if grep -q "## \[$VERSION\]" docs/CHANGELOG.md; then
            # Extract existing changelog section
            CHANGELOG_SECTION=$(sed -n "/## \[$VERSION\]/,/## \[/p" docs/CHANGELOG.md | sed '$d' | tail -n +2)
          else
            # Generate basic release notes from git log
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$PREV_TAG" ]; then
              CHANGELOG_SECTION="### Changes since $PREV_TAG"$'\n\n'
              CHANGELOG_SECTION+=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
            else
              CHANGELOG_SECTION="### Initial release"$'\n\n'"- Complete GitHub Classroom Assignment Management Suite"
            fi
          fi
          
          # Create release notes based on release type
          case "$RELEASE_TYPE" in
            "alpha")
              RELEASE_NOTES="## ‚ö†Ô∏è Alpha Release $VERSION

          **This is a pre-release version for testing and feedback.**

          ### üöÄ What's New
          $CHANGELOG_SECTION

          ### üìã Installation
          \`\`\`bash
          # Install via pip
          pip install classroom-pilot==$VERSION
          
          # Or install via pipx (recommended)
          pipx install classroom-pilot==$VERSION
          
          # Verify installation
          classroom-pilot --version
          \`\`\`

          ### ‚ö†Ô∏è Known Limitations
          - This is an alpha release - expect some rough edges
          - Please report issues and provide feedback
          - Not recommended for production use

          ### üîó Links
          - [Documentation](https://github.com/hugo-valle/classroom-pilot/tree/$VERSION/docs)
          - [PyPI Package](https://pypi.org/project/classroom-pilot/$VERSION/)
          - [Report Issues](https://github.com/hugo-valle/classroom-pilot/issues)"
              ;;
            "beta")
              RELEASE_NOTES="## üéØ Beta Release $VERSION

          **This is a beta release - feature complete but may have minor issues.**

          ### üöÄ What's New
          $CHANGELOG_SECTION

          ### üìã Installation
          \`\`\`bash
          # Install via pip
          pip install classroom-pilot==$VERSION
          
          # Or install via pipx (recommended)
          pipx install classroom-pilot==$VERSION
          
          # Verify installation
          classroom-pilot --version
          \`\`\`

          ### üß™ Testing
          - Suitable for testing in non-production environments
          - Please report any remaining issues

          ### üîó Links
          - [Documentation](https://github.com/hugo-valle/classroom-pilot/tree/$VERSION/docs)
          - [PyPI Package](https://pypi.org/project/classroom-pilot/$VERSION/)
          - [Report Issues](https://github.com/hugo-valle/classroom-pilot/issues)"
              ;;
            "stable")
              RELEASE_NOTES="## üéâ Stable Release $VERSION

          ### üöÄ What's New
          $CHANGELOG_SECTION

          ### üìã Installation
          \`\`\`bash
          # Install via pip
          pip install classroom-pilot==$VERSION
          
          # Or install via pipx (recommended)
          pipx install classroom-pilot==$VERSION
          
          # Verify installation
          classroom-pilot --version
          \`\`\`

          ### üîó Links
          - [Documentation](https://github.com/hugo-valle/classroom-pilot/tree/$VERSION/docs)
          - [PyPI Package](https://pypi.org/project/classroom-pilot/$VERSION/)
          - [Report Issues](https://github.com/hugo-valle/classroom-pilot/issues)"
              ;;
          esac
          
          # Save release notes (escape for GitHub Actions)
          {
            echo 'release_notes<<EOF'
            echo "$RELEASE_NOTES"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  create-release:
    name: üéâ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, generate-changelog]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global advice.detachedHead false
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          VERSION="${{ needs.validate.outputs.version }}"
          RELEASE_TYPE="${{ needs.validate.outputs.release_type }}"
          IS_PRERELEASE="${{ needs.validate.outputs.is_prerelease }}"
          
          echo "Creating release for version: $VERSION"
          echo "Release type: $RELEASE_TYPE"
          echo "Is prerelease: $IS_PRERELEASE"
          
          # Set release title based on type
          if [ "$RELEASE_TYPE" = "alpha" ]; then
            TITLE="‚ö†Ô∏è Alpha Release $VERSION"
          elif [ "$RELEASE_TYPE" = "beta" ]; then
            TITLE="üéØ Beta Release $VERSION"
          else
            TITLE="üéâ Stable Release $VERSION"
          fi
          
          # Create release using GitHub CLI with minimal options
          PRERELEASE_FLAG=""
          if [ "$IS_PRERELEASE" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          # Simple release notes
          RELEASE_NOTES="Automated release $VERSION with comprehensive CI/CD automation."
          
          # Try to create release with timeout
          timeout 60 gh release create "$VERSION" \
            --title "$TITLE" \
            --notes "$RELEASE_NOTES" \
            $PRERELEASE_FLAG \
            --verify-tag || {
            echo "Release creation failed or timed out. Checking if release exists..."
            if gh release view "$VERSION" >/dev/null 2>&1; then
              echo "Release $VERSION already exists."
            else
              echo "Release creation failed completely."
              exit 1
            fi
          }
          
          echo "Release process completed successfully!"

  update-changelog:
    name: üìù Update Changelog
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: needs.validate.outputs.release_type != 'alpha'  # Only for beta and stable
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Update [Unreleased] to the actual version with date
          if grep -q "## \[Unreleased\]" docs/CHANGELOG.md; then
            sed -i "s/## \[Unreleased\]/## [$VERSION] - $DATE/" docs/CHANGELOG.md
            
            # Add new [Unreleased] section at the top
            sed -i "/## \[$VERSION\] - $DATE/i\\## [Unreleased]\\n" docs/CHANGELOG.md
          fi

      - name: Commit changelog updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/CHANGELOG.md
          git commit -m "docs: update changelog for ${{ needs.validate.outputs.version }}" || exit 0
          git push

  notify:
    name: üì¢ Notify
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: always()
    steps:
      - name: Notify success
        if: needs.create-release.result == 'success'
        run: |
          echo "üéâ Successfully released ${{ needs.validate.outputs.version }}"
          echo "Release type: ${{ needs.validate.outputs.release_type }}"
          echo "Prerelease: ${{ needs.validate.outputs.is_prerelease }}"

      - name: Notify failure
        if: needs.create-release.result == 'failure'
        run: |
          echo "‚ùå Release failed for ${{ needs.validate.outputs.version }}"
          exit 1
