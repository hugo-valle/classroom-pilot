{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Classroom Pilot \ud83d\ude80","text":"<p>Classroom Pilot is a modern Python CLI tool for automating GitHub Classroom assignment management with comprehensive workflow orchestration, repository operations, and secret management.</p> <p> </p>"},{"location":"#features","title":"\u2728 Features","text":""},{"location":"#modern-python-cli","title":"\ud83d\udc0d Modern Python CLI","text":"<ul> <li>Type-safe, intuitive commands with rich help and output</li> <li>Simple installation: <code>pip install classroom-pilot</code></li> <li>Cross-platform support (Windows, macOS, Linux)</li> </ul>"},{"location":"#modular-architecture","title":"\ud83d\udd27 Modular Architecture","text":"<ul> <li>Organized command structure for different workflow areas</li> <li><code>assignments</code> - Setup and orchestration</li> <li><code>repos</code> - Repository operations and collaboration</li> <li><code>secrets</code> - Secret and token management</li> <li><code>automation</code> - Scheduling and batch processing</li> </ul>"},{"location":"#instructor-focused","title":"\ud83c\udfaf Instructor-Focused","text":"<ul> <li>Smart repository discovery with automatic filtering</li> <li>Excludes instructor repos from batch operations</li> <li>Configuration-driven workflows</li> <li>Enterprise GitHub support</li> </ul>"},{"location":"#security-automation","title":"\ud83d\udd10 Security &amp; Automation","text":"<ul> <li>Secure distribution of tokens and credentials</li> <li>Automated workflows with cron scheduling</li> <li>Comprehensive logging and monitoring</li> <li>Token rotation and management</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Install from PyPI\npip install classroom-pilot\n\n# Verify installation\nclassroom-pilot --help\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code># Interactive setup\nclassroom-pilot assignments setup\n\n# Run complete workflow\nclassroom-pilot assignments orchestrate --config assignment.conf\n\n# Manage secrets\nclassroom-pilot secrets add --config assignment.conf\n</code></pre> <p>Get Started \u2192</p>"},{"location":"#project-status","title":"\ud83d\udcca Project Status","text":"<ul> <li>Current Version: 3.0.1-alpha.2</li> <li>Python Support: 3.10, 3.11, 3.12</li> <li>Tests: 153+ comprehensive tests with 100% pass rate</li> <li>Package: Available on PyPI</li> <li>CI/CD: Automated testing and publishing</li> </ul>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":""},{"location":"#assignment-management","title":"Assignment Management","text":"<p>Automate the complete lifecycle of GitHub Classroom assignments from template synchronization to student support.</p>"},{"location":"#repository-operations","title":"Repository Operations","text":"<p>Efficiently discover, manage, and operate on student repositories with intelligent filtering and batch operations.</p>"},{"location":"#secret-distribution","title":"Secret Distribution","text":"<p>Securely distribute API keys, tokens, and credentials across multiple student repositories with automated rotation.</p>"},{"location":"#workflow-automation","title":"Workflow Automation","text":"<p>Set up scheduled automation for continuous assignment management with comprehensive monitoring.</p>"},{"location":"#support","title":"\ud83c\udd98 Support","text":"<ul> <li>Documentation: Browse Documentation</li> <li>Issues: GitHub Issues</li> <li>Package: PyPI Package</li> <li>Discussions: GitHub Discussions</li> </ul>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>MIT License - see License for details.</p> <p>Classroom Pilot - Modern Python automation for GitHub Classroom assignment management.</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to Classroom Pilot are documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#301-alpha2-2024-01-xx","title":"[3.0.1-alpha.2] - 2024-01-XX","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Complete MkDocs documentation structure with Material theme</li> <li>Professional documentation site organization</li> <li>CLI reference documentation with comprehensive examples</li> <li>Workflow documentation for all major operations</li> </ul>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>Modernized all documentation to use Python CLI commands</li> <li>Moved legacy bash script documentation to <code>docs/legacy/</code></li> <li>Restructured documentation for better organization and navigation</li> <li>Updated installation and setup instructions</li> </ul>"},{"location":"about/changelog/#fixed","title":"Fixed","text":"<ul> <li>Documentation consistency across all workflow guides</li> <li>CLI command examples and usage patterns</li> <li>Integration with modern Python packaging ecosystem</li> </ul>"},{"location":"about/changelog/#301-alpha1-2024-01-xx","title":"[3.0.1-alpha.1] - 2024-01-XX","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>Complete Python CLI implementation using Typer framework</li> <li>Modular package structure with organized subcommands</li> <li>Comprehensive test suite with 153+ tests</li> <li>CI/CD pipeline for automated PyPI publishing</li> <li>Professional documentation structure</li> </ul>"},{"location":"about/changelog/#changed_1","title":"Changed","text":"<ul> <li>Migration from bash scripts to Python CLI</li> <li>Updated project structure for better maintainability</li> <li>Modernized dependency management with Poetry</li> <li>Enhanced error handling and user experience</li> </ul>"},{"location":"about/changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Legacy bash script interfaces (moved to scripts/ directory)</li> <li>Old configuration formats (backward compatibility maintained)</li> </ul>"},{"location":"about/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Cross-platform compatibility issues</li> <li>Dependency conflicts with modern Python ecosystem</li> <li>CLI consistency and user experience</li> </ul>"},{"location":"about/changelog/#2xx-legacy-versions","title":"[2.x.x] - Legacy Versions","text":"<p>Previous versions used bash script interfaces and are documented in the legacy documentation.</p>"},{"location":"about/changelog/#major-features-in-legacy-versions","title":"Major Features in Legacy Versions","text":"<ul> <li>Bash script-based automation</li> <li>Basic GitHub Classroom integration</li> <li>Manual configuration management</li> <li>Shell-based workflow orchestration</li> </ul>"},{"location":"about/changelog/#migration-guide","title":"Migration Guide","text":""},{"location":"about/changelog/#from-2x-to-3x","title":"From 2.x to 3.x","text":"<p>The major change in version 3.x is the migration from bash scripts to a Python CLI:</p> <p>Old (2.x): <pre><code>./scripts/setup-assignment.sh\n./scripts/fetch-student-repos.sh\n</code></pre></p> <p>New (3.x): <pre><code>classroom-pilot assignments setup\nclassroom-pilot repos fetch\n</code></pre></p>"},{"location":"about/changelog/#configuration-changes","title":"Configuration Changes","text":"<p>Configuration files maintain backward compatibility, but new features use the updated format:</p> <pre><code># Modern configuration structure\nclassroom:\n  url: \"https://classroom.github.com/classrooms/12345\"\n  assignment_prefix: \"assignment-\"\n\ngithub:\n  token: \"${GITHUB_TOKEN}\"\n  organization: \"my-org\"\n\nautomation:\n  schedule: \"0 */6 * * *\"\n  dry_run: false\n</code></pre>"},{"location":"about/changelog/#command-mapping","title":"Command Mapping","text":"Legacy Script New CLI Command <code>setup-assignment.sh</code> <code>classroom-pilot assignments setup</code> <code>fetch-student-repos.sh</code> <code>classroom-pilot repos fetch</code> <code>assignment-orchestrator.sh</code> <code>classroom-pilot assignments orchestrate</code> <code>add-secrets-to-students.sh</code> <code>classroom-pilot secrets add</code> <code>cycle-collaborator.sh</code> <code>classroom-pilot repos collaborator cycle</code> <code>manage-cron.sh</code> <code>classroom-pilot automation schedule</code>"},{"location":"about/changelog/#development-history","title":"Development History","text":""},{"location":"about/changelog/#vision-and-goals","title":"Vision and Goals","text":"<p>Classroom Pilot was created to solve the challenges of managing GitHub Classroom assignments at scale:</p> <ul> <li>Automation: Reduce manual work in assignment management</li> <li>Consistency: Ensure consistent setup across all assignments</li> <li>Scalability: Handle large numbers of students and repositories</li> <li>Integration: Seamless GitHub Classroom integration</li> <li>Reliability: Robust error handling and recovery</li> </ul>"},{"location":"about/changelog/#technical-evolution","title":"Technical Evolution","text":"<ol> <li>Phase 1: Bash script collection for basic automation</li> <li>Phase 2: Organized script suite with configuration management</li> <li>Phase 3: Python CLI with modern architecture and testing</li> <li>Phase 4: Professional packaging and distribution</li> </ol>"},{"location":"about/changelog/#design-principles","title":"Design Principles","text":"<ul> <li>Modularity: Clear separation of concerns</li> <li>Testability: Comprehensive test coverage</li> <li>Usability: Intuitive command-line interface</li> <li>Reliability: Robust error handling and validation</li> <li>Maintainability: Clean code and documentation</li> </ul>"},{"location":"about/changelog/#future-roadmap","title":"Future Roadmap","text":""},{"location":"about/changelog/#short-term-v31","title":"Short Term (v3.1)","text":"<ul> <li>Enhanced GitHub API integration</li> <li>Improved error reporting and logging</li> <li>Additional automation workflows</li> <li>Extended configuration options</li> </ul>"},{"location":"about/changelog/#medium-term-v32","title":"Medium Term (v3.2)","text":"<ul> <li>Web dashboard for assignment monitoring</li> <li>Advanced scheduling and batch operations</li> <li>Plugin architecture for custom workflows</li> <li>Enhanced security and secret management</li> </ul>"},{"location":"about/changelog/#long-term-v40","title":"Long Term (v4.0)","text":"<ul> <li>Multi-platform desktop application</li> <li>Advanced analytics and reporting</li> <li>Integration with learning management systems</li> <li>Collaborative features for teaching teams</li> </ul>"},{"location":"about/changelog/#contributing","title":"Contributing","text":"<p>We welcome contributions! See our Contributing Guide for details on:</p> <ul> <li>Development setup</li> <li>Coding standards</li> <li>Testing requirements</li> <li>Pull request process</li> </ul>"},{"location":"about/changelog/#acknowledgments","title":"Acknowledgments","text":""},{"location":"about/changelog/#contributors","title":"Contributors","text":"<ul> <li>Hugo Valle (@hugo-valle) - Project creator and maintainer</li> <li>GitHub Classroom Team - Platform and inspiration</li> <li>Python Community - Tools and libraries</li> </ul>"},{"location":"about/changelog/#technologies","title":"Technologies","text":"<ul> <li>Python: Core language</li> <li>Typer: CLI framework</li> <li>Poetry: Dependency management</li> <li>pytest: Testing framework</li> <li>GitHub Actions: CI/CD automation</li> <li>MkDocs: Documentation site</li> </ul>"},{"location":"about/changelog/#community","title":"Community","text":"<p>Special thanks to educators and developers who have provided feedback, bug reports, and feature requests that have shaped Classroom Pilot's development.</p>"},{"location":"about/changelog/#license","title":"License","text":"<p>Classroom Pilot is released under the MIT License. See LICENSE for details.</p>"},{"location":"about/license/","title":"License","text":""},{"location":"about/license/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2024 Hugo Valle</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/license/#third-party-licenses","title":"Third-Party Licenses","text":"<p>Classroom Pilot depends on several open-source packages. Below are their respective licenses:</p>"},{"location":"about/license/#direct-dependencies","title":"Direct Dependencies","text":""},{"location":"about/license/#typer","title":"Typer","text":"<ul> <li>License: MIT License</li> <li>Copyright: Copyright (c) 2019 Sebasti\u00e1n Ram\u00edrez</li> <li>URL: https://typer.tiangolo.com/</li> </ul>"},{"location":"about/license/#click","title":"Click","text":"<ul> <li>License: BSD 3-Clause License</li> <li>Copyright: Copyright 2014 Pallets</li> <li>URL: https://click.palletsprojects.com/</li> </ul>"},{"location":"about/license/#pyyaml","title":"PyYAML","text":"<ul> <li>License: MIT License</li> <li>Copyright: Copyright (c) 2017-2021 Ingy d\u00f6t Net, Copyright (c) 2006-2016 Kirill Simonov</li> <li>URL: https://pyyaml.org/</li> </ul>"},{"location":"about/license/#requests","title":"Requests","text":"<ul> <li>License: Apache Software License (Apache 2.0)</li> <li>Copyright: Copyright 2019 Kenneth Reitz</li> <li>URL: https://requests.readthedocs.io/</li> </ul>"},{"location":"about/license/#development-dependencies","title":"Development Dependencies","text":""},{"location":"about/license/#pytest","title":"pytest","text":"<ul> <li>License: MIT License</li> <li>Copyright: Copyright (c) 2004-2021 Holger Krekel and others</li> <li>URL: https://pytest.org/</li> </ul>"},{"location":"about/license/#poetry","title":"Poetry","text":"<ul> <li>License: MIT License</li> <li>Copyright: Copyright (c) 2018 S\u00e9bastien Eustace</li> <li>URL: https://python-poetry.org/</li> </ul>"},{"location":"about/license/#attribution","title":"Attribution","text":""},{"location":"about/license/#github-classroom","title":"GitHub Classroom","text":"<p>This project is designed to work with GitHub Classroom, a service provided by GitHub, Inc. - Service: GitHub Classroom - Provider: GitHub, Inc. - URL: https://classroom.github.com/</p>"},{"location":"about/license/#documentation-theme","title":"Documentation Theme","text":"<p>The documentation site uses the Material theme for MkDocs: - Theme: Material for MkDocs - License: MIT License - Author: Martin Donath - URL: https://squidfunk.github.io/mkdocs-material/</p>"},{"location":"about/license/#disclaimer","title":"Disclaimer","text":"<p>Classroom Pilot is an independent project and is not affiliated with, endorsed by, or sponsored by GitHub, Inc. GitHub and GitHub Classroom are trademarks of GitHub, Inc.</p> <p>The use of GitHub's API and services is subject to GitHub's Terms of Service and API Terms of Use.</p>"},{"location":"about/license/#contributing","title":"Contributing","text":"<p>By contributing to this project, you agree that your contributions will be licensed under the same MIT License that covers the project.</p>"},{"location":"about/license/#contributor-license-agreement","title":"Contributor License Agreement","text":"<p>When you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern.</p>"},{"location":"about/license/#commercial-use","title":"Commercial Use","text":"<p>This software is provided under the MIT License, which permits commercial use. You are free to:</p> <ul> <li>Use the software for commercial purposes</li> <li>Modify the software for commercial purposes  </li> <li>Distribute the software commercially</li> <li>Sublicense the software</li> </ul> <p>The only requirement is that you include the original copyright notice and license text in any copy of the software/source.</p>"},{"location":"about/license/#support-and-liability","title":"Support and Liability","text":"<p>This software is provided \"as is\" without warranty of any kind. The authors and contributors are not liable for any damages or issues that may arise from using this software.</p> <p>For support, please refer to: - GitHub Issues for bug reports - GitHub Discussions for questions - Documentation for usage guides</p>"},{"location":"about/license/#version-history","title":"Version History","text":"<p>License information for different versions: - v3.x+: MIT License (current) - v2.x: MIT License - v1.x: MIT License</p> <p>All versions of Classroom Pilot have been released under the MIT License.</p>"},{"location":"cli/assignments/","title":"Assignment Commands","text":"<p>The assignment commands provide comprehensive tools for managing GitHub Classroom assignments throughout their lifecycle.</p>"},{"location":"cli/assignments/#overview","title":"Overview","text":"<p>Assignment management in Classroom Pilot covers the complete workflow from initial setup through ongoing maintenance and automation.</p>"},{"location":"cli/assignments/#commands","title":"Commands","text":""},{"location":"cli/assignments/#classroom-pilot-assignments-setup","title":"<code>classroom-pilot assignments setup</code>","text":"<p>Initialize a new assignment with proper configuration and repository structure.</p> <pre><code># Basic assignment setup\nclassroom-pilot assignments setup\n\n# Setup with specific configuration\nclassroom-pilot assignments setup --config assignment.conf\n\n# Dry run to preview changes\nclassroom-pilot assignments setup --dry-run\n\n# Verbose output for debugging\nclassroom-pilot assignments setup --verbose\n</code></pre> <p>Options: - <code>--config PATH</code>: Specify custom configuration file - <code>--dry-run</code>: Show what would be done without making changes - <code>--verbose</code>: Enable detailed output - <code>--help</code>: Show command help</p> <p>Example: <pre><code># Setup assignment with custom config\nclassroom-pilot assignments setup \\\n  --config assignments/hw01-config.yaml \\\n  --verbose\n</code></pre></p>"},{"location":"cli/assignments/#classroom-pilot-assignments-orchestrate","title":"<code>classroom-pilot assignments orchestrate</code>","text":"<p>Execute the complete assignment workflow including repository creation, secret distribution, and collaboration setup.</p> <pre><code># Run full orchestration\nclassroom-pilot assignments orchestrate\n\n# Orchestrate specific assignment\nclassroom-pilot assignments orchestrate --assignment \"homework-01\"\n\n# Skip specific steps\nclassroom-pilot assignments orchestrate --skip-secrets\n\n# Run with custom timing\nclassroom-pilot assignments orchestrate --delay 30\n</code></pre> <p>Options: - <code>--assignment NAME</code>: Target specific assignment - <code>--skip-secrets</code>: Skip secret distribution - <code>--skip-collaborators</code>: Skip collaborator management - <code>--delay SECONDS</code>: Delay between operations (default: 10) - <code>--max-retries COUNT</code>: Maximum retry attempts (default: 3) - <code>--dry-run</code>: Preview operations without execution</p> <p>Workflow Steps: 1. Repository Discovery: Find student repositories 2. Secret Distribution: Add repository secrets 3. Collaborator Management: Configure access permissions 4. Validation: Verify setup completion 5. Reporting: Generate operation summary</p>"},{"location":"cli/assignments/#classroom-pilot-assignments-status","title":"<code>classroom-pilot assignments status</code>","text":"<p>Check the current status of assignments and their repositories.</p> <pre><code># Check all assignments\nclassroom-pilot assignments status\n\n# Check specific assignment\nclassroom-pilot assignments status --assignment \"homework-01\"\n\n# Detailed status report\nclassroom-pilot assignments status --detailed\n\n# Export status to file\nclassroom-pilot assignments status --output status-report.json\n</code></pre> <p>Options: - <code>--assignment NAME</code>: Check specific assignment - <code>--detailed</code>: Include repository-level details - <code>--output FILE</code>: Save report to file - <code>--format FORMAT</code>: Output format (table, json, yaml)</p>"},{"location":"cli/assignments/#classroom-pilot-assignments-validate","title":"<code>classroom-pilot assignments validate</code>","text":"<p>Validate assignment configuration and repository state.</p> <pre><code># Validate current configuration\nclassroom-pilot assignments validate\n\n# Validate specific assignment\nclassroom-pilot assignments validate --assignment \"homework-01\"\n\n# Validate with strict checking\nclassroom-pilot assignments validate --strict\n\n# Generate validation report\nclassroom-pilot assignments validate --report validation.html\n</code></pre> <p>Options: - <code>--assignment NAME</code>: Validate specific assignment - <code>--strict</code>: Enable strict validation rules - <code>--report FILE</code>: Generate HTML validation report - <code>--fix</code>: Automatically fix detected issues</p>"},{"location":"cli/assignments/#configuration","title":"Configuration","text":"<p>Assignment commands use configuration files to define:</p> <pre><code># assignment.conf\nassignment:\n  name: \"homework-01\"\n  prefix: \"hw01-\"\n  template_repo: \"classroom-template\"\n\ngithub:\n  organization: \"my-class-org\"\n  token: \"${GITHUB_TOKEN}\"\n\nautomation:\n  retry_count: 3\n  delay_seconds: 10\n\nvalidation:\n  required_files:\n    - \"README.md\"\n    - \"src/\"\n    - \".github/workflows/\"\n</code></pre>"},{"location":"cli/assignments/#integration","title":"Integration","text":"<p>Assignment commands integrate seamlessly with:</p> <ul> <li>Repository Operations: Manage student repositories</li> <li>Secret Management: Distribute assignment secrets</li> <li>Automation: Schedule assignment workflows</li> </ul>"},{"location":"cli/assignments/#examples","title":"Examples","text":""},{"location":"cli/assignments/#complete-assignment-setup","title":"Complete Assignment Setup","text":"<pre><code># 1. Setup assignment configuration\nclassroom-pilot assignments setup \\\n  --config assignments/midterm-project.yaml\n\n# 2. Orchestrate full workflow\nclassroom-pilot assignments orchestrate \\\n  --assignment \"midterm-project\" \\\n  --verbose\n\n# 3. Validate setup\nclassroom-pilot assignments validate \\\n  --assignment \"midterm-project\" \\\n  --report validation.html\n\n# 4. Check status\nclassroom-pilot assignments status \\\n  --assignment \"midterm-project\" \\\n  --detailed\n</code></pre>"},{"location":"cli/assignments/#automated-assignment-management","title":"Automated Assignment Management","text":"<pre><code># Setup automation for ongoing management\nclassroom-pilot automation schedule \\\n  --command \"assignments orchestrate\" \\\n  --cron \"0 6 * * *\" \\\n  --assignment \"weekly-labs\"\n\n# Monitor assignment status\nclassroom-pilot assignments status \\\n  --output daily-report.json \\\n  --format json\n</code></pre>"},{"location":"cli/assignments/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/assignments/#common-issues","title":"Common Issues","text":"<p>Configuration Errors: <pre><code># Validate configuration\nclassroom-pilot assignments validate --strict\n\n# Check configuration syntax\nclassroom-pilot config validate --file assignment.conf\n</code></pre></p> <p>Repository Access Issues: <pre><code># Verify GitHub token permissions\nclassroom-pilot auth check\n\n# Test repository access\nclassroom-pilot repos list --assignment \"homework-01\"\n</code></pre></p> <p>Orchestration Failures: <pre><code># Run with verbose logging\nclassroom-pilot assignments orchestrate \\\n  --verbose \\\n  --max-retries 5 \\\n  --delay 60\n\n# Check specific step failures\nclassroom-pilot assignments status --detailed\n</code></pre></p>"},{"location":"cli/assignments/#getting-help","title":"Getting Help","text":"<pre><code># General help\nclassroom-pilot assignments --help\n\n# Command-specific help\nclassroom-pilot assignments setup --help\nclassroom-pilot assignments orchestrate --help\n\n# Configuration help\nclassroom-pilot config --help\n</code></pre>"},{"location":"cli/assignments/#best-practices","title":"Best Practices","text":"<ol> <li>Configuration Management:</li> <li>Use version control for assignment configurations</li> <li>Test configurations with <code>--dry-run</code> before execution</li> <li> <p>Validate configurations before deployment</p> </li> <li> <p>Automation Setup:</p> </li> <li>Schedule regular orchestration runs</li> <li>Monitor assignment status daily</li> <li> <p>Set up alerts for failures</p> </li> <li> <p>Error Handling:</p> </li> <li>Always use <code>--verbose</code> for troubleshooting</li> <li>Implement retry logic for network operations</li> <li> <p>Maintain backup configurations</p> </li> <li> <p>Security:</p> </li> <li>Store sensitive data in environment variables</li> <li>Use GitHub tokens with minimal required permissions</li> <li>Regularly rotate access tokens</li> </ol>"},{"location":"cli/assignments/#see-also","title":"See Also","text":"<ul> <li>Repository Operations</li> <li>Secret Management</li> <li>Automation Commands</li> <li>Configuration Guide</li> </ul>"},{"location":"cli/automation/","title":"Automation Commands","text":"<p>Automation commands provide scheduling and batch processing capabilities for classroom management workflows.</p>"},{"location":"cli/automation/#overview","title":"Overview","text":"<p>Automation features enable scheduled execution of classroom operations, batch processing of assignments, and monitoring of ongoing tasks.</p>"},{"location":"cli/automation/#commands","title":"Commands","text":""},{"location":"cli/automation/#classroom-pilot-automation-schedule","title":"<code>classroom-pilot automation schedule</code>","text":"<p>Schedule classroom operations using cron-like syntax.</p> <pre><code># Schedule daily assignment orchestration\nclassroom-pilot automation schedule \\\n  --command \"assignments orchestrate\" \\\n  --cron \"0 6 * * *\" \\\n  --name \"daily-orchestration\"\n\n# Schedule weekly repository sync\nclassroom-pilot automation schedule \\\n  --command \"repos sync\" \\\n  --cron \"0 0 * * 0\" \\\n  --assignment \"ongoing-project\"\n\n# Schedule secret rotation\nclassroom-pilot automation schedule \\\n  --command \"secrets rotate\" \\\n  --cron \"0 2 1 * *\" \\\n  --name \"monthly-rotation\"\n</code></pre> <p>Options: - <code>--command CMD</code>: Command to schedule - <code>--cron EXPRESSION</code>: Cron schedule expression - <code>--name NAME</code>: Unique name for scheduled task - <code>--assignment NAME</code>: Target specific assignment - <code>--enabled/--disabled</code>: Enable or disable schedule - <code>--timeout SECONDS</code>: Command timeout (default: 3600) - <code>--retry-count COUNT</code>: Number of retries on failure</p> <p>Cron Expression Format: <pre><code>\u250c\u2500\u2500\u2500 minute (0-59)\n\u2502 \u250c\u2500\u2500\u2500 hour (0-23)\n\u2502 \u2502 \u250c\u2500\u2500\u2500 day of month (1-31)\n\u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500 month (1-12)\n\u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500 day of week (0-6, Sunday=0)\n\u2502 \u2502 \u2502 \u2502 \u2502\n* * * * *\n</code></pre></p>"},{"location":"cli/automation/#classroom-pilot-automation-list","title":"<code>classroom-pilot automation list</code>","text":"<p>List scheduled tasks and their status.</p> <pre><code># List all scheduled tasks\nclassroom-pilot automation list\n\n# List with execution history\nclassroom-pilot automation list --history\n\n# List specific assignment schedules\nclassroom-pilot automation list --assignment \"homework-series\"\n\n# Export schedule configuration\nclassroom-pilot automation list --export schedules.yaml\n</code></pre> <p>Options: - <code>--assignment NAME</code>: Filter by assignment - <code>--status STATUS</code>: Filter by status (active, disabled, failed) - <code>--history</code>: Include execution history - <code>--export FILE</code>: Export configuration - <code>--format FORMAT</code>: Output format (table, json, yaml)</p>"},{"location":"cli/automation/#classroom-pilot-automation-run","title":"<code>classroom-pilot automation run</code>","text":"<p>Execute scheduled tasks manually or run batch operations.</p> <pre><code># Run specific scheduled task\nclassroom-pilot automation run --name \"daily-orchestration\"\n\n# Run batch operation\nclassroom-pilot automation run --batch assignments-batch.yaml\n\n# Run with override parameters\nclassroom-pilot automation run \\\n  --name \"repo-sync\" \\\n  --override assignment=\"special-project\"\n\n# Run in background\nclassroom-pilot automation run \\\n  --name \"long-operation\" \\\n  --background\n</code></pre> <p>Options: - <code>--name NAME</code>: Scheduled task name - <code>--batch FILE</code>: Batch configuration file - <code>--override KEY=VALUE</code>: Override parameters - <code>--background</code>: Run in background - <code>--wait</code>: Wait for completion - <code>--verbose</code>: Detailed output</p>"},{"location":"cli/automation/#classroom-pilot-automation-status","title":"<code>classroom-pilot automation status</code>","text":"<p>Check status of automation tasks and system health.</p> <pre><code># Check all automation status\nclassroom-pilot automation status\n\n# Check specific task\nclassroom-pilot automation status --name \"daily-orchestration\"\n\n# System health check\nclassroom-pilot automation status --health-check\n\n# Generate status report\nclassroom-pilot automation status --report automation-report.html\n</code></pre> <p>Options: - <code>--name NAME</code>: Specific task name - <code>--health-check</code>: System health validation - <code>--report FILE</code>: Generate HTML report - <code>--format FORMAT</code>: Output format - <code>--real-time</code>: Real-time status updates</p>"},{"location":"cli/automation/#classroom-pilot-automation-stop","title":"<code>classroom-pilot automation stop</code>","text":"<p>Stop running tasks or disable schedules.</p> <pre><code># Stop running task\nclassroom-pilot automation stop --name \"running-task\"\n\n# Disable schedule\nclassroom-pilot automation stop --name \"daily-task\" --disable\n\n# Emergency stop all tasks\nclassroom-pilot automation stop --all --emergency\n\n# Stop with graceful shutdown\nclassroom-pilot automation stop --name \"task\" --graceful\n</code></pre> <p>Options: - <code>--name NAME</code>: Task name to stop - <code>--all</code>: Stop all running tasks - <code>--disable</code>: Disable schedule permanently - <code>--emergency</code>: Force immediate stop - <code>--graceful</code>: Allow task completion - <code>--timeout SECONDS</code>: Stop timeout</p>"},{"location":"cli/automation/#classroom-pilot-automation-logs","title":"<code>classroom-pilot automation logs</code>","text":"<p>View automation task logs and execution history.</p> <pre><code># View logs for specific task\nclassroom-pilot automation logs --name \"daily-orchestration\"\n\n# View recent logs\nclassroom-pilot automation logs --recent --lines 100\n\n# Follow logs in real-time\nclassroom-pilot automation logs --name \"task\" --follow\n\n# Export logs\nclassroom-pilot automation logs --export logs-backup.tar.gz\n</code></pre> <p>Options: - <code>--name NAME</code>: Task name - <code>--recent</code>: Show recent executions - <code>--lines COUNT</code>: Number of log lines - <code>--follow</code>: Real-time log following - <code>--level LEVEL</code>: Log level filter (debug, info, warning, error) - <code>--export FILE</code>: Export logs to file</p>"},{"location":"cli/automation/#configuration","title":"Configuration","text":"<p>Automation uses configuration for scheduling and execution settings:</p> <pre><code># automation.conf\nautomation:\n  scheduler:\n    enabled: true\n    timezone: \"UTC\"\n    max_concurrent_jobs: 5\n\n  execution:\n    default_timeout: 3600\n    retry_attempts: 3\n    retry_delay: 300\n\n  logging:\n    level: \"info\"\n    retention_days: 30\n    max_log_size: \"100MB\"\n\n  monitoring:\n    health_check_interval: 300\n    notification_webhook: \"${WEBHOOK_URL}\"\n    alert_on_failure: true\n\nschedules:\n  - name: \"daily-orchestration\"\n    command: \"assignments orchestrate\"\n    cron: \"0 6 * * *\"\n    enabled: true\n\n  - name: \"weekly-repo-sync\"\n    command: \"repos sync\"\n    cron: \"0 0 * * 0\"\n    assignment: \"semester-project\"\n</code></pre>"},{"location":"cli/automation/#batch-operations","title":"Batch Operations","text":""},{"location":"cli/automation/#batch-configuration-files","title":"Batch Configuration Files","text":"<p>Create YAML files to define complex batch operations:</p> <pre><code># assignments-batch.yaml\nbatch:\n  name: \"weekly-assignment-processing\"\n  description: \"Process all weekly assignments\"\n\n  tasks:\n    - name: \"fetch-repositories\"\n      command: \"repos fetch\"\n      assignment: \"week-{week_number}\"\n      parallel: true\n\n    - name: \"distribute-secrets\"\n      command: \"secrets add\"\n      depends_on: [\"fetch-repositories\"]\n      secrets_file: \"week-{week_number}-secrets.env\"\n\n    - name: \"setup-collaborators\"\n      command: \"repos collaborator add\"\n      depends_on: [\"fetch-repositories\"]\n      user: \"grading-assistant\"\n\n    - name: \"validate-setup\"\n      command: \"assignments validate\"\n      depends_on: [\"distribute-secrets\", \"setup-collaborators\"]\n\n  variables:\n    week_number: \"{{ current_week }}\"\n\n  error_handling:\n    continue_on_error: false\n    retry_failed: true\n    notification_on_failure: true\n</code></pre>"},{"location":"cli/automation/#running-batch-operations","title":"Running Batch Operations","text":"<pre><code># Execute batch operation\nclassroom-pilot automation run --batch assignments-batch.yaml\n\n# Execute with variable substitution\nclassroom-pilot automation run \\\n  --batch assignments-batch.yaml \\\n  --override week_number=5\n\n# Schedule batch operation\nclassroom-pilot automation schedule \\\n  --batch assignments-batch.yaml \\\n  --cron \"0 8 * * 1\" \\\n  --name \"weekly-batch\"\n</code></pre>"},{"location":"cli/automation/#integration","title":"Integration","text":"<p>Automation integrates with all other command groups:</p> <ul> <li>Assignment Commands: Automated assignment workflows</li> <li>Repository Commands: Scheduled repository operations</li> <li>Secret Management: Automated secret rotation</li> </ul>"},{"location":"cli/automation/#examples","title":"Examples","text":""},{"location":"cli/automation/#complete-assignment-automation","title":"Complete Assignment Automation","text":"<pre><code># 1. Setup daily assignment orchestration\nclassroom-pilot automation schedule \\\n  --command \"assignments orchestrate\" \\\n  --cron \"0 6 * * *\" \\\n  --name \"daily-orchestration\" \\\n  --timeout 7200\n\n# 2. Setup weekly repository sync\nclassroom-pilot automation schedule \\\n  --command \"repos sync\" \\\n  --cron \"0 0 * * 0\" \\\n  --name \"weekly-sync\" \\\n  --assignment \"semester-project\"\n\n# 3. Setup monthly secret rotation\nclassroom-pilot automation schedule \\\n  --command \"secrets rotate\" \\\n  --cron \"0 2 1 * *\" \\\n  --name \"monthly-rotation\" \\\n  --retry-count 3\n\n# 4. Monitor automation health\nclassroom-pilot automation status --health-check\n</code></pre>"},{"location":"cli/automation/#batch-assignment-processing","title":"Batch Assignment Processing","text":"<pre><code># Create batch configuration for new assignment\ncat &gt; new-assignment-batch.yaml &lt;&lt; EOF\nbatch:\n  name: \"new-assignment-setup\"\n  tasks:\n    - name: \"setup-assignment\"\n      command: \"assignments setup\"\n      assignment: \"midterm-project\"\n    - name: \"fetch-repos\"\n      command: \"repos fetch\"\n      depends_on: [\"setup-assignment\"]\n    - name: \"add-secrets\"\n      command: \"secrets add\"\n      depends_on: [\"fetch-repos\"]\n      secrets_file: \"midterm-secrets.env\"\nEOF\n\n# Execute batch operation\nclassroom-pilot automation run --batch new-assignment-batch.yaml\n\n# Schedule for future assignments\nclassroom-pilot automation schedule \\\n  --batch new-assignment-batch.yaml \\\n  --cron \"0 9 * * 1\" \\\n  --name \"weekly-assignment-setup\"\n</code></pre>"},{"location":"cli/automation/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":"<pre><code># Check automation system health\nclassroom-pilot automation status \\\n  --health-check \\\n  --report health-report.html\n\n# View execution logs\nclassroom-pilot automation logs \\\n  --recent \\\n  --lines 200 \\\n  --level warning\n\n# Export automation configuration\nclassroom-pilot automation list \\\n  --export automation-backup.yaml\n\n# Clean up completed tasks\nclassroom-pilot automation cleanup \\\n  --older-than \"30 days\" \\\n  --status completed\n</code></pre>"},{"location":"cli/automation/#advanced-features","title":"Advanced Features","text":""},{"location":"cli/automation/#conditional-execution","title":"Conditional Execution","text":"<pre><code># conditional-batch.yaml\nbatch:\n  name: \"conditional-processing\"\n  tasks:\n    - name: \"check-submissions\"\n      command: \"repos status\"\n      assignment: \"homework-01\"\n\n    - name: \"process-if-ready\"\n      command: \"assignments orchestrate\"\n      condition: \"submissions_ready == true\"\n      depends_on: [\"check-submissions\"]\n</code></pre>"},{"location":"cli/automation/#parallel-execution","title":"Parallel Execution","text":"<pre><code># Run multiple assignments in parallel\nclassroom-pilot automation run \\\n  --batch parallel-assignments.yaml \\\n  --parallel 3 \\\n  --max-concurrent 5\n</code></pre>"},{"location":"cli/automation/#error-handling-and-recovery","title":"Error Handling and Recovery","text":"<pre><code># robust-batch.yaml\nbatch:\n  name: \"robust-operation\"\n  error_handling:\n    continue_on_error: true\n    retry_failed: true\n    max_retries: 3\n    retry_delay: 600\n    notification_on_failure: true\n    recovery_script: \"./recovery.sh\"\n</code></pre>"},{"location":"cli/automation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/automation/#common-issues","title":"Common Issues","text":"<p>Scheduling Problems: <pre><code># Check scheduler status\nclassroom-pilot automation status --health-check\n\n# Verify cron expressions\nclassroom-pilot automation validate --cron \"0 6 * * *\"\n\n# Debug scheduling\nclassroom-pilot automation logs \\\n  --name \"scheduler\" \\\n  --level debug\n</code></pre></p> <p>Execution Failures: <pre><code># Check task logs\nclassroom-pilot automation logs \\\n  --name \"failed-task\" \\\n  --level error\n\n# Retry failed task\nclassroom-pilot automation run \\\n  --name \"failed-task\" \\\n  --retry\n\n# Check system resources\nclassroom-pilot automation status \\\n  --health-check \\\n  --detailed\n</code></pre></p> <p>Performance Issues: <pre><code># Monitor concurrent executions\nclassroom-pilot automation status --real-time\n\n# Adjust concurrency limits\nclassroom-pilot automation configure \\\n  --max-concurrent 3\n\n# Check resource usage\nclassroom-pilot automation logs \\\n  --name \"performance\" \\\n  --metrics\n</code></pre></p>"},{"location":"cli/automation/#best-practices","title":"Best Practices","text":"<ol> <li>Scheduling:</li> <li>Use appropriate cron expressions for task frequency</li> <li>Avoid resource conflicts with concurrent executions</li> <li>Set reasonable timeouts for long-running tasks</li> <li> <p>Implement proper error handling and retries</p> </li> <li> <p>Monitoring:</p> </li> <li>Regular health checks and status monitoring</li> <li>Set up alerting for critical task failures</li> <li>Monitor resource usage and performance</li> <li> <p>Maintain log retention policies</p> </li> <li> <p>Configuration:</p> </li> <li>Use version control for automation configurations</li> <li>Test batch operations before scheduling</li> <li>Document automation workflows and dependencies</li> <li> <p>Implement backup and recovery procedures</p> </li> <li> <p>Security:</p> </li> <li>Secure automation credentials and tokens</li> <li>Limit automation permissions to required operations</li> <li>Audit automation logs regularly</li> <li>Implement change management for automation updates</li> </ol>"},{"location":"cli/automation/#see-also","title":"See Also","text":"<ul> <li>Assignment Commands</li> <li>Repository Commands</li> <li>Secret Management</li> <li>Configuration Guide</li> </ul>"},{"location":"cli/overview/","title":"CLI Overview","text":"<p>Classroom Pilot provides a comprehensive command-line interface organized into logical command groups.</p>"},{"location":"cli/overview/#command-structure","title":"\ud83c\udfd7\ufe0f Command Structure","text":"<p>The CLI is organized into four main command groups:</p> <pre><code>classroom-pilot [GLOBAL_OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"cli/overview/#command-groups","title":"Command Groups","text":"Group Purpose Commands <code>assignments</code> Assignment setup and orchestration <code>setup</code>, <code>orchestrate</code>, <code>manage</code> <code>repos</code> Repository operations <code>fetch</code>, <code>collaborator</code> <code>secrets</code> Secret and token management <code>add</code>, <code>remove</code>, <code>list</code> <code>automation</code> Scheduling and batch processing <code>scheduler</code>, <code>batch</code>"},{"location":"cli/overview/#legacy-commands","title":"Legacy Commands","text":"<p>For backward compatibility:</p> Command Purpose Modern Equivalent <code>setup</code> Interactive assignment setup <code>assignments setup</code> <code>run</code> Complete workflow execution <code>assignments orchestrate</code> <code>version</code> Show version information <code>version</code>"},{"location":"cli/overview/#global-options","title":"\u2699\ufe0f Global Options","text":"<p>Global options apply to all commands:</p> Option Short Description Example <code>--dry-run</code> Preview actions without executing <code>classroom-pilot --dry-run assignments orchestrate</code> <code>--verbose</code> Enable detailed logging <code>classroom-pilot --verbose repos fetch</code> <code>--config FILE</code> Use custom configuration file <code>classroom-pilot --config my.conf secrets add</code> <code>--help</code> Show help information <code>classroom-pilot --help</code>"},{"location":"cli/overview/#quick-reference","title":"\ud83d\udccb Quick Reference","text":""},{"location":"cli/overview/#assignment-management","title":"Assignment Management","text":"<pre><code># Interactive setup\nclassroom-pilot assignments setup\n\n# Run complete workflow\nclassroom-pilot assignments orchestrate [--config FILE]\n\n# Manage templates\nclassroom-pilot assignments manage [--config FILE]\n</code></pre>"},{"location":"cli/overview/#repository-operations","title":"Repository Operations","text":"<pre><code># Discover student repositories\nclassroom-pilot repos fetch [--config FILE]\n\n# Add collaborators\nclassroom-pilot repos collaborator add [--config FILE]\n\n# Remove collaborators\nclassroom-pilot repos collaborator remove [--config FILE]\n</code></pre>"},{"location":"cli/overview/#secret-management","title":"Secret Management","text":"<pre><code># Add secrets to repositories\nclassroom-pilot secrets add [--config FILE] [--secrets LIST]\n\n# Remove secrets\nclassroom-pilot secrets remove [--config FILE] [--secrets LIST]\n\n# List existing secrets\nclassroom-pilot secrets list [--config FILE]\n</code></pre>"},{"location":"cli/overview/#automation-scheduling","title":"Automation &amp; Scheduling","text":"<pre><code># Setup automated scheduling\nclassroom-pilot automation scheduler setup [--config FILE]\n\n# Check scheduler status\nclassroom-pilot automation scheduler status\n\n# Run batch operations\nclassroom-pilot automation batch [--config FILE]\n</code></pre>"},{"location":"cli/overview/#configuration","title":"\ud83d\udd27 Configuration","text":"<p>All commands support configuration via:</p> <ol> <li>Configuration file (default: <code>assignment.conf</code>)</li> <li>Environment variables</li> <li>Command-line options</li> </ol>"},{"location":"cli/overview/#configuration-file-example","title":"Configuration File Example","text":"<pre><code># assignment.conf\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/homework1\"\nTEMPLATE_REPO_URL=\"https://github.com/instructor/homework1-template\"\nASSIGNMENT_FILE=\"homework1.py\"\nGITHUB_TOKEN_FILE=\"github_token.txt\"\nSECRETS_LIST=\"API_KEY,GRADING_TOKEN\"\n</code></pre>"},{"location":"cli/overview/#environment-variable-overrides","title":"Environment Variable Overrides","text":"<pre><code># Override configuration\nexport GITHUB_TOKEN=\"ghp_your_token\"\nexport ASSIGNMENT_FILE=\"main.cpp\"\n\n# Run commands\nclassroom-pilot assignments orchestrate\n</code></pre>"},{"location":"cli/overview/#usage-patterns","title":"\ud83d\udca1 Usage Patterns","text":""},{"location":"cli/overview/#development-testing","title":"Development &amp; Testing","text":"<pre><code># Always preview first\nclassroom-pilot --dry-run assignments orchestrate --config assignment.conf\n\n# Use verbose for debugging\nclassroom-pilot --verbose repos fetch --config assignment.conf\n\n# Test with single repository\nclassroom-pilot --dry-run secrets add --config assignment.conf\n</code></pre>"},{"location":"cli/overview/#production-workflows","title":"Production Workflows","text":"<pre><code># Complete assignment setup\nclassroom-pilot assignments setup\n\n# Daily orchestration\nclassroom-pilot assignments orchestrate --config assignment.conf\n\n# Emergency secret rotation\nclassroom-pilot secrets remove --config assignment.conf --secrets \"OLD_TOKEN\"\nNEW_TOKEN=\"value\" classroom-pilot secrets add --config assignment.conf --secrets \"NEW_TOKEN\"\n</code></pre>"},{"location":"cli/overview/#batch-operations","title":"Batch Operations","text":"<pre><code># Multiple assignments\nfor config in assignment-*.conf; do\n    classroom-pilot assignments orchestrate --config \"$config\"\ndone\n\n# Specific operations across assignments\nclassroom-pilot secrets add --config hw1.conf\nclassroom-pilot secrets add --config hw2.conf\nclassroom-pilot secrets add --config midterm.conf\n</code></pre>"},{"location":"cli/overview/#help-system","title":"\ud83c\udd98 Help System","text":""},{"location":"cli/overview/#getting-help","title":"Getting Help","text":"<pre><code># Main help\nclassroom-pilot --help\n\n# Command group help\nclassroom-pilot assignments --help\nclassroom-pilot repos --help\nclassroom-pilot secrets --help\nclassroom-pilot automation --help\n\n# Specific command help\nclassroom-pilot assignments orchestrate --help\nclassroom-pilot secrets add --help\n</code></pre>"},{"location":"cli/overview/#error-messages","title":"Error Messages","text":"<p>The CLI provides informative error messages:</p> <ul> <li>Configuration errors: Invalid file paths, missing required fields</li> <li>Authentication errors: Invalid tokens, insufficient permissions</li> <li>API errors: Rate limiting, repository access issues</li> <li>Validation errors: Invalid URLs, malformed configuration</li> </ul>"},{"location":"cli/overview/#debugging","title":"\ud83d\udd0d Debugging","text":""},{"location":"cli/overview/#verbose-mode","title":"Verbose Mode","text":"<p>Enable detailed logging for troubleshooting:</p> <pre><code># Verbose output\nclassroom-pilot --verbose assignments orchestrate --config assignment.conf\n\n# Combine with dry-run for detailed preview\nclassroom-pilot --dry-run --verbose assignments orchestrate --config assignment.conf\n</code></pre>"},{"location":"cli/overview/#log-information","title":"Log Information","text":"<p>Verbose mode shows:</p> <ul> <li>Configuration loading and validation</li> <li>API calls and responses</li> <li>Repository discovery process</li> <li>Secret distribution status</li> <li>Error details and stack traces</li> </ul>"},{"location":"cli/overview/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Assignments - Assignment management commands</li> <li>Repositories - Repository operation commands</li> <li>Secrets - Secret management commands</li> <li>Automation - Automation and scheduling commands</li> </ul>"},{"location":"cli/repositories/","title":"Repository Commands","text":"<p>Repository commands provide comprehensive tools for managing student repositories in GitHub Classroom assignments.</p>"},{"location":"cli/repositories/#overview","title":"Overview","text":"<p>Repository management includes fetching student repositories, managing collaborators, and performing bulk operations across multiple repositories.</p>"},{"location":"cli/repositories/#commands","title":"Commands","text":""},{"location":"cli/repositories/#classroom-pilot-repos-fetch","title":"<code>classroom-pilot repos fetch</code>","text":"<p>Fetch and clone student repositories for an assignment.</p> <pre><code># Fetch all student repositories\nclassroom-pilot repos fetch\n\n# Fetch for specific assignment\nclassroom-pilot repos fetch --assignment \"homework-01\"\n\n# Fetch to specific directory\nclassroom-pilot repos fetch --output-dir ./student-repos\n\n# Fetch with filtering\nclassroom-pilot repos fetch --students student-list.txt\n</code></pre> <p>Options: - <code>--assignment NAME</code>: Target specific assignment - <code>--output-dir PATH</code>: Directory to clone repositories (default: current) - <code>--students FILE</code>: File containing list of student usernames - <code>--parallel COUNT</code>: Number of parallel fetch operations (default: 5) - <code>--depth COUNT</code>: Git clone depth (default: full history) - <code>--branch NAME</code>: Specific branch to fetch (default: main)</p>"},{"location":"cli/repositories/#classroom-pilot-repos-list","title":"<code>classroom-pilot repos list</code>","text":"<p>List repositories for an assignment with detailed information.</p> <pre><code># List all repositories\nclassroom-pilot repos list\n\n# List for specific assignment\nclassroom-pilot repos list --assignment \"homework-01\"\n\n# List with detailed information\nclassroom-pilot repos list --detailed\n\n# Export to file\nclassroom-pilot repos list --output repos.json --format json\n</code></pre> <p>Options: - <code>--assignment NAME</code>: Filter by assignment - <code>--detailed</code>: Include repository statistics - <code>--format FORMAT</code>: Output format (table, json, yaml, csv) - <code>--output FILE</code>: Save to file - <code>--status STATUS</code>: Filter by repository status</p>"},{"location":"cli/repositories/#classroom-pilot-repos-collaborator","title":"<code>classroom-pilot repos collaborator</code>","text":"<p>Manage repository collaborators and permissions.</p> <pre><code># Add collaborator to all repositories\nclassroom-pilot repos collaborator add --user teaching-assistant\n\n# Remove collaborator\nclassroom-pilot repos collaborator remove --user old-ta\n\n# List collaborators\nclassroom-pilot repos collaborator list\n\n# Cycle collaborators (advanced operation)\nclassroom-pilot repos collaborator cycle\n</code></pre> <p>Subcommands: - <code>add</code>: Add collaborator to repositories - <code>remove</code>: Remove collaborator from repositories - <code>list</code>: List current collaborators - <code>cycle</code>: Rotate collaborator assignments</p> <p>Options: - <code>--user USERNAME</code>: GitHub username - <code>--permission LEVEL</code>: Permission level (read, write, admin) - <code>--assignment NAME</code>: Target specific assignment - <code>--dry-run</code>: Preview changes without execution</p>"},{"location":"cli/repositories/#classroom-pilot-repos-sync","title":"<code>classroom-pilot repos sync</code>","text":"<p>Synchronize local repositories with remote changes.</p> <pre><code># Sync all repositories\nclassroom-pilot repos sync\n\n# Sync specific assignment\nclassroom-pilot repos sync --assignment \"homework-01\"\n\n# Sync with specific branch\nclassroom-pilot repos sync --branch main\n\n# Force sync (reset local changes)\nclassroom-pilot repos sync --force\n</code></pre> <p>Options: - <code>--assignment NAME</code>: Target specific assignment - <code>--branch NAME</code>: Branch to sync (default: main) - <code>--force</code>: Reset local changes - <code>--parallel COUNT</code>: Parallel sync operations - <code>--timeout SECONDS</code>: Operation timeout</p>"},{"location":"cli/repositories/#classroom-pilot-repos-status","title":"<code>classroom-pilot repos status</code>","text":"<p>Check status of repository operations and health.</p> <pre><code># Check all repository status\nclassroom-pilot repos status\n\n# Check specific assignment\nclassroom-pilot repos status --assignment \"homework-01\"\n\n# Health check with validation\nclassroom-pilot repos status --health-check\n\n# Generate status report\nclassroom-pilot repos status --report status.html\n</code></pre> <p>Options: - <code>--assignment NAME</code>: Target specific assignment - <code>--health-check</code>: Perform repository validation - <code>--report FILE</code>: Generate HTML report - <code>--format FORMAT</code>: Output format</p>"},{"location":"cli/repositories/#classroom-pilot-repos-execute","title":"<code>classroom-pilot repos execute</code>","text":"<p>Execute commands across multiple repositories.</p> <pre><code># Run command in all repositories\nclassroom-pilot repos execute --command \"git status\"\n\n# Run script across repositories\nclassroom-pilot repos execute --script update-dependencies.sh\n\n# Execute with filtering\nclassroom-pilot repos execute \\\n  --command \"npm test\" \\\n  --assignment \"final-project\" \\\n  --filter \"package.json\"\n</code></pre> <p>Options: - <code>--command CMD</code>: Command to execute - <code>--script FILE</code>: Script file to run - <code>--assignment NAME</code>: Target assignment - <code>--filter PATTERN</code>: Filter repositories by file pattern - <code>--parallel COUNT</code>: Parallel execution - <code>--timeout SECONDS</code>: Command timeout</p>"},{"location":"cli/repositories/#configuration","title":"Configuration","text":"<p>Repository commands use configuration for GitHub access and organization settings:</p> <pre><code># repository.conf\ngithub:\n  organization: \"my-classroom-org\"\n  token: \"${GITHUB_TOKEN}\"\n  api_url: \"https://api.github.com\"\n\nrepositories:\n  clone_depth: 1\n  parallel_operations: 5\n  timeout_seconds: 300\n  default_branch: \"main\"\n\nassignments:\n  prefix_pattern: \"{assignment}-{username}\"\n  base_directory: \"./student-work\"\n</code></pre>"},{"location":"cli/repositories/#integration","title":"Integration","text":"<p>Repository commands integrate with:</p> <ul> <li>Assignment Commands: Assignment lifecycle management</li> <li>Secret Management: Repository secret distribution</li> <li>Automation: Scheduled repository operations</li> </ul>"},{"location":"cli/repositories/#examples","title":"Examples","text":""},{"location":"cli/repositories/#fetch-and-setup-student-repositories","title":"Fetch and Setup Student Repositories","text":"<pre><code># 1. Fetch all student repositories\nclassroom-pilot repos fetch \\\n  --assignment \"midterm-project\" \\\n  --output-dir ./midterm-submissions \\\n  --parallel 10\n\n# 2. Check repository status\nclassroom-pilot repos status \\\n  --assignment \"midterm-project\" \\\n  --health-check\n\n# 3. Add grading collaborator\nclassroom-pilot repos collaborator add \\\n  --user grading-assistant \\\n  --permission write \\\n  --assignment \"midterm-project\"\n</code></pre>"},{"location":"cli/repositories/#bulk-repository-operations","title":"Bulk Repository Operations","text":"<pre><code># Execute tests across all repositories\nclassroom-pilot repos execute \\\n  --assignment \"lab-03\" \\\n  --command \"npm test\" \\\n  --parallel 5 \\\n  --timeout 60\n\n# Update dependencies in all repositories\nclassroom-pilot repos execute \\\n  --assignment \"lab-03\" \\\n  --script ./scripts/update-deps.sh \\\n  --filter \"package.json\"\n\n# Generate status report\nclassroom-pilot repos status \\\n  --assignment \"lab-03\" \\\n  --report lab-03-status.html\n</code></pre>"},{"location":"cli/repositories/#repository-maintenance","title":"Repository Maintenance","text":"<pre><code># Sync all repositories with latest changes\nclassroom-pilot repos sync \\\n  --assignment \"ongoing-project\" \\\n  --branch development\n\n# Clean up old collaborators\nclassroom-pilot repos collaborator remove \\\n  --user former-ta \\\n  --assignment \"spring-2024\"\n\n# Validate repository health\nclassroom-pilot repos status \\\n  --health-check \\\n  --report health-check.html\n</code></pre>"},{"location":"cli/repositories/#advanced-operations","title":"Advanced Operations","text":""},{"location":"cli/repositories/#collaborator-cycling","title":"Collaborator Cycling","text":"<p>The collaborator cycle feature automatically rotates grading responsibilities:</p> <pre><code># Setup collaborator cycling\nclassroom-pilot repos collaborator cycle \\\n  --assignment \"weekly-labs\" \\\n  --collaborators ta1,ta2,ta3 \\\n  --strategy round-robin\n\n# Manual cycle trigger\nclassroom-pilot repos collaborator cycle \\\n  --assignment \"weekly-labs\" \\\n  --next\n</code></pre>"},{"location":"cli/repositories/#repository-filtering","title":"Repository Filtering","text":"<p>Filter repositories for targeted operations:</p> <pre><code># Filter by file presence\nclassroom-pilot repos execute \\\n  --command \"npm test\" \\\n  --filter \"package.json\"\n\n# Filter by student list\nclassroom-pilot repos fetch \\\n  --students advanced-students.txt \\\n  --assignment \"bonus-project\"\n\n# Filter by repository status\nclassroom-pilot repos list \\\n  --status \"needs-review\" \\\n  --format table\n</code></pre>"},{"location":"cli/repositories/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/repositories/#common-issues","title":"Common Issues","text":"<p>Authentication Problems: <pre><code># Verify GitHub token\nclassroom-pilot auth check\n\n# Test API access\nclassroom-pilot repos list --assignment \"test\"\n</code></pre></p> <p>Clone Failures: <pre><code># Fetch with verbose output\nclassroom-pilot repos fetch \\\n  --assignment \"homework-01\" \\\n  --verbose \\\n  --timeout 300\n\n# Check repository permissions\nclassroom-pilot repos status --health-check\n</code></pre></p> <p>Collaborator Issues: <pre><code># List current collaborators\nclassroom-pilot repos collaborator list \\\n  --assignment \"homework-01\"\n\n# Verify permissions\nclassroom-pilot repos collaborator list \\\n  --detailed \\\n  --format json\n</code></pre></p>"},{"location":"cli/repositories/#performance-optimization","title":"Performance Optimization","text":"<pre><code># Increase parallel operations\nclassroom-pilot repos fetch \\\n  --parallel 20 \\\n  --depth 1\n\n# Use shallow clones for faster operations\nclassroom-pilot repos fetch \\\n  --depth 1 \\\n  --branch main\n\n# Set appropriate timeouts\nclassroom-pilot repos execute \\\n  --command \"long-running-task\" \\\n  --timeout 600\n</code></pre>"},{"location":"cli/repositories/#best-practices","title":"Best Practices","text":"<ol> <li>Repository Management:</li> <li>Use shallow clones for faster operations</li> <li>Implement parallel processing for bulk operations</li> <li> <p>Regular health checks to maintain repository integrity</p> </li> <li> <p>Collaborator Management:</p> </li> <li>Document collaborator responsibilities</li> <li>Use automated cycling for fair distribution</li> <li> <p>Regular cleanup of inactive collaborators</p> </li> <li> <p>Security:</p> </li> <li>Limit repository access permissions</li> <li>Use tokens with minimal required scopes</li> <li> <p>Regular permission audits</p> </li> <li> <p>Performance:</p> </li> <li>Optimize parallel operation counts</li> <li>Use appropriate timeout values</li> <li>Monitor resource usage during bulk operations</li> </ol>"},{"location":"cli/repositories/#see-also","title":"See Also","text":"<ul> <li>Assignment Commands</li> <li>Secret Management</li> <li>Automation Commands</li> <li>Configuration Guide</li> </ul>"},{"location":"cli/secrets/","title":"Secret Management Commands","text":"<p>Secret management commands provide secure handling of sensitive information for GitHub Classroom assignments.</p>"},{"location":"cli/secrets/#overview","title":"Overview","text":"<p>Secret management includes distributing API keys, database credentials, and other sensitive data to student repositories while maintaining security best practices.</p>"},{"location":"cli/secrets/#commands","title":"Commands","text":""},{"location":"cli/secrets/#classroom-pilot-secrets-add","title":"<code>classroom-pilot secrets add</code>","text":"<p>Add secrets to student repositories for an assignment.</p> <pre><code># Add secrets from environment\nclassroom-pilot secrets add --assignment \"api-project\"\n\n# Add secrets from file\nclassroom-pilot secrets add --secrets-file api-keys.env\n\n# Add specific secret\nclassroom-pilot secrets add --name \"API_KEY\" --value \"secret-value\"\n\n# Add secrets with confirmation\nclassroom-pilot secrets add --confirm --verbose\n</code></pre> <p>Options: - <code>--assignment NAME</code>: Target specific assignment - <code>--secrets-file FILE</code>: Load secrets from file - <code>--name NAME</code>: Secret name (for single secret) - <code>--value VALUE</code>: Secret value (for single secret) - <code>--confirm</code>: Require confirmation before adding - <code>--overwrite</code>: Overwrite existing secrets - <code>--dry-run</code>: Preview operations without execution</p> <p>Supported File Formats: - <code>.env</code> files (KEY=value format) - YAML files with structured data - JSON files with key-value pairs</p>"},{"location":"cli/secrets/#classroom-pilot-secrets-list","title":"<code>classroom-pilot secrets list</code>","text":"<p>List secrets across repositories and assignments.</p> <pre><code># List all secrets (names only)\nclassroom-pilot secrets list\n\n# List for specific assignment\nclassroom-pilot secrets list --assignment \"database-project\"\n\n# List with detailed information\nclassroom-pilot secrets list --detailed\n\n# Export secret inventory\nclassroom-pilot secrets list --output secrets-inventory.json\n</code></pre> <p>Options: - <code>--assignment NAME</code>: Filter by assignment - <code>--detailed</code>: Include metadata (creation date, last updated) - <code>--format FORMAT</code>: Output format (table, json, yaml) - <code>--output FILE</code>: Save to file - <code>--show-repos</code>: Include repository-level details</p>"},{"location":"cli/secrets/#classroom-pilot-secrets-remove","title":"<code>classroom-pilot secrets remove</code>","text":"<p>Remove secrets from repositories.</p> <pre><code># Remove specific secret\nclassroom-pilot secrets remove --name \"OLD_API_KEY\"\n\n# Remove all secrets for assignment\nclassroom-pilot secrets remove --assignment \"completed-project\" --all\n\n# Remove secrets matching pattern\nclassroom-pilot secrets remove --pattern \"TEMP_*\"\n\n# Remove with confirmation\nclassroom-pilot secrets remove --name \"CRITICAL_KEY\" --confirm\n</code></pre> <p>Options: - <code>--name NAME</code>: Specific secret name - <code>--assignment NAME</code>: Target assignment - <code>--pattern GLOB</code>: Pattern matching secret names - <code>--all</code>: Remove all secrets (use with caution) - <code>--confirm</code>: Require confirmation - <code>--dry-run</code>: Preview deletions</p>"},{"location":"cli/secrets/#classroom-pilot-secrets-rotate","title":"<code>classroom-pilot secrets rotate</code>","text":"<p>Rotate secrets across repositories with new values.</p> <pre><code># Rotate specific secret\nclassroom-pilot secrets rotate --name \"DATABASE_PASSWORD\"\n\n# Rotate from new file\nclassroom-pilot secrets rotate --secrets-file new-credentials.env\n\n# Rotate with backup\nclassroom-pilot secrets rotate --name \"API_KEY\" --backup\n\n# Schedule rotation\nclassroom-pilot secrets rotate --schedule weekly\n</code></pre> <p>Options: - <code>--name NAME</code>: Secret to rotate - <code>--assignment NAME</code>: Target assignment - <code>--secrets-file FILE</code>: New secret values - <code>--backup</code>: Create backup before rotation - <code>--schedule FREQUENCY</code>: Schedule automatic rotation - <code>--notify</code>: Send notifications on completion</p>"},{"location":"cli/secrets/#classroom-pilot-secrets-validate","title":"<code>classroom-pilot secrets validate</code>","text":"<p>Validate secret distribution and integrity.</p> <pre><code># Validate all secrets\nclassroom-pilot secrets validate\n\n# Validate specific assignment\nclassroom-pilot secrets validate --assignment \"secure-app\"\n\n# Validate with health check\nclassroom-pilot secrets validate --health-check\n\n# Generate validation report\nclassroom-pilot secrets validate --report validation.html\n</code></pre> <p>Options: - <code>--assignment NAME</code>: Target assignment - <code>--health-check</code>: Perform comprehensive validation - <code>--report FILE</code>: Generate HTML report - <code>--fix</code>: Automatically fix detected issues - <code>--strict</code>: Enable strict validation rules</p>"},{"location":"cli/secrets/#classroom-pilot-secrets-sync","title":"<code>classroom-pilot secrets sync</code>","text":"<p>Synchronize secrets across repositories to ensure consistency.</p> <pre><code># Sync all secrets\nclassroom-pilot secrets sync\n\n# Sync specific assignment\nclassroom-pilot secrets sync --assignment \"team-project\"\n\n# Sync from master source\nclassroom-pilot secrets sync --source master-secrets.env\n\n# Sync with conflict resolution\nclassroom-pilot secrets sync --resolve-conflicts\n</code></pre> <p>Options: - <code>--assignment NAME</code>: Target assignment - <code>--source FILE</code>: Master secret source - <code>--resolve-conflicts</code>: Automatic conflict resolution - <code>--exclude REPOS</code>: Exclude specific repositories - <code>--parallel COUNT</code>: Parallel sync operations</p>"},{"location":"cli/secrets/#configuration","title":"Configuration","text":"<p>Secret management uses configuration for security and distribution settings:</p> <pre><code># secrets.conf\nsecrets:\n  encryption:\n    enabled: true\n    algorithm: \"AES-256-GCM\"\n    key_source: \"environment\"\n\n  distribution:\n    batch_size: 10\n    retry_count: 3\n    timeout_seconds: 30\n\n  validation:\n    required_secrets:\n      - \"API_KEY\"\n      - \"DATABASE_URL\"\n    pattern_validation: true\n\n  rotation:\n    schedule: \"monthly\"\n    backup_enabled: true\n    notification_webhook: \"${WEBHOOK_URL}\"\n\ngithub:\n  organization: \"my-classroom\"\n  token: \"${GITHUB_TOKEN}\"\n</code></pre>"},{"location":"cli/secrets/#security-best-practices","title":"Security Best Practices","text":""},{"location":"cli/secrets/#secret-storage","title":"Secret Storage","text":"<pre><code># Use environment variables for sensitive data\nexport API_KEY=\"your-secret-key\"\nclassroom-pilot secrets add --name \"API_KEY\"\n\n# Store secrets in encrypted files\nclassroom-pilot secrets add --secrets-file encrypted-secrets.env.gpg\n\n# Use secure secret sources\nclassroom-pilot secrets add --source vault://secrets/api-keys\n</code></pre>"},{"location":"cli/secrets/#access-control","title":"Access Control","text":"<pre><code># Limit secret access by assignment\nclassroom-pilot secrets add \\\n  --assignment \"senior-capstone\" \\\n  --name \"PRODUCTION_KEY\" \\\n  --restricted\n\n# Audit secret access\nclassroom-pilot secrets list \\\n  --detailed \\\n  --audit-log secrets-audit.log\n</code></pre>"},{"location":"cli/secrets/#rotation-strategy","title":"Rotation Strategy","text":"<pre><code># Setup automatic rotation\nclassroom-pilot secrets rotate \\\n  --schedule monthly \\\n  --backup \\\n  --notify\n\n# Emergency rotation\nclassroom-pilot secrets rotate \\\n  --name \"COMPROMISED_KEY\" \\\n  --immediate \\\n  --notify-urgent\n</code></pre>"},{"location":"cli/secrets/#integration","title":"Integration","text":"<p>Secret management integrates with:</p> <ul> <li>Assignment Commands: Assignment-scoped secret distribution</li> <li>Repository Commands: Repository-level secret management  </li> <li>Automation: Scheduled secret operations</li> </ul>"},{"location":"cli/secrets/#examples","title":"Examples","text":""},{"location":"cli/secrets/#assignment-secret-setup","title":"Assignment Secret Setup","text":"<pre><code># 1. Prepare secrets file\ncat &gt; api-project-secrets.env &lt;&lt; EOF\nAPI_KEY=prod-api-key-12345\nDATABASE_URL=postgresql://user:pass@host/db\nWEBHOOK_SECRET=webhook-secret-abc123\nEOF\n\n# 2. Distribute to all assignment repositories\nclassroom-pilot secrets add \\\n  --assignment \"api-integration-project\" \\\n  --secrets-file api-project-secrets.env \\\n  --confirm\n\n# 3. Validate distribution\nclassroom-pilot secrets validate \\\n  --assignment \"api-integration-project\" \\\n  --report validation.html\n\n# 4. Monitor secret status\nclassroom-pilot secrets list \\\n  --assignment \"api-integration-project\" \\\n  --detailed\n</code></pre>"},{"location":"cli/secrets/#secret-rotation-workflow","title":"Secret Rotation Workflow","text":"<pre><code># 1. Generate new API keys (external process)\n./generate-new-api-keys.sh &gt; new-keys.env\n\n# 2. Backup existing secrets\nclassroom-pilot secrets list \\\n  --assignment \"production-app\" \\\n  --output backup-$(date +%Y%m%d).json\n\n# 3. Rotate secrets\nclassroom-pilot secrets rotate \\\n  --assignment \"production-app\" \\\n  --secrets-file new-keys.env \\\n  --backup\n\n# 4. Validate rotation\nclassroom-pilot secrets validate \\\n  --assignment \"production-app\" \\\n  --health-check\n</code></pre>"},{"location":"cli/secrets/#emergency-secret-management","title":"Emergency Secret Management","text":"<pre><code># Immediate secret removal (security incident)\nclassroom-pilot secrets remove \\\n  --name \"COMPROMISED_KEY\" \\\n  --all-assignments \\\n  --immediate \\\n  --confirm\n\n# Emergency rotation with notification\nclassroom-pilot secrets rotate \\\n  --name \"CRITICAL_SECRET\" \\\n  --immediate \\\n  --notify-urgent \\\n  --backup\n\n# Audit secret access\nclassroom-pilot secrets list \\\n  --detailed \\\n  --audit-trail \\\n  --format json &gt; security-audit.json\n</code></pre>"},{"location":"cli/secrets/#secret-file-formats","title":"Secret File Formats","text":""},{"location":"cli/secrets/#environment-file-env","title":"Environment File (.env)","text":"<pre><code># api-keys.env\nAPI_KEY=your-api-key-here\nDATABASE_URL=postgresql://localhost/mydb\nREDIS_URL=redis://localhost:6379\nWEBHOOK_SECRET=my-webhook-secret\n</code></pre>"},{"location":"cli/secrets/#yaml-format","title":"YAML Format","text":"<pre><code># secrets.yaml\nsecrets:\n  api:\n    key: \"your-api-key\"\n    endpoint: \"https://api.example.com\"\n  database:\n    url: \"postgresql://localhost/mydb\"\n    password: \"secure-password\"\n  external:\n    webhook_secret: \"webhook-secret\"\n</code></pre>"},{"location":"cli/secrets/#json-format","title":"JSON Format","text":"<pre><code>{\n  \"API_KEY\": \"your-api-key\",\n  \"DATABASE_URL\": \"postgresql://localhost/mydb\",\n  \"WEBHOOK_SECRET\": \"webhook-secret\",\n  \"ENCRYPTION_KEY\": \"encryption-key-here\"\n}\n</code></pre>"},{"location":"cli/secrets/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/secrets/#common-issues","title":"Common Issues","text":"<p>Permission Errors: <pre><code># Check repository permissions\nclassroom-pilot auth check --permissions secrets\n\n# Verify organization access\nclassroom-pilot repos list --assignment \"target-assignment\"\n</code></pre></p> <p>Distribution Failures: <pre><code># Retry failed distributions\nclassroom-pilot secrets sync \\\n  --assignment \"failed-assignment\" \\\n  --retry-failed\n\n# Check individual repository status\nclassroom-pilot secrets validate \\\n  --assignment \"target\" \\\n  --detailed\n</code></pre></p> <p>Validation Errors: <pre><code># Fix secret validation issues\nclassroom-pilot secrets validate \\\n  --assignment \"problem-assignment\" \\\n  --fix \\\n  --verbose\n\n# Manual secret verification\nclassroom-pilot secrets list \\\n  --assignment \"problem-assignment\" \\\n  --show-repos\n</code></pre></p>"},{"location":"cli/secrets/#security-troubleshooting","title":"Security Troubleshooting","text":"<pre><code># Audit secret access\nclassroom-pilot secrets list \\\n  --detailed \\\n  --audit-log security.log\n\n# Check for exposed secrets\nclassroom-pilot secrets validate \\\n  --security-scan \\\n  --report security-report.html\n\n# Emergency cleanup\nclassroom-pilot secrets remove \\\n  --pattern \"TEMP_*\" \\\n  --all-assignments \\\n  --force\n</code></pre>"},{"location":"cli/secrets/#advanced-features","title":"Advanced Features","text":""},{"location":"cli/secrets/#encrypted-secret-storage","title":"Encrypted Secret Storage","text":"<pre><code># Store secrets with encryption\nclassroom-pilot secrets add \\\n  --secrets-file encrypted-secrets.gpg \\\n  --decrypt-with gpg\n\n# Use external secret managers\nclassroom-pilot secrets add \\\n  --source vault://secret/classroom \\\n  --assignment \"secure-project\"\n</code></pre>"},{"location":"cli/secrets/#conditional-secret-distribution","title":"Conditional Secret Distribution","text":"<pre><code># Distribute secrets based on conditions\nclassroom-pilot secrets add \\\n  --assignment \"advanced-class\" \\\n  --condition \"student_level=advanced\" \\\n  --secrets-file advanced-secrets.env\n</code></pre>"},{"location":"cli/secrets/#secret-templates","title":"Secret Templates","text":"<pre><code># Use secret templates\nclassroom-pilot secrets add \\\n  --template api-project-template \\\n  --assignment \"new-api-project\" \\\n  --substitute student_name={username}\n</code></pre>"},{"location":"cli/secrets/#best-practices","title":"Best Practices","text":"<ol> <li>Security:</li> <li>Never commit secrets to version control</li> <li>Use environment variables for local development</li> <li>Implement regular secret rotation</li> <li> <p>Monitor secret access and usage</p> </li> <li> <p>Organization:</p> </li> <li>Use consistent naming conventions</li> <li>Document secret purposes and requirements</li> <li>Maintain secret inventories</li> <li> <p>Plan for secret lifecycle management</p> </li> <li> <p>Automation:</p> </li> <li>Automate secret rotation where possible</li> <li>Set up monitoring and alerting</li> <li>Use backup strategies for critical secrets</li> <li> <p>Implement audit trails</p> </li> <li> <p>Distribution:</p> </li> <li>Test secret distribution in staging environments</li> <li>Use batch operations for efficiency</li> <li>Implement rollback procedures</li> <li>Validate secret integrity after distribution</li> </ol>"},{"location":"cli/secrets/#see-also","title":"See Also","text":"<ul> <li>Assignment Commands</li> <li>Repository Commands</li> <li>Automation Commands</li> <li>Security Best Practices</li> </ul>"},{"location":"development/architecture/","title":"Architecture Overview","text":"<p>This document provides an overview of the Classroom Pilot architecture and design patterns.</p>"},{"location":"development/architecture/#project-structure","title":"\ud83c\udfd7\ufe0f Project Structure","text":"<pre><code>classroom_pilot/\n\u251c\u2500\u2500 classroom_pilot/          # Main package\n\u2502   \u251c\u2500\u2500 __init__.py          # Package initialization\n\u2502   \u251c\u2500\u2500 __main__.py          # Entry point\n\u2502   \u251c\u2500\u2500 cli.py               # Main CLI interface (Typer)\n\u2502   \u251c\u2500\u2500 bash_wrapper.py      # Shell command wrapper\n\u2502   \u251c\u2500\u2500 config.py            # Configuration management\n\u2502   \u251c\u2500\u2500 utils.py             # Utility functions\n\u2502   \u251c\u2500\u2500 assignments/         # Assignment management\n\u2502   \u251c\u2500\u2500 automation/          # Scheduling and batch processing\n\u2502   \u251c\u2500\u2500 config/              # Configuration system\n\u2502   \u251c\u2500\u2500 repos/               # Repository operations\n\u2502   \u251c\u2500\u2500 scripts/             # Shell scripts\n\u2502   \u2514\u2500\u2500 secrets/             # Secret management\n\u251c\u2500\u2500 tests/                   # Comprehensive test suite (153 tests)\n\u251c\u2500\u2500 docs/                    # Documentation\n\u251c\u2500\u2500 .github/workflows/       # CI/CD automation\n\u2514\u2500\u2500 pyproject.toml          # Poetry configuration\n</code></pre>"},{"location":"development/architecture/#design-principles","title":"\ud83c\udfaf Design Principles","text":""},{"location":"development/architecture/#modular-architecture","title":"Modular Architecture","text":"<p>The application is designed with clear separation of concerns:</p> <ul> <li>CLI Layer: Command-line interface using Typer</li> <li>Business Logic: Core functionality in separate modules</li> <li>Configuration: Centralized configuration management</li> <li>Utilities: Common utilities and helpers</li> </ul>"},{"location":"development/architecture/#command-structure","title":"Command Structure","text":"<pre><code># Main app with sub-applications\napp = typer.Typer(help=\"Main description\")\nassignments_app = typer.Typer(help=\"Assignment commands\")\nrepos_app = typer.Typer(help=\"Repository commands\")\n\n# Add sub-apps to main app\napp.add_typer(assignments_app, name=\"assignments\")\napp.add_typer(repos_app, name=\"repos\")\n</code></pre>"},{"location":"development/architecture/#configuration-management","title":"Configuration Management","text":"<ul> <li>Centralized configuration using <code>ConfigLoader</code> class</li> <li>Support for file-based and environment variable configuration</li> <li>Validation and sensible defaults</li> <li>Hierarchical configuration merging</li> </ul>"},{"location":"development/architecture/#core-components","title":"\ud83d\udd27 Core Components","text":""},{"location":"development/architecture/#cli-interface-clipy","title":"CLI Interface (<code>cli.py</code>)","text":"<p>The main command-line interface built with Typer:</p> <ul> <li>Sub-applications: Organized commands by functionality</li> <li>Command patterns: Consistent parameter handling</li> <li>Error handling: Graceful error reporting</li> <li>Help system: Comprehensive help and examples</li> </ul>"},{"location":"development/architecture/#assignment-management-assignments","title":"Assignment Management (<code>assignments/</code>)","text":"<p>Handles assignment lifecycle:</p> <ul> <li>Setup: Assignment configuration and initialization</li> <li>Orchestration: Automated assignment workflows</li> <li>Management: Assignment state and operations</li> </ul>"},{"location":"development/architecture/#repository-operations-repos","title":"Repository Operations (<code>repos/</code>)","text":"<p>Git repository management:</p> <ul> <li>Fetching: Student repository collection</li> <li>Collaboration: Collaborator management</li> <li>Operations: Common repository tasks</li> </ul>"},{"location":"development/architecture/#configuration-system-config","title":"Configuration System (<code>config/</code>)","text":"<p>Centralized configuration management:</p> <ul> <li>Loading: Configuration file parsing</li> <li>Validation: Schema validation and defaults</li> <li>Generation: Configuration file creation</li> </ul>"},{"location":"development/architecture/#secrets-management-secrets","title":"Secrets Management (<code>secrets/</code>)","text":"<p>Secure handling of sensitive data:</p> <ul> <li>Storage: Encrypted secret storage</li> <li>Distribution: Secure secret distribution</li> <li>Management: Secret lifecycle operations</li> </ul>"},{"location":"development/architecture/#automation-automation","title":"Automation (<code>automation/</code>)","text":"<p>Scheduled and batch operations:</p> <ul> <li>Scheduling: Cron-based automation</li> <li>Batch processing: Bulk operations</li> <li>Monitoring: Operation tracking</li> </ul>"},{"location":"development/architecture/#testing-architecture","title":"\ud83e\uddea Testing Architecture","text":""},{"location":"development/architecture/#test-organization","title":"Test Organization","text":"<pre><code>tests/\n\u251c\u2500\u2500 conftest.py              # Shared fixtures\n\u251c\u2500\u2500 test_assignments.py      # Assignment tests\n\u251c\u2500\u2500 test_automation.py       # Automation tests\n\u251c\u2500\u2500 test_bash_wrapper.py     # Shell wrapper tests\n\u251c\u2500\u2500 test_cli.py             # CLI interface tests\n\u251c\u2500\u2500 test_config.py          # Configuration tests\n\u251c\u2500\u2500 test_repos.py           # Repository tests\n\u251c\u2500\u2500 test_secrets.py         # Secrets tests\n\u2514\u2500\u2500 fixtures/               # Test data\n</code></pre>"},{"location":"development/architecture/#test-patterns","title":"Test Patterns","text":"<ul> <li>Unit Tests: Individual component testing</li> <li>Integration Tests: Component interaction</li> <li>CLI Tests: Command-line interface validation</li> <li>Mock Usage: External dependency mocking</li> </ul>"},{"location":"development/architecture/#fixtures","title":"Fixtures","text":"<p>Common test fixtures provide:</p> <ul> <li>Mock configuration objects</li> <li>Temporary directories</li> <li>Mock external services</li> <li>Test data setup</li> </ul>"},{"location":"development/architecture/#data-flow","title":"\ud83d\udd04 Data Flow","text":""},{"location":"development/architecture/#command-execution-flow","title":"Command Execution Flow","text":"<ol> <li>CLI Parsing: Typer parses command and arguments</li> <li>Configuration Loading: Load and validate configuration</li> <li>Business Logic: Execute core functionality</li> <li>Output: Format and display results</li> <li>Error Handling: Graceful error reporting</li> </ol>"},{"location":"development/architecture/#configuration-flow","title":"Configuration Flow","text":"<ol> <li>File Loading: Load configuration files</li> <li>Environment Variables: Override with env vars</li> <li>Command Arguments: Override with CLI args</li> <li>Validation: Validate final configuration</li> <li>Default Values: Apply sensible defaults</li> </ol>"},{"location":"development/architecture/#patterns-and-conventions","title":"\ud83c\udfdb\ufe0f Patterns and Conventions","text":""},{"location":"development/architecture/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    # Operation\n    pass\nexcept SpecificException as e:\n    logger.error(f\"Operation failed: {e}\")\n    raise typer.Exit(code=1)\n</code></pre>"},{"location":"development/architecture/#configuration-access","title":"Configuration Access","text":"<pre><code>config = ConfigLoader().load()\nvalue = config.get('section.key', default_value)\n</code></pre>"},{"location":"development/architecture/#command-definition","title":"Command Definition","text":"<pre><code>@app.command()\ndef command_name(\n    param: str = typer.Option(..., help=\"Parameter description\"),\n    dry_run: bool = typer.Option(False, help=\"Show what would be done\")\n):\n    \"\"\"Command description with usage example.\"\"\"\n    pass\n</code></pre>"},{"location":"development/architecture/#external-dependencies","title":"\ud83d\udd0c External Dependencies","text":""},{"location":"development/architecture/#core-dependencies","title":"Core Dependencies","text":"<ul> <li>Typer: CLI framework</li> <li>Click: Command-line utilities</li> <li>PyYAML: Configuration file parsing</li> <li>Requests: HTTP client</li> </ul>"},{"location":"development/architecture/#development-dependencies","title":"Development Dependencies","text":"<ul> <li>pytest: Testing framework</li> <li>Poetry: Dependency management</li> <li>Black: Code formatting</li> <li>MyPy: Type checking</li> </ul>"},{"location":"development/architecture/#deployment-architecture","title":"\ud83d\ude80 Deployment Architecture","text":""},{"location":"development/architecture/#package-distribution","title":"Package Distribution","text":"<ul> <li>PyPI: Primary distribution channel</li> <li>GitHub Releases: Tagged releases</li> <li>CI/CD: Automated publishing</li> </ul>"},{"location":"development/architecture/#runtime-environment","title":"Runtime Environment","text":"<ul> <li>Python 3.10+: Minimum Python version</li> <li>Cross-platform: Windows, macOS, Linux</li> <li>Virtual environments: Poetry-managed dependencies</li> </ul>"},{"location":"development/architecture/#future-considerations","title":"\ud83d\udd2e Future Considerations","text":""},{"location":"development/architecture/#extensibility","title":"Extensibility","text":"<ul> <li>Plugin architecture for custom commands</li> <li>Configuration schema extensibility</li> <li>Custom workflow definitions</li> </ul>"},{"location":"development/architecture/#performance","title":"Performance","text":"<ul> <li>Async operations for I/O-bound tasks</li> <li>Caching for repeated operations</li> <li>Batch processing optimizations</li> </ul>"},{"location":"development/architecture/#security","title":"Security","text":"<ul> <li>Enhanced secret encryption</li> <li>Audit logging</li> <li>Permission management</li> </ul>"},{"location":"development/contributing/","title":"Contributing to Classroom Pilot","text":"<p>Thank you for your interest in contributing to Classroom Pilot! This document provides guidelines and instructions for contributors.</p>"},{"location":"development/contributing/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>Poetry for dependency management</li> <li>Git for version control</li> </ul>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/hugo-valle/classroom-pilot.git\ncd classroom-pilot\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Activate the virtual environment: <pre><code>poetry shell\n</code></pre></p> </li> <li> <p>Verify installation: <pre><code>classroom-pilot --help\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#development-guidelines","title":"\ud83c\udfd7\ufe0f Development Guidelines","text":""},{"location":"development/contributing/#code-standards","title":"Code Standards","text":"<ul> <li>Python Style: Follow PEP 8 conventions</li> <li>Type Hints: Use type hints where applicable</li> <li>Docstrings: Maintain consistent docstring format</li> <li>String Formatting: Prefer f-strings for string formatting</li> </ul>"},{"location":"development/contributing/#testing-requirements","title":"Testing Requirements","text":"<ul> <li>Coverage: Maintain 100% test pass rate</li> <li>New Features: Write tests for all new functionality</li> <li>Test Framework: Use pytest with existing fixtures</li> <li>Test Patterns: Follow existing test patterns in <code>tests/</code></li> </ul>"},{"location":"development/contributing/#version-management","title":"Version Management","text":"<ul> <li>Semantic Versioning: <code>MAJOR.MINOR.PATCH-prerelease</code></li> <li>Pre-release Format: <code>alpha.X</code>, <code>beta.X</code>, <code>rc.X</code></li> <li>Version Locations: Keep synchronized:</li> <li><code>pyproject.toml</code> \u2192 <code>version = \"X.Y.Z\"</code></li> <li><code>classroom_pilot/__init__.py</code> \u2192 <code>__version__ = \"X.Y.Z\"</code></li> <li><code>classroom_pilot/cli.py</code> \u2192 version command output</li> </ul>"},{"location":"development/contributing/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npoetry run pytest tests/ -v\n\n# Run specific test file\npoetry run pytest tests/test_cli.py -v\n\n# Run with coverage\npoetry run pytest tests/ --cov=classroom_pilot\n</code></pre>"},{"location":"development/contributing/#test-organization","title":"Test Organization","text":"<pre><code># tests/test_&lt;module&gt;.py\nimport pytest\nfrom classroom_pilot.&lt;module&gt; import Class\n\nclass TestClass:\n    def test_method_success(self, mock_config):\n        \"\"\"Test successful operation.\"\"\"\n        pass\n\n    def test_method_failure(self, mock_config):\n        \"\"\"Test error handling.\"\"\"\n        pass\n</code></pre>"},{"location":"development/contributing/#documentation","title":"\ud83d\udcdd Documentation","text":""},{"location":"development/contributing/#docstring-format","title":"Docstring Format","text":"<pre><code>def function_name(param1: str, param2: int = 0) -&gt; bool:\n    \"\"\"\n    Brief description of function purpose.\n\n    Args:\n        param1: Description of first parameter\n        param2: Description of second parameter with default\n\n    Returns:\n        Description of return value\n\n    Raises:\n        SpecificException: When specific condition occurs\n    \"\"\"\n    pass\n</code></pre>"},{"location":"development/contributing/#cli-help-text","title":"CLI Help Text","text":"<pre><code>@app.command()\ndef command_name(\n    param: str = typer.Option(..., help=\"Clear, concise parameter description\")\n):\n    \"\"\"\n    Command description with example usage.\n\n    Example:\n        classroom-pilot command-name --param value\n    \"\"\"\n    pass\n</code></pre>"},{"location":"development/contributing/#workflow","title":"\ud83d\udd04 Workflow","text":""},{"location":"development/contributing/#development-process","title":"Development Process","text":"<ol> <li>Start: Create feature branch from main</li> <li>Develop: Implement changes with tests</li> <li>Test: Run comprehensive test suite</li> <li>Verify: Test CLI functionality locally</li> <li>Update: Bump version if needed</li> <li>Document: Update relevant documentation</li> <li>Commit: Use conventional commit messages</li> <li>PR: Create pull request with clear description</li> <li>Merge: Merge to main after review</li> <li>Release: Tag for automated publishing</li> </ol>"},{"location":"development/contributing/#commit-messages","title":"Commit Messages","text":"<p>Follow conventional commit format:</p> <pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Examples: - <code>feat(cli): add new assignment command</code> - <code>fix(repos): handle missing repository error</code> - <code>docs(readme): update installation instructions</code> - <code>test(cli): add tests for assignment commands</code></p>"},{"location":"development/contributing/#release-process","title":"\ud83d\ude80 Release Process","text":"<ol> <li>Update version in all locations</li> <li>Update CHANGELOG.md</li> <li>Commit changes: <code>git commit -m \"bump: version X.Y.Z\"</code></li> <li>Create tag: <code>git tag vX.Y.Z</code></li> <li>Push: <code>git push origin main --tags</code></li> <li>CI/CD handles automatic PyPI publication</li> </ol>"},{"location":"development/contributing/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<p>When reporting bugs, please include:</p> <ul> <li>Python version</li> <li>Operating system</li> <li>Classroom Pilot version</li> <li>Steps to reproduce</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Any error messages</li> </ul>"},{"location":"development/contributing/#feature-requests","title":"\u2728 Feature Requests","text":"<p>For feature requests, please provide:</p> <ul> <li>Clear description of the feature</li> <li>Use case or problem it solves</li> <li>Proposed implementation (if any)</li> <li>Examples of how it would be used</li> </ul>"},{"location":"development/contributing/#getting-help","title":"\ud83d\udcde Getting Help","text":"<ul> <li>Issues: GitHub Issues for bugs and feature requests</li> <li>Discussions: GitHub Discussions for questions and ideas</li> <li>Documentation: Check the documentation first</li> </ul>"},{"location":"development/contributing/#license","title":"\ud83d\udcdc License","text":"<p>By contributing to Classroom Pilot, you agree that your contributions will be licensed under the same license as the project.</p>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>This guide covers testing practices and procedures for Classroom Pilot.</p>"},{"location":"development/testing/#testing-overview","title":"\ud83e\uddea Testing Overview","text":"<p>Classroom Pilot maintains a comprehensive test suite with 153+ tests covering all major functionality:</p> <ul> <li>Unit Tests: Individual component testing</li> <li>Integration Tests: Component interaction testing</li> <li>CLI Tests: Command-line interface validation</li> <li>Error Handling Tests: Exception and error scenarios</li> </ul>"},{"location":"development/testing/#running-tests","title":"\ud83d\ude80 Running Tests","text":""},{"location":"development/testing/#basic-test-execution","title":"Basic Test Execution","text":"<pre><code># Run all tests\npoetry run pytest tests/ -v\n\n# Run specific test file\npoetry run pytest tests/test_cli.py -v\n\n# Run specific test class\npoetry run pytest tests/test_cli.py::TestCLI -v\n\n# Run specific test method\npoetry run pytest tests/test_cli.py::TestCLI::test_version_command -v\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<pre><code># Run tests with coverage report\npoetry run pytest tests/ --cov=classroom_pilot\n\n# Generate HTML coverage report\npoetry run pytest tests/ --cov=classroom_pilot --cov-report=html\n\n# View coverage report\nopen htmlcov/index.html\n</code></pre>"},{"location":"development/testing/#test-filtering","title":"Test Filtering","text":"<pre><code># Run tests matching a pattern\npoetry run pytest tests/ -k \"test_config\"\n\n# Run tests with specific markers\npoetry run pytest tests/ -m \"integration\"\n\n# Skip slow tests\npoetry run pytest tests/ -m \"not slow\"\n</code></pre>"},{"location":"development/testing/#test-structure","title":"\ud83d\udcc1 Test Structure","text":""},{"location":"development/testing/#test-organization","title":"Test Organization","text":"<pre><code>tests/\n\u251c\u2500\u2500 conftest.py              # Shared fixtures and configuration\n\u251c\u2500\u2500 test_assignments.py      # Assignment management tests\n\u251c\u2500\u2500 test_automation.py       # Automation and scheduling tests\n\u251c\u2500\u2500 test_bash_wrapper.py     # Shell command wrapper tests\n\u251c\u2500\u2500 test_cli.py             # CLI interface tests\n\u251c\u2500\u2500 test_config_system.py   # Configuration system tests\n\u251c\u2500\u2500 test_config.py          # Legacy configuration tests\n\u251c\u2500\u2500 test_repos.py           # Repository operation tests\n\u251c\u2500\u2500 test_secrets.py         # Secret management tests\n\u251c\u2500\u2500 test_utils.py           # Utility function tests\n\u2514\u2500\u2500 fixtures/               # Test data and fixtures\n</code></pre>"},{"location":"development/testing/#test-naming-conventions","title":"Test Naming Conventions","text":"<ul> <li>Test Files: <code>test_&lt;module&gt;.py</code></li> <li>Test Classes: <code>TestClassName</code></li> <li>Test Methods: <code>test_method_description</code></li> <li>Fixtures: <code>mock_&lt;component&gt;</code> or <code>temp_&lt;resource&gt;</code></li> </ul>"},{"location":"development/testing/#writing-tests","title":"\ud83d\udd27 Writing Tests","text":""},{"location":"development/testing/#basic-test-pattern","title":"Basic Test Pattern","text":"<pre><code>import pytest\nfrom classroom_pilot.module import Class\n\nclass TestClass:\n    def test_method_success(self, mock_config):\n        \"\"\"Test successful operation.\"\"\"\n        # Arrange\n        instance = Class(config=mock_config)\n\n        # Act\n        result = instance.method()\n\n        # Assert\n        assert result.success is True\n        assert result.data is not None\n\n    def test_method_failure(self, mock_config):\n        \"\"\"Test error handling.\"\"\"\n        # Arrange\n        instance = Class(config=mock_config)\n\n        # Act &amp; Assert\n        with pytest.raises(SpecificException):\n            instance.method_that_fails()\n</code></pre>"},{"location":"development/testing/#using-fixtures","title":"Using Fixtures","text":"<pre><code>def test_with_fixtures(mock_config, temp_dir, mock_bash_wrapper):\n    \"\"\"Test using multiple fixtures.\"\"\"\n    # All fixtures are automatically available\n    assert mock_config is not None\n    assert temp_dir.exists()\n    assert mock_bash_wrapper.is_configured()\n</code></pre>"},{"location":"development/testing/#parametrized-tests","title":"Parametrized Tests","text":"<pre><code>@pytest.mark.parametrize(\"input_value,expected\", [\n    (\"valid_input\", True),\n    (\"invalid_input\", False),\n    (\"\", False),\n])\ndef test_validation(input_value, expected):\n    \"\"\"Test input validation with multiple values.\"\"\"\n    result = validate_input(input_value)\n    assert result == expected\n</code></pre>"},{"location":"development/testing/#fixtures-and-mocking","title":"\ud83c\udfad Fixtures and Mocking","text":""},{"location":"development/testing/#available-fixtures","title":"Available Fixtures","text":"<p>The test suite provides several pre-configured fixtures:</p>"},{"location":"development/testing/#configuration-fixtures","title":"Configuration Fixtures","text":"<pre><code>@pytest.fixture\ndef mock_config():\n    \"\"\"Mock configuration object.\"\"\"\n    return MockConfig()\n\n@pytest.fixture\ndef temp_config_file(tmp_path):\n    \"\"\"Temporary configuration file.\"\"\"\n    config_file = tmp_path / \"config.yaml\"\n    config_file.write_text(\"test: value\")\n    return config_file\n</code></pre>"},{"location":"development/testing/#file-system-fixtures","title":"File System Fixtures","text":"<pre><code>@pytest.fixture\ndef temp_dir(tmp_path):\n    \"\"\"Temporary directory for tests.\"\"\"\n    return tmp_path\n\n@pytest.fixture\ndef mock_git_repo(tmp_path):\n    \"\"\"Mock Git repository.\"\"\"\n    repo_dir = tmp_path / \"repo\"\n    repo_dir.mkdir()\n    return repo_dir\n</code></pre>"},{"location":"development/testing/#external-service-fixtures","title":"External Service Fixtures","text":"<pre><code>@pytest.fixture\ndef mock_bash_wrapper():\n    \"\"\"Mock bash command wrapper.\"\"\"\n    return MockBashWrapper()\n\n@pytest.fixture\ndef mock_github_api():\n    \"\"\"Mock GitHub API responses.\"\"\"\n    return MockGitHubAPI()\n</code></pre>"},{"location":"development/testing/#creating-custom-fixtures","title":"Creating Custom Fixtures","text":"<pre><code>@pytest.fixture\ndef custom_fixture(mock_config):\n    \"\"\"Custom fixture for specific tests.\"\"\"\n    # Setup\n    resource = CustomResource(config=mock_config)\n    yield resource\n    # Cleanup\n    resource.cleanup()\n</code></pre>"},{"location":"development/testing/#testing-cli-commands","title":"\ud83d\udd0d Testing CLI Commands","text":""},{"location":"development/testing/#cli-test-patterns","title":"CLI Test Patterns","text":"<pre><code>from typer.testing import CliRunner\nfrom classroom_pilot.cli import app\n\ndef test_command_success():\n    \"\"\"Test successful command execution.\"\"\"\n    runner = CliRunner()\n    result = runner.invoke(app, [\"command\", \"--option\", \"value\"])\n\n    assert result.exit_code == 0\n    assert \"Expected output\" in result.stdout\n\ndef test_command_error():\n    \"\"\"Test command error handling.\"\"\"\n    runner = CliRunner()\n    result = runner.invoke(app, [\"command\", \"--invalid\", \"option\"])\n\n    assert result.exit_code != 0\n    assert \"Error message\" in result.stderr\n</code></pre>"},{"location":"development/testing/#testing-command-options","title":"Testing Command Options","text":"<pre><code>def test_command_with_options():\n    \"\"\"Test command with various options.\"\"\"\n    runner = CliRunner()\n\n    # Test with required options\n    result = runner.invoke(app, [\"command\", \"--required\", \"value\"])\n    assert result.exit_code == 0\n\n    # Test with optional flags\n    result = runner.invoke(app, [\"command\", \"--required\", \"value\", \"--verbose\"])\n    assert result.exit_code == 0\n    assert \"verbose output\" in result.stdout\n</code></pre>"},{"location":"development/testing/#error-testing","title":"\ud83d\udea8 Error Testing","text":""},{"location":"development/testing/#exception-testing","title":"Exception Testing","text":"<pre><code>def test_specific_exception():\n    \"\"\"Test specific exception handling.\"\"\"\n    with pytest.raises(ConfigurationError) as exc_info:\n        load_invalid_config()\n\n    assert \"Invalid configuration\" in str(exc_info.value)\n\ndef test_exception_chain():\n    \"\"\"Test exception chaining.\"\"\"\n    with pytest.raises(ProcessingError) as exc_info:\n        process_with_chain_error()\n\n    assert exc_info.value.__cause__ is not None\n</code></pre>"},{"location":"development/testing/#error-message-testing","title":"Error Message Testing","text":"<pre><code>def test_error_messages(caplog):\n    \"\"\"Test error message logging.\"\"\"\n    with caplog.at_level(logging.ERROR):\n        process_with_error()\n\n    assert \"Expected error message\" in caplog.text\n    assert len(caplog.records) == 1\n</code></pre>"},{"location":"development/testing/#continuous-integration","title":"\ud83d\udd04 Continuous Integration","text":""},{"location":"development/testing/#github-actions","title":"GitHub Actions","text":"<p>Tests run automatically on:</p> <ul> <li>Pull Requests: All tests must pass</li> <li>Main Branch: Full test suite execution</li> <li>Releases: Complete validation before publishing</li> </ul>"},{"location":"development/testing/#test-matrix","title":"Test Matrix","text":"<pre><code>strategy:\n  matrix:\n    python-version: [3.10, 3.11, 3.12]\n    os: [ubuntu-latest, windows-latest, macos-latest]\n</code></pre>"},{"location":"development/testing/#coverage-requirements","title":"Coverage Requirements","text":"<ul> <li>Minimum Coverage: 90%</li> <li>New Code: 100% coverage required</li> <li>Critical Paths: Full coverage mandatory</li> </ul>"},{"location":"development/testing/#test-debugging","title":"\ud83d\udcca Test Debugging","text":""},{"location":"development/testing/#debug-mode","title":"Debug Mode","text":"<pre><code># Run tests with debug output\npoetry run pytest tests/ -v -s\n\n# Run with PDB on failure\npoetry run pytest tests/ --pdb\n\n# Run with detailed output\npoetry run pytest tests/ -vv --tb=long\n</code></pre>"},{"location":"development/testing/#log-output","title":"Log Output","text":"<pre><code># Capture log output\npoetry run pytest tests/ --log-cli-level=DEBUG\n\n# Save logs to file\npoetry run pytest tests/ --log-file=test.log\n</code></pre>"},{"location":"development/testing/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"development/testing/#test-guidelines","title":"Test Guidelines","text":"<ol> <li>One Assertion Per Test: Focus on single behavior</li> <li>Clear Test Names: Describe what is being tested</li> <li>Arrange-Act-Assert: Follow AAA pattern</li> <li>Mock External Dependencies: Isolate units under test</li> <li>Clean Up Resources: Use fixtures for setup/teardown</li> </ol>"},{"location":"development/testing/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Fast Tests: Keep individual tests under 1 second</li> <li>Parallel Execution: Use pytest-xdist for speed</li> <li>Resource Management: Clean up temporary files</li> <li>Network Isolation: Mock external API calls</li> </ul>"},{"location":"development/testing/#maintenance","title":"Maintenance","text":"<ul> <li>Regular Updates: Keep test dependencies current</li> <li>Refactor Tests: Maintain test quality alongside code</li> <li>Documentation: Document complex test scenarios</li> <li>Review Coverage: Monitor and improve coverage gaps</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>This guide covers how to configure Classroom Pilot for your GitHub Classroom environment.</p>"},{"location":"getting-started/configuration/#configuration-overview","title":"Configuration Overview","text":"<p>Classroom Pilot uses a hierarchical configuration system that supports:</p> <ul> <li>Configuration files (YAML/JSON)</li> <li>Environment variables </li> <li>Command-line arguments</li> <li>Default values</li> </ul> <p>Configuration is loaded in order of precedence (highest to lowest): 1. Command-line arguments 2. Environment variables 3. Configuration files 4. Default values</p>"},{"location":"getting-started/configuration/#configuration-file-format","title":"Configuration File Format","text":""},{"location":"getting-started/configuration/#basic-configuration","title":"Basic Configuration","text":"<p>Create a configuration file in YAML format:</p> <pre><code># classroom-pilot.yaml\nclassroom:\n  url: \"https://classroom.github.com/classrooms/123456\"\n  assignment_prefix: \"assignment-\"\n  organization: \"my-classroom-org\"\n\ngithub:\n  token: \"${GITHUB_TOKEN}\"\n  api_url: \"https://api.github.com\"\n  timeout: 30\n\nassignments:\n  base_directory: \"./assignments\"\n  clone_depth: 1\n  parallel_operations: 5\n\nautomation:\n  schedule_enabled: true\n  max_concurrent_jobs: 3\n  log_level: \"info\"\n\nsecrets:\n  encryption_enabled: true\n  rotation_schedule: \"monthly\"\n  backup_enabled: true\n</code></pre>"},{"location":"getting-started/configuration/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code># Extended configuration with all options\nclassroom:\n  url: \"https://classroom.github.com/classrooms/123456\"\n  assignment_prefix: \"hw-\"\n  organization: \"cs101-fall2024\"\n  default_branch: \"main\"\n\ngithub:\n  token: \"${GITHUB_TOKEN}\"\n  api_url: \"https://api.github.com\"\n  timeout: 30\n  retry_count: 3\n  rate_limit_delay: 1000\n\nassignments:\n  base_directory: \"./student-work\"\n  clone_depth: 1\n  parallel_operations: 10\n  timeout: 300\n  required_files:\n    - \"README.md\"\n    - \"src/\"\n  validation_rules:\n    - \"no_empty_commits\"\n    - \"require_tests\"\n\nrepositories:\n  fetch_strategy: \"shallow\"\n  sync_frequency: \"daily\"\n  collaborator_permissions: \"write\"\n  branch_protection: true\n\nsecrets:\n  encryption_enabled: true\n  encryption_algorithm: \"AES-256-GCM\"\n  key_source: \"environment\"\n  rotation_schedule: \"monthly\"\n  backup_enabled: true\n  backup_location: \"./secret-backups\"\n\nautomation:\n  schedule_enabled: true\n  timezone: \"UTC\"\n  max_concurrent_jobs: 5\n  retry_attempts: 3\n  retry_delay: 300\n  log_level: \"info\"\n  log_retention_days: 30\n  notification_webhook: \"${WEBHOOK_URL}\"\n\nlogging:\n  level: \"info\"\n  format: \"json\"\n  file: \"./logs/classroom-pilot.log\"\n  max_size: \"100MB\"\n  backup_count: 5\n</code></pre>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":""},{"location":"getting-started/configuration/#required-variables","title":"Required Variables","text":"<pre><code># GitHub authentication\nexport GITHUB_TOKEN=\"ghp_your_token_here\"\n\n# Optional: GitHub organization\nexport GITHUB_ORG=\"my-classroom-org\"\n\n# Optional: Classroom URL\nexport CLASSROOM_URL=\"https://classroom.github.com/classrooms/123456\"\n</code></pre>"},{"location":"getting-started/configuration/#advanced-environment-variables","title":"Advanced Environment Variables","text":"<pre><code># GitHub API configuration\nexport GITHUB_API_URL=\"https://api.github.com\"\nexport GITHUB_TIMEOUT=\"30\"\nexport GITHUB_RETRY_COUNT=\"3\"\n\n# Assignment configuration\nexport ASSIGNMENT_PREFIX=\"hw-\"\nexport ASSIGNMENT_BASE_DIR=\"./assignments\"\nexport ASSIGNMENT_CLONE_DEPTH=\"1\"\n\n# Automation settings\nexport AUTOMATION_ENABLED=\"true\"\nexport AUTOMATION_TIMEZONE=\"UTC\"\nexport AUTOMATION_MAX_JOBS=\"5\"\n\n# Secret management\nexport SECRETS_ENCRYPTION_KEY=\"your-encryption-key\"\nexport SECRETS_BACKUP_DIR=\"./secret-backups\"\nexport WEBHOOK_URL=\"https://hooks.slack.com/your-webhook\"\n\n# Logging configuration\nexport LOG_LEVEL=\"info\"\nexport LOG_FILE=\"./logs/classroom-pilot.log\"\n</code></pre>"},{"location":"getting-started/configuration/#configuration-file-locations","title":"Configuration File Locations","text":"<p>Classroom Pilot looks for configuration files in the following order:</p> <ol> <li>File specified with <code>--config</code> option</li> <li><code>./classroom-pilot.yaml</code> (current directory)</li> <li><code>./classroom-pilot.yml</code></li> <li><code>~/.config/classroom-pilot/config.yaml</code> (user config)</li> <li><code>/etc/classroom-pilot/config.yaml</code> (system config)</li> </ol>"},{"location":"getting-started/configuration/#creating-user-configuration","title":"Creating User Configuration","text":"<pre><code># Create user configuration directory\nmkdir -p ~/.config/classroom-pilot\n\n# Create user configuration file\ncat &gt; ~/.config/classroom-pilot/config.yaml &lt;&lt; EOF\ngithub:\n  token: \"${GITHUB_TOKEN}\"\n  organization: \"my-default-org\"\n\nlogging:\n  level: \"info\"\n  file: \"~/.local/share/classroom-pilot/logs/app.log\"\nEOF\n</code></pre>"},{"location":"getting-started/configuration/#assignment-specific-configuration","title":"Assignment-Specific Configuration","text":"<p>Create configuration files for individual assignments:</p> <pre><code># assignments/midterm-project.yaml\nassignment:\n  name: \"midterm-project\"\n  description: \"Comprehensive midterm project\"\n  due_date: \"2024-03-15T23:59:59Z\"\n\ngithub:\n  organization: \"cs101-fall2024\"\n  template_repo: \"midterm-template\"\n\nrequirements:\n  files:\n    - \"README.md\"\n    - \"src/main.py\"\n    - \"tests/\"\n    - \"requirements.txt\"\n\nsecrets:\n    - name: \"API_KEY\"\n      description: \"External API key for project\"\n    - name: \"DATABASE_URL\" \n      description: \"Database connection string\"\n\nvalidation:\n  rules:\n    - \"has_readme\"\n    - \"has_tests\"\n    - \"code_compiles\"\n    - \"tests_pass\"\n\ngrading:\n  rubric_file: \"rubrics/midterm-rubric.yaml\"\n  auto_grade: true\n  deadline_enforcement: \"strict\"\n</code></pre>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":""},{"location":"getting-started/configuration/#validate-configuration","title":"Validate Configuration","text":"<pre><code># Validate current configuration\nclassroom-pilot config validate\n\n# Validate specific configuration file\nclassroom-pilot config validate --file ./custom-config.yaml\n\n# Validate with detailed output\nclassroom-pilot config validate --detailed\n\n# Check configuration and show resolved values\nclassroom-pilot config show --resolved\n</code></pre>"},{"location":"getting-started/configuration/#configuration-schema","title":"Configuration Schema","text":"<p>Classroom Pilot validates configuration against a JSON schema:</p> <pre><code># Generate configuration schema\nclassroom-pilot config schema &gt; config-schema.json\n\n# Validate against schema\nclassroom-pilot config validate --schema config-schema.json\n</code></pre>"},{"location":"getting-started/configuration/#common-configuration-patterns","title":"Common Configuration Patterns","text":""},{"location":"getting-started/configuration/#development-environment","title":"Development Environment","text":"<pre><code># dev-config.yaml\ngithub:\n  token: \"${GITHUB_TOKEN}\"\n  organization: \"test-classroom\"\n\nassignments:\n  base_directory: \"./dev-assignments\"\n\nlogging:\n  level: \"debug\"\n  file: \"./dev.log\"\n\nautomation:\n  schedule_enabled: false\n</code></pre>"},{"location":"getting-started/configuration/#production-environment","title":"Production Environment","text":"<pre><code># prod-config.yaml\ngithub:\n  token: \"${GITHUB_TOKEN}\"\n  organization: \"cs101-fall2024\"\n  timeout: 60\n  retry_count: 5\n\nassignments:\n  base_directory: \"/var/classroom-pilot/assignments\"\n  parallel_operations: 20\n\nautomation:\n  schedule_enabled: true\n  max_concurrent_jobs: 10\n  log_level: \"info\"\n\nlogging:\n  level: \"info\"\n  file: \"/var/log/classroom-pilot/app.log\"\n  format: \"json\"\n</code></pre>"},{"location":"getting-started/configuration/#multi-class-setup","title":"Multi-Class Setup","text":"<pre><code># multi-class-config.yaml\nclasses:\n  cs101:\n    github:\n      organization: \"cs101-fall2024\"\n    assignments:\n      base_directory: \"./cs101\"\n\n  cs201:\n    github:\n      organization: \"cs201-fall2024\"\n    assignments:\n      base_directory: \"./cs201\"\n\n# Use with: classroom-pilot --class cs101 assignments setup\n</code></pre>"},{"location":"getting-started/configuration/#security-configuration","title":"Security Configuration","text":""},{"location":"getting-started/configuration/#token-management","title":"Token Management","text":"<pre><code># Store token securely\necho \"ghp_your_token_here\" | gpg --encrypt &gt; github-token.gpg\n\n# Use encrypted token\nexport GITHUB_TOKEN=$(gpg --decrypt github-token.gpg)\n</code></pre>"},{"location":"getting-started/configuration/#secret-encryption","title":"Secret Encryption","text":"<pre><code># Enable secret encryption\nsecrets:\n  encryption_enabled: true\n  encryption_algorithm: \"AES-256-GCM\"\n  key_source: \"environment\"  # or \"file\", \"vault\"\n  key_file: \"./encryption.key\"  # if key_source is \"file\"\n</code></pre>"},{"location":"getting-started/configuration/#access-control","title":"Access Control","text":"<pre><code># Restrict operations by user/role\naccess_control:\n  enabled: true\n  rules:\n    - user: \"instructor\"\n      permissions: [\"all\"]\n    - user: \"ta\"\n      permissions: [\"repos:read\", \"secrets:add\"]\n    - role: \"grader\"\n      permissions: [\"assignments:grade\"]\n</code></pre>"},{"location":"getting-started/configuration/#configuration-management","title":"Configuration Management","text":""},{"location":"getting-started/configuration/#version-control","title":"Version Control","text":"<pre><code># Initialize configuration repository\ngit init classroom-config\ncd classroom-config\n\n# Add configuration files\ncp ~/.config/classroom-pilot/config.yaml .\ngit add config.yaml\ngit commit -m \"Initial configuration\"\n\n# Use versioned configuration\nclassroom-pilot --config ./classroom-config/config.yaml\n</code></pre>"},{"location":"getting-started/configuration/#configuration-templates","title":"Configuration Templates","text":"<pre><code># template-config.yaml\nclassroom:\n  url: \"{{ CLASSROOM_URL }}\"\n  organization: \"{{ GITHUB_ORG }}\"\n\ngithub:\n  token: \"{{ GITHUB_TOKEN }}\"\n\n# Use with substitution\nenvsubst &lt; template-config.yaml &gt; resolved-config.yaml\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"getting-started/configuration/#common-issues","title":"Common Issues","text":"<p>Invalid Configuration: <pre><code># Check configuration syntax\nclassroom-pilot config validate --file config.yaml\n\n# Show resolved configuration\nclassroom-pilot config show --resolved\n</code></pre></p> <p>Missing Environment Variables: <pre><code># Check required variables\nclassroom-pilot config check-env\n\n# Show environment variables used\nclassroom-pilot config show --env-only\n</code></pre></p> <p>Permission Issues: <pre><code># Test GitHub token permissions\nclassroom-pilot auth check\n\n# Verify organization access\nclassroom-pilot auth check --org my-classroom-org\n</code></pre></p>"},{"location":"getting-started/configuration/#debug-configuration-loading","title":"Debug Configuration Loading","text":"<pre><code># Show configuration sources\nclassroom-pilot --verbose config show\n\n# Debug configuration resolution\nclassroom-pilot --debug config validate\n</code></pre>"},{"location":"getting-started/configuration/#configuration-best-practices","title":"Configuration Best Practices","text":"<ol> <li>Security:</li> <li>Never commit tokens to version control</li> <li>Use environment variables for sensitive data</li> <li>Enable encryption for stored secrets</li> <li> <p>Regularly rotate access tokens</p> </li> <li> <p>Organization:</p> </li> <li>Use separate configurations for different environments</li> <li>Version control non-sensitive configuration</li> <li>Document configuration options and their purposes</li> <li> <p>Use consistent naming conventions</p> </li> <li> <p>Maintenance:</p> </li> <li>Regularly validate configuration files</li> <li>Monitor for deprecated options</li> <li>Test configuration changes in development first</li> <li> <p>Backup critical configuration files</p> </li> <li> <p>Performance:</p> </li> <li>Tune parallel operation limits</li> <li>Set appropriate timeouts</li> <li>Configure proper retry policies</li> <li>Monitor resource usage</li> </ol>"},{"location":"getting-started/configuration/#see-also","title":"See Also","text":"<ul> <li>Installation Guide</li> <li>Quick Start Guide</li> <li>CLI Reference</li> <li>Security Best Practices</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Get Classroom Pilot up and running in minutes.</p>"},{"location":"getting-started/installation/#install-from-pypi-recommended","title":"\ud83d\udce6 Install from PyPI (Recommended)","text":"<pre><code># Install the latest version\npip install classroom-pilot\n\n# Verify installation\nclassroom-pilot --help\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"\ud83d\udd27 Development Installation","text":""},{"location":"getting-started/installation/#using-poetry","title":"Using Poetry","text":"<pre><code># Clone repository\ngit clone https://github.com/hugo-valle/classroom-pilot.git\ncd classroom-pilot\n\n# Install with Poetry\npoetry install\npoetry shell\n\n# Verify installation\nclassroom-pilot --help\n</code></pre>"},{"location":"getting-started/installation/#using-pip-development-mode","title":"Using pip (Development Mode)","text":"<pre><code># Clone repository\ngit clone https://github.com/hugo-valle/classroom-pilot.git\ncd classroom-pilot\n\n# Install in editable mode\npip install -e .\n\n# Verify installation\nclassroom-pilot --help\n</code></pre>"},{"location":"getting-started/installation/#requirements","title":"\u2699\ufe0f Requirements","text":"<ul> <li>Python 3.10+ (3.11+ recommended)</li> <li>Git for repository operations</li> <li>GitHub CLI (optional, for enhanced authentication)</li> </ul>"},{"location":"getting-started/installation/#authentication-setup","title":"\ud83d\udd10 Authentication Setup","text":""},{"location":"getting-started/installation/#github-token","title":"GitHub Token","text":"<p>Create a GitHub personal access token for classroom-pilot:</p> <ol> <li>Go to GitHub Settings \u2192 Personal Access Tokens</li> <li>Generate a new token with these scopes:</li> <li><code>repo</code> (for repository access)</li> <li><code>admin:org</code> (for organization management)</li> <li><code>write:org</code> (for secret management)</li> <li>Save the token securely:</li> </ol> <pre><code># Create token file\necho \"ghp_your_token_here\" &gt; github_token.txt\nchmod 600 github_token.txt\n</code></pre>"},{"location":"getting-started/installation/#github-cli-optional","title":"GitHub CLI (Optional)","text":"<p>For enhanced authentication, install GitHub CLI:</p> <pre><code># Install GitHub CLI\n# macOS\nbrew install gh\n\n# Ubuntu/Debian\nsudo apt install gh\n\n# Windows\nwinget install GitHub.cli\n\n# Authenticate\ngh auth login\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"\u2705 Verify Installation","text":"<pre><code># Check version\nclassroom-pilot version\n\n# Test basic functionality\nclassroom-pilot --help\n\n# Test command groups\nclassroom-pilot assignments --help\nclassroom-pilot repos --help\nclassroom-pilot secrets --help\nclassroom-pilot automation --help\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ul> <li>Quick Start Guide - Get up and running</li> <li>Configuration - Set up your first assignment</li> <li>CLI Reference - Complete command documentation</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get started with Classroom Pilot in 5 minutes.</p>"},{"location":"getting-started/quick-start/#overview","title":"\ud83c\udfaf Overview","text":"<p>This guide will walk you through:</p> <ol> <li>Setting up your first assignment</li> <li>Discovering student repositories </li> <li>Managing secrets</li> <li>Running automated workflows</li> </ol>"},{"location":"getting-started/quick-start/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>Classroom Pilot installed</li> <li>GitHub personal access token</li> <li>GitHub Classroom assignment URL</li> </ul>"},{"location":"getting-started/quick-start/#step-1-assignment-setup","title":"\ud83d\ude80 Step 1: Assignment Setup","text":""},{"location":"getting-started/quick-start/#interactive-setup","title":"Interactive Setup","text":"<p>Use the interactive setup wizard to create your first assignment:</p> <pre><code># Run interactive setup\nclassroom-pilot assignments setup\n</code></pre> <p>The wizard will guide you through:</p> <ul> <li>GitHub Classroom URL</li> <li>Template repository URL</li> <li>Assignment file name</li> <li>Secret requirements</li> <li>Authentication setup</li> </ul>"},{"location":"getting-started/quick-start/#manual-configuration","title":"Manual Configuration","text":"<p>Alternatively, create an <code>assignment.conf</code> file manually:</p> <pre><code># Create assignment.conf\ncat &gt; assignment.conf &lt;&lt; 'EOF'\n# GitHub Classroom Configuration\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/homework1\"\nTEMPLATE_REPO_URL=\"https://github.com/instructor/homework1-template\"\nASSIGNMENT_FILE=\"homework1.py\"\n\n# Authentication\nGITHUB_TOKEN_FILE=\"github_token.txt\"\n\n# Secret Management\nSECRETS_LIST=\"API_KEY,GRADING_TOKEN\"\nEOF\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-repository-discovery","title":"\ud83d\udd0d Step 2: Repository Discovery","text":"<p>Discover all student repositories for your assignment:</p> <pre><code># Discover student repositories\nclassroom-pilot repos fetch --config assignment.conf\n\n# Preview without making changes\nclassroom-pilot --dry-run repos fetch --config assignment.conf\n\n# Discover with verbose output\nclassroom-pilot --verbose repos fetch --config assignment.conf\n</code></pre> <p>This will:</p> <ul> <li>Parse your classroom URL</li> <li>Find all student repositories</li> <li>Filter out instructor/template repositories</li> <li>Generate a list for batch operations</li> </ul>"},{"location":"getting-started/quick-start/#step-3-secret-management","title":"\ud83d\udd10 Step 3: Secret Management","text":"<p>Distribute secrets to all student repositories:</p> <pre><code># Add secrets to all repositories\nclassroom-pilot secrets add --config assignment.conf\n\n# Preview secret distribution\nclassroom-pilot --dry-run secrets add --config assignment.conf\n\n# Add specific secrets only\nclassroom-pilot secrets add --config assignment.conf --secrets \"API_KEY\"\n</code></pre>"},{"location":"getting-started/quick-start/#setting-secret-values","title":"Setting Secret Values","text":"<p>Set secret values via environment variables:</p> <pre><code># Set secret values\nexport API_KEY=\"your_api_key_here\"\nexport GRADING_TOKEN=\"your_grading_token\"\n\n# Distribute secrets\nclassroom-pilot secrets add --config assignment.conf\n</code></pre>"},{"location":"getting-started/quick-start/#step-4-complete-workflow","title":"\ud83d\udd04 Step 4: Complete Workflow","text":"<p>Run the complete automated workflow:</p> <pre><code># Run complete orchestration\nclassroom-pilot assignments orchestrate --config assignment.conf\n\n# Preview complete workflow\nclassroom-pilot --dry-run assignments orchestrate --config assignment.conf\n\n# Run with detailed logging\nclassroom-pilot --verbose assignments orchestrate --config assignment.conf\n</code></pre> <p>This orchestrates:</p> <ol> <li>Configuration validation</li> <li>Repository discovery</li> <li>Secret distribution</li> <li>Template synchronization</li> <li>Access management</li> </ol>"},{"location":"getting-started/quick-start/#step-5-verify-results","title":"\ud83d\udcca Step 5: Verify Results","text":"<p>Check that everything worked correctly:</p> <pre><code># List distributed secrets\nclassroom-pilot secrets list --config assignment.conf\n\n# Check repository status\nclassroom-pilot repos fetch --config assignment.conf\n\n# View detailed status\nclassroom-pilot --verbose assignments orchestrate --config assignment.conf --dry-run\n</code></pre>"},{"location":"getting-started/quick-start/#common-workflows","title":"\ud83c\udfaf Common Workflows","text":""},{"location":"getting-started/quick-start/#daily-assignment-management","title":"Daily Assignment Management","text":"<pre><code># Morning workflow: Check and update\nclassroom-pilot assignments orchestrate --config assignment.conf\n</code></pre>"},{"location":"getting-started/quick-start/#emergency-secret-rotation","title":"Emergency Secret Rotation","text":"<pre><code># Remove old secret\nclassroom-pilot secrets remove --config assignment.conf --secrets \"OLD_TOKEN\"\n\n# Add new secret\nNEW_TOKEN=\"new_value\" classroom-pilot secrets add --config assignment.conf --secrets \"NEW_TOKEN\"\n</code></pre>"},{"location":"getting-started/quick-start/#multiple-assignment-processing","title":"Multiple Assignment Processing","text":"<pre><code># Process multiple assignments\nfor config in assignment-*.conf; do\n    echo \"Processing $config...\"\n    classroom-pilot assignments orchestrate --config \"$config\"\ndone\n</code></pre>"},{"location":"getting-started/quick-start/#best-practices","title":"\ud83d\udee1\ufe0f Best Practices","text":""},{"location":"getting-started/quick-start/#security","title":"Security","text":"<ul> <li>Always use <code>--dry-run</code> to preview changes</li> <li>Store tokens securely in files with restricted permissions</li> <li>Use environment variables for sensitive values</li> <li>Regularly rotate API tokens and secrets</li> </ul>"},{"location":"getting-started/quick-start/#configuration","title":"Configuration","text":"<ul> <li>Version control your assignment configurations</li> <li>Use descriptive filenames like <code>midterm-assignment.conf</code></li> <li>Test with single student before batch operations</li> <li>Document custom settings in your assignment README</li> </ul>"},{"location":"getting-started/quick-start/#monitoring","title":"Monitoring","text":"<ul> <li>Use <code>--verbose</code> for debugging issues</li> <li>Check logs regularly for errors</li> <li>Monitor API rate limits with large classrooms</li> <li>Validate results after batch operations</li> </ul>"},{"location":"getting-started/quick-start/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>Authentication Errors: <pre><code># Check token permissions\nclassroom-pilot --verbose repos fetch --config assignment.conf\n</code></pre></p> <p>Repository Not Found: <pre><code># Verify classroom URL format\nclassroom-pilot --dry-run repos fetch --config assignment.conf\n</code></pre></p> <p>Secret Distribution Failures: <pre><code># Test with dry-run first\nclassroom-pilot --dry-run secrets add --config assignment.conf\n</code></pre></p>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>Use <code>--help</code> with any command for detailed usage</li> <li>Check the CLI Reference for complete documentation</li> <li>Enable <code>--verbose</code> mode for detailed error information</li> </ul>"},{"location":"getting-started/quick-start/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ul> <li>Configuration Guide - Advanced configuration options</li> <li>CLI Reference - Complete command documentation  </li> <li>Workflow Automation - Automate your processes</li> <li>Development Guide - Contribute to the project</li> </ul>"},{"location":"workflows/assignment-orchestrator/","title":"Assignment Orchestrator - Workflow Automation","text":"<p>The Assignment Orchestrator provides comprehensive workflow automation for GitHub Classroom assignments through the modern Python CLI interface.</p>"},{"location":"workflows/assignment-orchestrator/#overview","title":"\ud83c\udfaf Overview","text":"<p>The orchestrator automates the complete assignment lifecycle through a single command:</p> <ol> <li>Template Synchronization - Updates GitHub Classroom with latest template changes</li> <li>Repository Discovery - Finds all student repositories from the classroom</li> <li>Secret Management - Distributes/updates secrets across all student repositories</li> <li>Student Assistance - Runs student help and support tools</li> <li>Collaborator Management - Manages repository access and permissions</li> </ol>"},{"location":"workflows/assignment-orchestrator/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code># Install from PyPI\npip install classroom-pilot\n\n# Verify installation\nclassroom-pilot --help\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"workflows/assignment-orchestrator/#1-interactive-setup","title":"1. Interactive Setup","text":"<p>Create assignment configuration interactively:</p> <pre><code># Run interactive setup wizard\nclassroom-pilot assignments setup\n\n# This creates an assignment.conf file with your settings\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#2-complete-workflow-orchestration","title":"2. Complete Workflow Orchestration","text":"<pre><code># Run complete orchestrated workflow\nclassroom-pilot assignments orchestrate --config assignment.conf\n\n# Preview what would be done (dry-run)\nclassroom-pilot --dry-run assignments orchestrate --config assignment.conf\n\n# Run with verbose output for debugging\nclassroom-pilot --verbose assignments orchestrate --config assignment.conf\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"workflows/assignment-orchestrator/#assignment-configuration-file","title":"Assignment Configuration File","text":"<p>The <code>assignment.conf</code> file contains all settings for your assignment:</p> <pre><code># GitHub Classroom Configuration\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/456\"\nTEMPLATE_REPO_URL=\"https://github.com/instructor/assignment-template\"\nASSIGNMENT_FILE=\"homework.py\"\n\n# Authentication\nGITHUB_TOKEN_FILE=\"github_token.txt\"\n\n# Secret Management\nSECRETS_LIST=\"API_KEY,DATABASE_URL,SECRET_TOKEN\"\n\n# Repository Filtering\nEXCLUDE_REPOS=\"template,example,demo\"\nINSTRUCTOR_REPOS=\"instructor-solution\"\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#environment-variable-overrides","title":"Environment Variable Overrides","text":"<p>Override configuration with environment variables:</p> <pre><code># Set custom GitHub hosts\nexport GITHUB_HOSTS=\"github.enterprise.com\"\n\n# Set GitHub token directly\nexport GITHUB_TOKEN=\"ghp_your_token_here\"\n\n# Run orchestrator\nclassroom-pilot assignments orchestrate\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#command-options","title":"\ud83d\udd27 Command Options","text":""},{"location":"workflows/assignment-orchestrator/#basic-usage","title":"Basic Usage","text":"<pre><code># Interactive orchestration with prompts\nclassroom-pilot assignments orchestrate\n\n# Use specific configuration file\nclassroom-pilot assignments orchestrate --config my-assignment.conf\n\n# Preview without executing changes\nclassroom-pilot --dry-run assignments orchestrate\n\n# Enable detailed logging\nclassroom-pilot --verbose assignments orchestrate\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#workflow-components","title":"Workflow Components","text":"<p>The orchestrator runs these components in sequence:</p> <ol> <li>Configuration Validation - Validates all settings and URLs</li> <li>Template Sync - Updates GitHub Classroom template</li> <li>Repository Discovery - Finds student repositories</li> <li>Secret Distribution - Adds/updates repository secrets</li> <li>Access Management - Manages collaborator permissions</li> </ol>"},{"location":"workflows/assignment-orchestrator/#workflow-steps","title":"\ud83d\udd04 Workflow Steps","text":""},{"location":"workflows/assignment-orchestrator/#step-1-assignment-setup","title":"Step 1: Assignment Setup","text":"<pre><code># Create new assignment configuration\nclassroom-pilot assignments setup\n\n# Or manage existing assignment\nclassroom-pilot assignments manage --config assignment.conf\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#step-2-repository-operations","title":"Step 2: Repository Operations","text":"<pre><code># Fetch student repositories\nclassroom-pilot repos fetch --config assignment.conf\n\n# Manage collaborators\nclassroom-pilot repos collaborator add --config assignment.conf\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#step-3-secret-management","title":"Step 3: Secret Management","text":"<pre><code># Add secrets to all repositories\nclassroom-pilot secrets add --config assignment.conf\n\n# List existing secrets\nclassroom-pilot secrets list --config assignment.conf\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#step-4-complete-orchestration","title":"Step 4: Complete Orchestration","text":"<pre><code># Run all steps together\nclassroom-pilot assignments orchestrate --config assignment.conf\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#advanced-features","title":"\ud83c\udfaf Advanced Features","text":""},{"location":"workflows/assignment-orchestrator/#batch-operations","title":"Batch Operations","text":"<p>Process multiple assignments with different configurations:</p> <pre><code># Process multiple assignments\nfor config in assignment-*.conf; do\n    classroom-pilot --verbose assignments orchestrate --config \"$config\"\ndone\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#automation-integration","title":"Automation Integration","text":"<p>Integrate with scheduling systems:</p> <pre><code># Setup automated scheduling\nclassroom-pilot automation scheduler setup --config assignment.conf\n\n# Run batch operations\nclassroom-pilot automation batch --config assignment.conf\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#enterprise-github-support","title":"Enterprise GitHub Support","text":"<p>Configure for GitHub Enterprise or custom hosts:</p> <pre><code># Set enterprise hosts in configuration\nGITHUB_HOSTS=\"github.enterprise.com,git.company.internal\"\n\n# Or via environment variable\nexport GITHUB_HOSTS=\"github.enterprise.com\"\nclassroom-pilot assignments orchestrate\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#security-best-practices","title":"\ud83d\udee1\ufe0f Security &amp; Best Practices","text":""},{"location":"workflows/assignment-orchestrator/#token-management","title":"Token Management","text":"<ul> <li>Store tokens securely using <code>GITHUB_TOKEN_FILE</code></li> <li>Use environment variables for sensitive information</li> <li>Regularly rotate API tokens</li> <li>Limit token permissions to required scopes</li> </ul>"},{"location":"workflows/assignment-orchestrator/#repository-access","title":"Repository Access","text":"<ul> <li>Use <code>--dry-run</code> to preview changes before execution</li> <li>Configure repository filtering to exclude instructor repos</li> <li>Monitor access logs for unauthorized changes</li> <li>Implement proper backup procedures</li> </ul>"},{"location":"workflows/assignment-orchestrator/#configuration-security","title":"Configuration Security","text":"<pre><code># Secure configuration file permissions\nchmod 600 assignment.conf\n\n# Use environment variables for sensitive data\nexport GITHUB_TOKEN=\"$(cat secure_token.txt)\"\nclassroom-pilot assignments orchestrate --config assignment.conf\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"workflows/assignment-orchestrator/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Authentication Errors:    <pre><code># Verify token permissions\nclassroom-pilot --verbose assignments orchestrate\n</code></pre></p> </li> <li> <p>Repository Not Found:    <pre><code># Check URL format and access\nclassroom-pilot repos fetch --config assignment.conf --verbose\n</code></pre></p> </li> <li> <p>Secret Distribution Failures:    <pre><code># Test with single repository first\nclassroom-pilot --dry-run secrets add --config assignment.conf\n</code></pre></p> </li> </ol>"},{"location":"workflows/assignment-orchestrator/#debug-mode","title":"Debug Mode","text":"<p>Enable comprehensive logging for troubleshooting:</p> <pre><code># Maximum verbosity\nclassroom-pilot --verbose assignments orchestrate --config assignment.conf\n\n# Dry-run with detailed output\nclassroom-pilot --dry-run --verbose assignments orchestrate --config assignment.conf\n</code></pre>"},{"location":"workflows/assignment-orchestrator/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Main CLI Reference - Complete command documentation</li> <li>Secrets Management - Detailed secret handling guide</li> <li>Repository Operations - Repository management commands</li> <li>Configuration Guide - Configuration file setup</li> </ul> <p>The Assignment Orchestrator provides a comprehensive, automated solution for managing GitHub Classroom assignments through the modern Python CLI interface.</p>"},{"location":"workflows/automation-suite/","title":"Automation Suite - Comprehensive GitHub Classroom Management","text":"<p>This document describes the complete automation suite for managing GitHub Classroom assignments through the modern Python CLI interface.</p>"},{"location":"workflows/automation-suite/#overview","title":"\ud83c\udfaf Overview","text":"<p>The automation suite provides instructors with powerful tools to:</p> <ul> <li>Automated Repository Discovery - Find student repositories from GitHub Classroom</li> <li>Batch Secret Management - Distribute secrets across multiple repositories</li> <li>Student Assistance Tools - Help students with repository issues and conflicts</li> <li>Permission Management - Fix access issues through intelligent permission cycling</li> <li>Template Synchronization - Keep assignment templates updated across classrooms</li> <li>Scheduling &amp; Automation - Set up automated workflows with cron jobs</li> </ul>"},{"location":"workflows/automation-suite/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code># Install from PyPI\npip install classroom-pilot\n\n# Verify installation\nclassroom-pilot --help\n</code></pre>"},{"location":"workflows/automation-suite/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"workflows/automation-suite/#1-setup-assignment-configuration","title":"1. Setup Assignment Configuration","text":"<pre><code># Interactive setup wizard\nclassroom-pilot assignments setup\n\n# This creates assignment.conf with your settings\n</code></pre>"},{"location":"workflows/automation-suite/#2-repository-discovery","title":"2. Repository Discovery","text":"<pre><code># Discover all student repositories\nclassroom-pilot repos fetch --config assignment.conf\n\n# Fetch with filtering\nclassroom-pilot repos fetch --config assignment.conf --exclude \"template,demo\"\n</code></pre>"},{"location":"workflows/automation-suite/#3-secret-management","title":"3. Secret Management","text":"<pre><code># Add secrets to all student repositories\nclassroom-pilot secrets add --config assignment.conf\n\n# Remove secrets from repositories\nclassroom-pilot secrets remove --config assignment.conf --secrets \"OLD_TOKEN\"\n\n# List existing secrets\nclassroom-pilot secrets list --config assignment.conf\n</code></pre>"},{"location":"workflows/automation-suite/#4-complete-automation-workflow","title":"4. Complete Automation Workflow","text":"<pre><code># Run complete automated workflow\nclassroom-pilot assignments orchestrate --config assignment.conf\n\n# Preview changes first\nclassroom-pilot --dry-run assignments orchestrate --config assignment.conf\n</code></pre>"},{"location":"workflows/automation-suite/#automation-commands","title":"\ud83d\udd27 Automation Commands","text":""},{"location":"workflows/automation-suite/#assignment-management","title":"Assignment Management","text":"<pre><code># Setup new assignment\nclassroom-pilot assignments setup\n\n# Orchestrate complete workflow\nclassroom-pilot assignments orchestrate [OPTIONS]\n\n# Manage assignment templates\nclassroom-pilot assignments manage [OPTIONS]\n</code></pre>"},{"location":"workflows/automation-suite/#repository-operations","title":"Repository Operations","text":"<pre><code># Fetch student repositories\nclassroom-pilot repos fetch [OPTIONS]\n\n# Add collaborators to repositories\nclassroom-pilot repos collaborator add [OPTIONS]\n\n# Remove collaborators from repositories\nclassroom-pilot repos collaborator remove [OPTIONS]\n</code></pre>"},{"location":"workflows/automation-suite/#secret-management","title":"Secret Management","text":"<pre><code># Add secrets to repositories\nclassroom-pilot secrets add [OPTIONS]\n\n# Remove secrets from repositories\nclassroom-pilot secrets remove [OPTIONS]\n\n# List secrets in repositories\nclassroom-pilot secrets list [OPTIONS]\n</code></pre>"},{"location":"workflows/automation-suite/#automation-scheduling","title":"Automation &amp; Scheduling","text":"<pre><code># Setup automated scheduling\nclassroom-pilot automation scheduler setup [OPTIONS]\n\n# Run batch operations\nclassroom-pilot automation batch [OPTIONS]\n</code></pre>"},{"location":"workflows/automation-suite/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"workflows/automation-suite/#assignment-configuration-file","title":"Assignment Configuration File","text":"<p>Create <code>assignment.conf</code> with your assignment settings:</p> <pre><code># GitHub Classroom Configuration\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/456\"\nTEMPLATE_REPO_URL=\"https://github.com/instructor/assignment-template\"\nASSIGNMENT_FILE=\"homework.py\"\n\n# Authentication\nGITHUB_TOKEN_FILE=\"github_token.txt\"\n\n# Secret Management\nSECRETS_LIST=\"API_KEY,DATABASE_URL,GRADING_TOKEN\"\n\n# Repository Filtering\nEXCLUDE_REPOS=\"template,example,demo,instructor-solution\"\nINSTRUCTOR_REPOS=\"instructor-*\"\n\n# GitHub Enterprise Support (optional)\nGITHUB_HOSTS=\"github.enterprise.com\"\n</code></pre>"},{"location":"workflows/automation-suite/#environment-variables","title":"Environment Variables","text":"<p>Override configuration with environment variables:</p> <pre><code># GitHub token\nexport GITHUB_TOKEN=\"ghp_your_token_here\"\n\n# Custom GitHub hosts\nexport GITHUB_HOSTS=\"github.enterprise.com,git.company.internal\"\n\n# Assignment file override\nexport ASSIGNMENT_FILE=\"main.cpp\"\n\n# Run commands with overrides\nclassroom-pilot assignments orchestrate\n</code></pre>"},{"location":"workflows/automation-suite/#advanced-automation","title":"\ud83c\udfaf Advanced Automation","text":""},{"location":"workflows/automation-suite/#batch-processing","title":"Batch Processing","text":"<p>Process multiple assignments with automation:</p> <pre><code># Process multiple assignment configurations\nfor config in assignment-*.conf; do\n    echo \"Processing $config...\"\n    classroom-pilot --verbose assignments orchestrate --config \"$config\"\ndone\n</code></pre>"},{"location":"workflows/automation-suite/#scheduled-automation","title":"Scheduled Automation","text":"<p>Set up automated workflows with cron:</p> <pre><code># Setup automated scheduling\nclassroom-pilot automation scheduler setup --config assignment.conf\n\n# This creates cron jobs for:\n# - Regular repository sync\n# - Secret updates\n# - Student assistance checks\n</code></pre>"},{"location":"workflows/automation-suite/#enterprise-integration","title":"Enterprise Integration","text":"<p>Configure for enterprise GitHub environments:</p> <pre><code># Enterprise configuration\nGITHUB_HOSTS=\"github.enterprise.com,git.company.internal\"\nGITHUB_TOKEN_FILE=\"enterprise_token.txt\"\n\n# Run with enterprise settings\nclassroom-pilot assignments orchestrate --config enterprise-assignment.conf\n</code></pre>"},{"location":"workflows/automation-suite/#security-best-practices","title":"\ud83d\udee1\ufe0f Security &amp; Best Practices","text":""},{"location":"workflows/automation-suite/#token-management","title":"Token Management","text":"<pre><code># Secure token storage\necho \"ghp_your_token_here\" &gt; github_token.txt\nchmod 600 github_token.txt\n\n# Use token file in configuration\nGITHUB_TOKEN_FILE=\"github_token.txt\"\n</code></pre>"},{"location":"workflows/automation-suite/#repository-filtering","title":"Repository Filtering","text":"<pre><code># Exclude instructor and template repositories\nEXCLUDE_REPOS=\"template,instructor-solution,demo,example\"\n\n# Include only specific patterns\nINSTRUCTOR_REPOS=\"instructor-*,solution-*\"\n</code></pre>"},{"location":"workflows/automation-suite/#dry-run-testing","title":"Dry-Run Testing","text":"<p>Always test changes before applying:</p> <pre><code># Preview all changes\nclassroom-pilot --dry-run assignments orchestrate --config assignment.conf\n\n# Preview specific operations\nclassroom-pilot --dry-run secrets add --config assignment.conf\nclassroom-pilot --dry-run repos fetch --config assignment.conf\n</code></pre>"},{"location":"workflows/automation-suite/#monitoring-logging","title":"\ud83d\udcca Monitoring &amp; Logging","text":""},{"location":"workflows/automation-suite/#verbose-output","title":"Verbose Output","text":"<p>Enable detailed logging for monitoring:</p> <pre><code># Verbose mode for debugging\nclassroom-pilot --verbose assignments orchestrate --config assignment.conf\n\n# Combine with dry-run for detailed preview\nclassroom-pilot --dry-run --verbose assignments orchestrate --config assignment.conf\n</code></pre>"},{"location":"workflows/automation-suite/#log-analysis","title":"Log Analysis","text":"<p>Monitor automation workflows:</p> <pre><code># Check recent automation runs\nclassroom-pilot automation batch --config assignment.conf --verbose\n\n# Review scheduled task logs\nclassroom-pilot automation scheduler status --config assignment.conf\n</code></pre>"},{"location":"workflows/automation-suite/#workflow-examples","title":"\ud83d\udd04 Workflow Examples","text":""},{"location":"workflows/automation-suite/#weekly-assignment-update","title":"Weekly Assignment Update","text":"<pre><code>#!/bin/bash\n# Weekly automation workflow\n\nCONFIG=\"assignment.conf\"\n\necho \"Starting weekly assignment update...\"\n\n# 1. Sync template changes\nclassroom-pilot assignments manage --config \"$CONFIG\"\n\n# 2. Update secrets if needed\nclassroom-pilot secrets add --config \"$CONFIG\"\n\n# 3. Check student repositories\nclassroom-pilot repos fetch --config \"$CONFIG\"\n\n# 4. Run complete orchestration\nclassroom-pilot assignments orchestrate --config \"$CONFIG\"\n\necho \"Weekly update complete!\"\n</code></pre>"},{"location":"workflows/automation-suite/#emergency-secret-rotation","title":"Emergency Secret Rotation","text":"<pre><code>#!/bin/bash\n# Emergency secret rotation\n\nCONFIG=\"assignment.conf\"\nOLD_SECRET=\"COMPROMISED_TOKEN\"\nNEW_SECRET=\"NEW_SECURE_TOKEN\"\n\necho \"Starting emergency secret rotation...\"\n\n# 1. Remove old secret\nclassroom-pilot secrets remove --config \"$CONFIG\" --secrets \"$OLD_SECRET\"\n\n# 2. Add new secret\nSECRETS_LIST=\"$NEW_SECRET\" classroom-pilot secrets add --config \"$CONFIG\"\n\necho \"Secret rotation complete!\"\n</code></pre>"},{"location":"workflows/automation-suite/#midterm-repository-preparation","title":"Midterm Repository Preparation","text":"<pre><code>#!/bin/bash\n# Midterm repository preparation\n\necho \"Preparing repositories for midterm...\"\n\n# 1. Create midterm configuration\nclassroom-pilot assignments setup\n\n# 2. Discover all student repositories\nclassroom-pilot repos fetch --config midterm-assignment.conf\n\n# 3. Add grading tokens\nclassroom-pilot secrets add --config midterm-assignment.conf\n\n# 4. Set up automated grading\nclassroom-pilot automation scheduler setup --config midterm-assignment.conf\n\necho \"Midterm preparation complete!\"\n</code></pre>"},{"location":"workflows/automation-suite/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"workflows/automation-suite/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Authentication Failures:    <pre><code># Check token permissions\nclassroom-pilot --verbose repos fetch --config assignment.conf\n</code></pre></p> </li> <li> <p>Repository Discovery Issues:    <pre><code># Verify classroom URL format\nclassroom-pilot --dry-run repos fetch --config assignment.conf\n</code></pre></p> </li> <li> <p>Secret Management Errors:    <pre><code># Test with single repository\nclassroom-pilot --verbose secrets add --config assignment.conf\n</code></pre></p> </li> </ol>"},{"location":"workflows/automation-suite/#debug-mode","title":"Debug Mode","text":"<pre><code># Maximum debugging information\nclassroom-pilot --verbose --dry-run assignments orchestrate --config assignment.conf\n</code></pre>"},{"location":"workflows/automation-suite/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Assignment Orchestrator - Complete workflow automation</li> <li>Secrets Management - Detailed secret handling</li> <li>Cron Automation - Scheduled task automation</li> <li>Main CLI Reference - Complete command documentation</li> </ul> <p>The Automation Suite provides comprehensive tools for efficient GitHub Classroom management through modern Python CLI commands.</p>"},{"location":"workflows/classroom-url-integration/","title":"GitHub Classroom URL Integration","text":""},{"location":"workflows/classroom-url-integration/#overview","title":"\ud83c\udfaf Overview","text":"<p>Classroom Pilot provides seamless integration with GitHub Classroom URLs, making it convenient to manage classroom assignments directly from the GitHub Classroom interface.</p>"},{"location":"workflows/classroom-url-integration/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code># Install from PyPI\npip install classroom-pilot\n\n# Verify installation\nclassroom-pilot --help\n</code></pre>"},{"location":"workflows/classroom-url-integration/#classroom-url-integration","title":"\ud83d\ude80 Classroom URL Integration","text":""},{"location":"workflows/classroom-url-integration/#direct-url-usage","title":"Direct URL Usage","text":"<p>Use GitHub Classroom URLs directly in your configuration:</p> <pre><code># GitHub Classroom Configuration\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/cs6600-homework1\"\nTEMPLATE_REPO_URL=\"https://github.com/instructor/cs6600-homework1-template\"\nASSIGNMENT_FILE=\"homework.py\"\n</code></pre>"},{"location":"workflows/classroom-url-integration/#url-parsing-and-assignment-detection","title":"URL Parsing and Assignment Detection","text":"<p>The CLI automatically extracts assignment information from classroom URLs:</p> <ul> <li>Input URL: <code>https://classroom.github.com/classrooms/123/assignments/cs6600-homework1</code></li> <li>Extracted Assignment: <code>cs6600-homework1</code></li> <li>Search Pattern: <code>cs6600-homework1-*</code> (for student repositories)</li> </ul>"},{"location":"workflows/classroom-url-integration/#command-integration","title":"\ud83d\udd27 Command Integration","text":""},{"location":"workflows/classroom-url-integration/#repository-discovery","title":"Repository Discovery","text":"<pre><code># Fetch repositories using classroom URL\nclassroom-pilot repos fetch --config assignment.conf\n\n# The CLI automatically:\n# 1. Parses the CLASSROOM_URL from configuration\n# 2. Extracts assignment name\n# 3. Searches for matching student repositories\n</code></pre>"},{"location":"workflows/classroom-url-integration/#assignment-setup","title":"Assignment Setup","text":"<pre><code># Interactive setup with classroom URL\nclassroom-pilot assignments setup\n\n# The wizard will prompt for:\n# - GitHub Classroom URL\n# - Template repository URL\n# - Assignment file name\n# - Secret requirements\n</code></pre>"},{"location":"workflows/classroom-url-integration/#complete-workflow","title":"Complete Workflow","text":"<pre><code># Run complete workflow with classroom URL integration\nclassroom-pilot assignments orchestrate --config assignment.conf\n\n# This automatically:\n# 1. Validates classroom URL format\n# 2. Discovers student repositories\n# 3. Manages secrets and permissions\n# 4. Synchronizes templates\n</code></pre>"},{"location":"workflows/classroom-url-integration/#configuration-examples","title":"\u2699\ufe0f Configuration Examples","text":""},{"location":"workflows/classroom-url-integration/#basic-assignment-configuration","title":"Basic Assignment Configuration","text":"<pre><code># assignment.conf\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/206604610/assignments/cs6600-m1-homework1\"\nTEMPLATE_REPO_URL=\"https://github.com/wsu-ml-dl/cs6600-m1-homework1-template\"\nASSIGNMENT_FILE=\"homework1.py\"\nGITHUB_TOKEN_FILE=\"github_token.txt\"\nSECRETS_LIST=\"API_KEY,GRADING_TOKEN\"\n</code></pre>"},{"location":"workflows/classroom-url-integration/#multiple-assignment-management","title":"Multiple Assignment Management","text":"<pre><code># assignment-hw1.conf\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/homework1\"\nTEMPLATE_REPO_URL=\"https://github.com/instructor/homework1-template\"\n\n# assignment-hw2.conf  \nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/homework2\"\nTEMPLATE_REPO_URL=\"https://github.com/instructor/homework2-template\"\n\n# Process multiple assignments\nfor config in assignment-*.conf; do\n    classroom-pilot assignments orchestrate --config \"$config\"\ndone\n</code></pre>"},{"location":"workflows/classroom-url-integration/#enterprise-github-classroom","title":"Enterprise GitHub Classroom","text":"<pre><code># enterprise-assignment.conf\nCLASSROOM_URL=\"https://github.enterprise.com/classrooms/456/assignments/project1\"\nTEMPLATE_REPO_URL=\"https://github.enterprise.com/department/project1-template\"\nGITHUB_HOSTS=\"github.enterprise.com\"\nGITHUB_TOKEN_FILE=\"enterprise_token.txt\"\n</code></pre>"},{"location":"workflows/classroom-url-integration/#advanced-url-features","title":"\ud83c\udfaf Advanced URL Features","text":""},{"location":"workflows/classroom-url-integration/#url-validation","title":"URL Validation","text":"<p>The CLI performs comprehensive URL validation:</p> <pre><code># Valid classroom URL patterns:\n# https://classroom.github.com/classrooms/{id}/assignments/{name}\n# https://github.enterprise.com/classrooms/{id}/assignments/{name}\n\n# Automatic validation during setup\nclassroom-pilot assignments setup\n\n# Manual validation\nclassroom-pilot --dry-run repos fetch --config assignment.conf\n</code></pre>"},{"location":"workflows/classroom-url-integration/#assignment-name-extraction","title":"Assignment Name Extraction","text":"<p>Automatic assignment name extraction supports various patterns:</p> <pre><code># Standard assignment names\ncs6600-homework1                    # \u2192 cs6600-homework1-*\nfinal-project                       # \u2192 final-project-*\nmidterm-exam-2024                  # \u2192 midterm-exam-2024-*\n\n# Special characters handled\ndata-structures-hw_1               # \u2192 data-structures-hw_1-*\nml-assignment.part2                # \u2192 ml-assignment.part2-*\n</code></pre>"},{"location":"workflows/classroom-url-integration/#repository-pattern-matching","title":"Repository Pattern Matching","text":"<p>The CLI intelligently matches student repositories:</p> <pre><code># From assignment \"cs6600-homework1\", finds:\ncs6600-homework1-student1          # \u2705 Match\ncs6600-homework1-student2          # \u2705 Match\ncs6600-homework1-template          # \u274c Excluded (template)\ncs6600-homework1-instructor        # \u274c Excluded (instructor)\ndifferent-assignment-student1      # \u274c No match\n</code></pre>"},{"location":"workflows/classroom-url-integration/#workflow-integration","title":"\ud83d\udee0\ufe0f Workflow Integration","text":""},{"location":"workflows/classroom-url-integration/#complete-assignment-lifecycle","title":"Complete Assignment Lifecycle","text":"<pre><code># 1. Setup assignment with classroom URL\nclassroom-pilot assignments setup\n# Enter classroom URL when prompted\n\n# 2. Validate configuration\nclassroom-pilot --dry-run assignments orchestrate --config assignment.conf\n\n# 3. Execute complete workflow\nclassroom-pilot assignments orchestrate --config assignment.conf\n</code></pre>"},{"location":"workflows/classroom-url-integration/#batch-classroom-management","title":"Batch Classroom Management","text":"<pre><code>#!/bin/bash\n# Manage multiple classroom assignments\n\nCLASSROOM_URLS=(\n    \"https://classroom.github.com/classrooms/123/assignments/hw1\"\n    \"https://classroom.github.com/classrooms/123/assignments/hw2\"\n    \"https://classroom.github.com/classrooms/123/assignments/final\"\n)\n\nfor url in \"${CLASSROOM_URLS[@]}\"; do\n    echo \"Processing classroom: $url\"\n\n    # Create temporary config\n    cat &gt; temp-config.conf &lt;&lt; EOF\nCLASSROOM_URL=\"$url\"\nTEMPLATE_REPO_URL=\"https://github.com/instructor/template\"\nASSIGNMENT_FILE=\"main.py\"\nGITHUB_TOKEN_FILE=\"github_token.txt\"\nEOF\n\n    # Process assignment\n    classroom-pilot assignments orchestrate --config temp-config.conf\n\n    # Cleanup\n    rm temp-config.conf\ndone\n</code></pre>"},{"location":"workflows/classroom-url-integration/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"workflows/classroom-url-integration/#url-format-issues","title":"URL Format Issues","text":"<pre><code># Check URL format\nclassroom-pilot --verbose repos fetch --config assignment.conf\n\n# Common issues:\n# \u274c Missing /assignments/ in URL\n# \u274c Incorrect classroom ID\n# \u274c Special characters in assignment name\n# \u274c Wrong GitHub host (enterprise vs public)\n</code></pre>"},{"location":"workflows/classroom-url-integration/#repository-discovery-problems","title":"Repository Discovery Problems","text":"<pre><code># Debug repository discovery\nclassroom-pilot --dry-run --verbose repos fetch --config assignment.conf\n\n# Check:\n# 1. Assignment name extraction\n# 2. Repository search patterns\n# 3. Access permissions\n# 4. Repository filtering rules\n</code></pre>"},{"location":"workflows/classroom-url-integration/#authentication-issues","title":"Authentication Issues","text":"<pre><code># Verify GitHub authentication\nclassroom-pilot --verbose assignments orchestrate --config assignment.conf\n\n# Check:\n# 1. Token permissions\n# 2. Organization access\n# 3. Classroom membership\n# 4. Repository visibility\n</code></pre>"},{"location":"workflows/classroom-url-integration/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Main CLI Reference - Complete command documentation</li> <li>Assignment Orchestrator - Workflow automation</li> <li>Repository Operations - Repository management</li> <li>Configuration Guide - Configuration setup</li> </ul>"},{"location":"workflows/classroom-url-integration/#tips-best-practices","title":"\ud83d\udca1 Tips &amp; Best Practices","text":""},{"location":"workflows/classroom-url-integration/#url-management","title":"URL Management","text":"<ul> <li>Use consistent naming: Keep assignment names consistent across semesters</li> <li>Validate URLs early: Use <code>--dry-run</code> to catch URL issues before execution</li> <li>Document patterns: Maintain documentation of URL patterns for your organization</li> </ul>"},{"location":"workflows/classroom-url-integration/#automation-integration","title":"Automation Integration","text":"<ul> <li>Store URLs in configs: Keep classroom URLs in version-controlled configuration files</li> <li>Use environment variables: Override URLs for different environments (dev/staging/prod)</li> <li>Batch processing: Process multiple classroom assignments efficiently</li> </ul>"},{"location":"workflows/classroom-url-integration/#security-considerations","title":"Security Considerations","text":"<ul> <li>Verify permissions: Ensure tokens have appropriate classroom access</li> <li>Monitor access: Track repository access and modifications</li> <li>Audit regularly: Review classroom integrations and permissions</li> </ul> <p>GitHub Classroom URL integration makes managing assignments seamless and efficient through the modern Python CLI interface.</p>"},{"location":"workflows/cron-automation/","title":"Cron Automation - Scheduled GitHub Classroom Management","text":""},{"location":"workflows/cron-automation/#overview","title":"\ud83c\udfaf Overview","text":"<p>Classroom Pilot provides comprehensive automation capabilities for scheduling GitHub Classroom management tasks. Set up automated workflows that run unattended to keep your assignments synchronized and students supported.</p>"},{"location":"workflows/cron-automation/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code># Install from PyPI\npip install classroom-pilot\n\n# Verify installation\nclassroom-pilot --help\n</code></pre>"},{"location":"workflows/cron-automation/#automation-features","title":"\ud83d\ude80 Automation Features","text":""},{"location":"workflows/cron-automation/#flexible-scheduling","title":"Flexible Scheduling","text":"<ul> <li>Individual Tasks: Schedule each workflow component independently</li> <li>Combined Workflows: Run multiple tasks in coordinated sequences</li> <li>Custom Schedules: Configure timing based on your teaching schedule</li> <li>Intelligent Defaults: Pre-configured schedules optimized for common patterns</li> </ul>"},{"location":"workflows/cron-automation/#automated-tasks","title":"Automated Tasks","text":"<ul> <li>Assignment Orchestration: Complete workflow automation</li> <li>Repository Synchronization: Keep templates updated</li> <li>Secret Management: Distribute and rotate tokens</li> <li>Student Assistance: Automated help and conflict resolution</li> <li>Permission Management: Fix repository access issues</li> </ul>"},{"location":"workflows/cron-automation/#monitoring-logging","title":"Monitoring &amp; Logging","text":"<ul> <li>Comprehensive Logging: Detailed logs for all automated tasks</li> <li>Status Monitoring: Check automation status and health</li> <li>Error Tracking: Automated error reporting and alerting</li> <li>Log Rotation: Automatic log management and cleanup</li> </ul>"},{"location":"workflows/cron-automation/#setup-automation","title":"\ud83d\udd27 Setup Automation","text":""},{"location":"workflows/cron-automation/#1-configure-assignment","title":"1. Configure Assignment","text":"<pre><code># Create assignment configuration\nclassroom-pilot assignments setup\n\n# This creates assignment.conf with your settings\n</code></pre>"},{"location":"workflows/cron-automation/#2-setup-scheduler","title":"2. Setup Scheduler","text":"<pre><code># Setup automated scheduling\nclassroom-pilot automation scheduler setup --config assignment.conf\n\n# This configures cron jobs for:\n# - Regular assignment orchestration\n# - Template synchronization\n# - Secret management\n# - Repository monitoring\n</code></pre>"},{"location":"workflows/cron-automation/#3-verify-automation","title":"3. Verify Automation","text":"<pre><code># Check scheduled tasks\nclassroom-pilot automation scheduler status\n\n# View automation logs\nclassroom-pilot automation scheduler logs\n</code></pre>"},{"location":"workflows/cron-automation/#automation-commands","title":"\u2699\ufe0f Automation Commands","text":""},{"location":"workflows/cron-automation/#scheduler-management","title":"Scheduler Management","text":"<pre><code># Setup automated scheduling\nclassroom-pilot automation scheduler setup [--config FILE]\n\n# Check scheduler status\nclassroom-pilot automation scheduler status\n\n# View scheduler logs\nclassroom-pilot automation scheduler logs\n\n# Disable scheduling\nclassroom-pilot automation scheduler disable\n\n# Re-enable scheduling\nclassroom-pilot automation scheduler enable\n</code></pre>"},{"location":"workflows/cron-automation/#batch-operations","title":"Batch Operations","text":"<pre><code># Run batch operations\nclassroom-pilot automation batch [--config FILE]\n\n# Run specific batch tasks\nclassroom-pilot automation batch --tasks \"secrets,repos\" [--config FILE]\n\n# Schedule batch operations\nclassroom-pilot automation batch --schedule \"0 */6 * * *\" [--config FILE]\n</code></pre>"},{"location":"workflows/cron-automation/#scheduling-patterns","title":"\ud83d\udcc5 Scheduling Patterns","text":""},{"location":"workflows/cron-automation/#default-schedules","title":"Default Schedules","text":"<p>The automation system includes optimized default schedules:</p> <pre><code># Assignment orchestration: Daily at 2 AM\n0 2 * * *\n\n# Template synchronization: Every 4 hours\n0 */4 * * *\n\n# Secret management: Weekly on Sunday at 3 AM\n0 3 * * 0\n\n# Repository monitoring: Every 2 hours during business hours\n0 9-17/2 * * 1-5\n\n# Student assistance: Hourly during class days\n0 * * * 1-5\n</code></pre>"},{"location":"workflows/cron-automation/#custom-schedules","title":"Custom Schedules","text":"<p>Configure custom schedules for your specific needs:</p> <pre><code># Custom schedule configuration in assignment.conf\nAUTOMATION_SCHEDULE_ORCHESTRATE=\"0 1 * * *\"     # Daily at 1 AM\nAUTOMATION_SCHEDULE_SYNC=\"0 */2 * * *\"          # Every 2 hours\nAUTOMATION_SCHEDULE_SECRETS=\"0 4 * * 1\"         # Monday at 4 AM\nAUTOMATION_SCHEDULE_MONITOR=\"*/30 9-17 * * 1-5\" # Every 30 min during business hours\n</code></pre>"},{"location":"workflows/cron-automation/#academic-calendar-integration","title":"Academic Calendar Integration","text":"<p>Align automation with your academic schedule:</p> <pre><code># Semester start: Increased frequency\nAUTOMATION_SCHEDULE_SEMESTER_START=\"*/15 * * * *\"  # Every 15 minutes\n\n# Regular semester: Standard frequency  \nAUTOMATION_SCHEDULE_REGULAR=\"0 */4 * * *\"          # Every 4 hours\n\n# Finals week: Monitoring focus\nAUTOMATION_SCHEDULE_FINALS=\"0 */2 * * *\"           # Every 2 hours\n\n# Semester end: Reduced frequency\nAUTOMATION_SCHEDULE_END=\"0 6 * * *\"                # Daily at 6 AM\n</code></pre>"},{"location":"workflows/cron-automation/#workflow-automation","title":"\ud83d\udd04 Workflow Automation","text":""},{"location":"workflows/cron-automation/#complete-assignment-automation","title":"Complete Assignment Automation","text":"<pre><code># Setup comprehensive automation\ncat &gt; automation-assignment.conf &lt;&lt; 'EOF'\n# Assignment Configuration\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/homework1\"\nTEMPLATE_REPO_URL=\"https://github.com/instructor/homework1-template\"\nASSIGNMENT_FILE=\"homework1.py\"\nGITHUB_TOKEN_FILE=\"github_token.txt\"\nSECRETS_LIST=\"API_KEY,GRADING_TOKEN\"\n\n# Automation Schedules\nAUTOMATION_SCHEDULE_ORCHESTRATE=\"0 2 * * *\"      # Daily at 2 AM\nAUTOMATION_SCHEDULE_SYNC=\"0 */6 * * *\"           # Every 6 hours\nAUTOMATION_SCHEDULE_SECRETS=\"0 3 * * 1\"          # Monday at 3 AM\nAUTOMATION_SCHEDULE_MONITOR=\"0 9-17/2 * * 1-5\"   # Business hours monitoring\nEOF\n\n# Setup automation\nclassroom-pilot automation scheduler setup --config automation-assignment.conf\n</code></pre>"},{"location":"workflows/cron-automation/#midterm-exam-automation","title":"Midterm Exam Automation","text":"<pre><code># High-frequency monitoring for exam period\ncat &gt; midterm-automation.conf &lt;&lt; 'EOF'\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/midterm\"\nTEMPLATE_REPO_URL=\"https://github.com/instructor/midterm-template\"\n\n# Intensive monitoring during exam\nAUTOMATION_SCHEDULE_MONITOR=\"*/10 8-20 * * *\"     # Every 10 minutes, 8 AM - 8 PM\nAUTOMATION_SCHEDULE_ASSISTANCE=\"*/5 8-20 * * *\"   # Every 5 minutes during exam\nAUTOMATION_SCHEDULE_SYNC=\"0 */1 * * *\"            # Hourly sync\nEOF\n\nclassroom-pilot automation scheduler setup --config midterm-automation.conf\n</code></pre>"},{"location":"workflows/cron-automation/#semester-end-automation","title":"Semester-End Automation","text":"<pre><code># Reduced automation for semester end\ncat &gt; semester-end-automation.conf &lt;&lt; 'EOF'\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/final-project\"\n\n# Minimal automation\nAUTOMATION_SCHEDULE_ORCHESTRATE=\"0 6 * * *\"       # Daily at 6 AM\nAUTOMATION_SCHEDULE_BACKUP=\"0 0 * * 0\"            # Weekly backup\nAUTOMATION_SCHEDULE_CLEANUP=\"0 1 * * 0\"           # Weekly cleanup\nEOF\n\nclassroom-pilot automation scheduler setup --config semester-end-automation.conf\n</code></pre>"},{"location":"workflows/cron-automation/#monitoring-management","title":"\ud83d\udcca Monitoring &amp; Management","text":""},{"location":"workflows/cron-automation/#status-monitoring","title":"Status Monitoring","text":"<pre><code># Check all automation status\nclassroom-pilot automation scheduler status\n\n# View active cron jobs\ncrontab -l | grep classroom-pilot\n\n# Check automation health\nclassroom-pilot automation scheduler health\n</code></pre>"},{"location":"workflows/cron-automation/#log-management","title":"Log Management","text":"<pre><code># View automation logs\nclassroom-pilot automation scheduler logs\n\n# View specific task logs\nclassroom-pilot automation scheduler logs --task orchestrate\n\n# Tail live logs\nclassroom-pilot automation scheduler logs --follow\n\n# Rotate logs manually\nclassroom-pilot automation scheduler logs --rotate\n</code></pre>"},{"location":"workflows/cron-automation/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Check automation performance\nclassroom-pilot automation scheduler metrics\n\n# View task execution times\nclassroom-pilot automation scheduler metrics --task-times\n\n# Monitor resource usage\nclassroom-pilot automation scheduler metrics --resources\n</code></pre>"},{"location":"workflows/cron-automation/#security-best-practices","title":"\ud83d\udee1\ufe0f Security &amp; Best Practices","text":""},{"location":"workflows/cron-automation/#token-management","title":"Token Management","text":"<pre><code># Secure token storage for automation\necho \"ghp_your_automation_token\" &gt; automation_token.txt\nchmod 600 automation_token.txt\n\n# Use dedicated automation token\nGITHUB_TOKEN_FILE=\"automation_token.txt\"\n</code></pre>"},{"location":"workflows/cron-automation/#access-control","title":"Access Control","text":"<pre><code># Limit automation token permissions\n# Required scopes:\n# - repo (for repository access)\n# - admin:org (for organization management)\n# - write:org (for secret management)\n\n# Avoid overly broad permissions\n# Never use personal access tokens for automation\n</code></pre>"},{"location":"workflows/cron-automation/#error-handling","title":"Error Handling","text":"<pre><code># Configure error notifications\nAUTOMATION_ERROR_EMAIL=\"instructor@university.edu\"\nAUTOMATION_ERROR_SLACK_WEBHOOK=\"https://hooks.slack.com/...\"\n\n# Setup automated alerting\nclassroom-pilot automation scheduler setup --config assignment.conf --alerts\n</code></pre>"},{"location":"workflows/cron-automation/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"workflows/cron-automation/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Cron Jobs Not Running:    <pre><code># Check cron service status\nsystemctl status cron\n\n# Verify cron job syntax\nclassroom-pilot automation scheduler validate\n</code></pre></p> </li> <li> <p>Authentication Failures:    <pre><code># Check token permissions\nclassroom-pilot --verbose automation batch --config assignment.conf\n</code></pre></p> </li> <li> <p>Schedule Conflicts:    <pre><code># Review active schedules\nclassroom-pilot automation scheduler status --detailed\n</code></pre></p> </li> </ol>"},{"location":"workflows/cron-automation/#debug-mode","title":"Debug Mode","text":"<pre><code># Run automation in debug mode\nclassroom-pilot --verbose automation batch --config assignment.conf\n\n# Test automation without scheduling\nclassroom-pilot --dry-run automation scheduler setup --config assignment.conf\n</code></pre>"},{"location":"workflows/cron-automation/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Automation Suite - Complete automation capabilities</li> <li>Assignment Orchestrator - Workflow automation</li> <li>Secrets Management - Automated secret handling</li> <li>Main CLI Reference - Complete command documentation</li> </ul>"},{"location":"workflows/cron-automation/#tips-for-effective-automation","title":"\ud83d\udca1 Tips for Effective Automation","text":""},{"location":"workflows/cron-automation/#scheduling-strategy","title":"Scheduling Strategy","text":"<ul> <li>Start Conservative: Begin with less frequent schedules and increase as needed</li> <li>Consider Time Zones: Schedule automation during low-activity periods</li> <li>Plan for Peaks: Increase frequency during assignment deadlines</li> <li>Monitor Resource Usage: Avoid overwhelming GitHub API limits</li> </ul>"},{"location":"workflows/cron-automation/#maintenance-planning","title":"Maintenance Planning","text":"<ul> <li>Regular Reviews: Monthly review of automation effectiveness</li> <li>Schedule Adjustments: Modify schedules based on semester patterns</li> <li>Token Rotation: Regularly rotate automation tokens</li> <li>Log Analysis: Review logs for optimization opportunities</li> </ul> <p>Cron automation provides powerful, unattended management of GitHub Classroom assignments through intelligent scheduling and monitoring.</p>"},{"location":"workflows/secrets-management/","title":"GitHub Secrets Management","text":"<p>Comprehensive secret management for GitHub Classroom assignments through the modern Python CLI interface.</p>"},{"location":"workflows/secrets-management/#overview","title":"\ud83c\udfaf Overview","text":"<p>Classroom Pilot provides robust secret management capabilities for:</p> <ul> <li>Automated Secret Distribution - Add secrets across multiple student repositories</li> <li>Secure Token Management - Handle authentication tokens safely</li> <li>Batch Operations - Manage secrets for entire classrooms efficiently</li> <li>Secret Rotation - Update and rotate secrets across repositories</li> <li>Access Control - Manage secret visibility and permissions</li> </ul>"},{"location":"workflows/secrets-management/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code># Install from PyPI\npip install classroom-pilot\n\n# Verify installation\nclassroom-pilot --help\n</code></pre>"},{"location":"workflows/secrets-management/#quick-setup","title":"\ud83d\ude80 Quick Setup","text":""},{"location":"workflows/secrets-management/#1-create-token-file","title":"1. Create Token File","text":"<pre><code># Create secure token file\necho \"ghp_your_github_token_here\" &gt; github_token.txt\nchmod 600 github_token.txt\n</code></pre>"},{"location":"workflows/secrets-management/#2-configure-assignment","title":"2. Configure Assignment","text":"<pre><code># Create assignment configuration\ncat &gt; assignment.conf &lt;&lt; 'EOF'\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/homework1\"\nTEMPLATE_REPO_URL=\"https://github.com/instructor/homework1-template\"\nGITHUB_TOKEN_FILE=\"github_token.txt\"\nSECRETS_LIST=\"API_KEY,GRADING_TOKEN,DATABASE_URL\"\nEOF\n</code></pre>"},{"location":"workflows/secrets-management/#3-distribute-secrets","title":"3. Distribute Secrets","text":"<pre><code># Add secrets to all student repositories\nclassroom-pilot secrets add --config assignment.conf\n\n# Preview what would be done first\nclassroom-pilot --dry-run secrets add --config assignment.conf\n</code></pre>"},{"location":"workflows/secrets-management/#secret-management-commands","title":"\ud83d\udd27 Secret Management Commands","text":""},{"location":"workflows/secrets-management/#adding-secrets","title":"Adding Secrets","text":"<pre><code># Add all configured secrets\nclassroom-pilot secrets add --config assignment.conf\n\n# Add specific secrets\nclassroom-pilot secrets add --config assignment.conf --secrets \"API_KEY,GRADING_TOKEN\"\n\n# Add secrets with custom values\nAPI_KEY=\"custom_value\" classroom-pilot secrets add --config assignment.conf --secrets \"API_KEY\"\n</code></pre>"},{"location":"workflows/secrets-management/#removing-secrets","title":"Removing Secrets","text":"<pre><code># Remove specific secrets\nclassroom-pilot secrets remove --config assignment.conf --secrets \"OLD_TOKEN\"\n\n# Remove all configured secrets\nclassroom-pilot secrets remove --config assignment.conf\n\n# Preview removal (dry-run)\nclassroom-pilot --dry-run secrets remove --config assignment.conf --secrets \"OLD_TOKEN\"\n</code></pre>"},{"location":"workflows/secrets-management/#listing-secrets","title":"Listing Secrets","text":"<pre><code># List secrets in all repositories\nclassroom-pilot secrets list --config assignment.conf\n\n# List secrets with details\nclassroom-pilot --verbose secrets list --config assignment.conf\n</code></pre>"},{"location":"workflows/secrets-management/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"workflows/secrets-management/#secret-configuration-format","title":"Secret Configuration Format","text":"<p>Define secrets in your <code>assignment.conf</code> file:</p> <pre><code># Basic secret list\nSECRETS_LIST=\"API_KEY,DATABASE_URL,GRADING_TOKEN\"\n\n# Secret files (for complex secrets)\nSECRET_API_KEY_FILE=\"api_key.txt\"\nSECRET_DATABASE_URL_FILE=\"database_url.txt\"\n\n# Secret descriptions (for documentation)\nSECRET_API_KEY_DESCRIPTION=\"API key for external service\"\nSECRET_DATABASE_URL_DESCRIPTION=\"Database connection string\"\n</code></pre>"},{"location":"workflows/secrets-management/#environment-variable-secrets","title":"Environment Variable Secrets","text":"<p>Use environment variables for sensitive values:</p> <pre><code># Set secrets via environment variables\nexport API_KEY=\"your_api_key_here\"\nexport DATABASE_URL=\"postgresql://user:pass@host:5432/db\"\nexport GRADING_TOKEN=\"grading_token_value\"\n\n# Run secret management\nclassroom-pilot secrets add --config assignment.conf\n</code></pre>"},{"location":"workflows/secrets-management/#secret-file-management","title":"Secret File Management","text":"<p>Store secrets in separate files for security:</p> <pre><code># Create secret files\necho \"your_api_key\" &gt; api_key.txt\necho \"postgresql://...\" &gt; database_url.txt\necho \"grading_token\" &gt; grading_token.txt\n\n# Set secure permissions\nchmod 600 *.txt\n\n# Configure in assignment.conf\nSECRET_API_KEY_FILE=\"api_key.txt\"\nSECRET_DATABASE_URL_FILE=\"database_url.txt\"\nSECRET_GRADING_TOKEN_FILE=\"grading_token.txt\"\n</code></pre>"},{"location":"workflows/secrets-management/#advanced-secret-management","title":"\ud83c\udfaf Advanced Secret Management","text":""},{"location":"workflows/secrets-management/#secret-rotation","title":"Secret Rotation","text":"<p>Automate secret rotation across all repositories:</p> <pre><code># Step 1: Generate new secrets\nnew_api_key=$(generate_new_api_key)\nnew_token=$(generate_new_token)\n\n# Step 2: Update environment\nexport API_KEY=\"$new_api_key\"\nexport GRADING_TOKEN=\"$new_token\"\n\n# Step 3: Distribute new secrets\nclassroom-pilot secrets add --config assignment.conf --secrets \"API_KEY,GRADING_TOKEN\"\n\n# Step 4: Verify distribution\nclassroom-pilot secrets list --config assignment.conf\n</code></pre>"},{"location":"workflows/secrets-management/#conditional-secret-management","title":"Conditional Secret Management","text":"<p>Apply secrets based on conditions:</p> <pre><code># Add secrets only to specific repositories\nEXCLUDE_REPOS=\"template,instructor-solution\" classroom-pilot secrets add --config assignment.conf\n\n# Add different secrets for different assignments\nif [[ \"$ASSIGNMENT_TYPE\" == \"final\" ]]; then\n    SECRETS_LIST=\"API_KEY,FINAL_EXAM_TOKEN\" classroom-pilot secrets add --config assignment.conf\nelse\n    SECRETS_LIST=\"API_KEY,HOMEWORK_TOKEN\" classroom-pilot secrets add --config assignment.conf\nfi\n</code></pre>"},{"location":"workflows/secrets-management/#batch-secret-operations","title":"Batch Secret Operations","text":"<p>Manage secrets across multiple assignments:</p> <pre><code>#!/bin/bash\n# Batch secret management script\n\nASSIGNMENTS=(\"homework1\" \"homework2\" \"midterm\" \"final\")\nNEW_API_KEY=\"new_secure_api_key\"\n\nfor assignment in \"${ASSIGNMENTS[@]}\"; do\n    echo \"Updating secrets for $assignment...\"\n\n    # Set assignment-specific configuration\n    config_file=\"assignment-${assignment}.conf\"\n\n    # Update API key\n    API_KEY=\"$NEW_API_KEY\" classroom-pilot secrets add --config \"$config_file\" --secrets \"API_KEY\"\n\n    echo \"Completed $assignment\"\ndone\n</code></pre>"},{"location":"workflows/secrets-management/#security-best-practices","title":"\ud83d\udee1\ufe0f Security Best Practices","text":""},{"location":"workflows/secrets-management/#token-security","title":"Token Security","text":"<pre><code># Create dedicated tokens for secret management\n# Required permissions:\n# - repo (for repository access)\n# - admin:org (for organization secrets)\n# - secrets (for repository secrets)\n\n# Store tokens securely\necho \"ghp_token\" &gt; secure_token.txt\nchmod 600 secure_token.txt\n\n# Use token files instead of environment variables\nGITHUB_TOKEN_FILE=\"secure_token.txt\"\n</code></pre>"},{"location":"workflows/secrets-management/#secret-validation","title":"Secret Validation","text":"<pre><code># Validate secrets before distribution\nclassroom-pilot --dry-run secrets add --config assignment.conf\n\n# Check secret format and permissions\nclassroom-pilot --verbose secrets add --config assignment.conf\n\n# Verify secret distribution\nclassroom-pilot secrets list --config assignment.conf\n</code></pre>"},{"location":"workflows/secrets-management/#access-control","title":"Access Control","text":"<pre><code># Limit secret access to specific repositories\nEXCLUDE_REPOS=\"public-template,instructor-repo\" classroom-pilot secrets add --config assignment.conf\n\n# Use different tokens for different secret types\nGITHUB_TOKEN_FILE=\"grading_token.txt\" classroom-pilot secrets add --config assignment.conf --secrets \"GRADING_TOKEN\"\nGITHUB_TOKEN_FILE=\"api_token.txt\" classroom-pilot secrets add --config assignment.conf --secrets \"API_KEY\"\n</code></pre>"},{"location":"workflows/secrets-management/#monitoring-auditing","title":"\ud83d\udcca Monitoring &amp; Auditing","text":""},{"location":"workflows/secrets-management/#secret-audit","title":"Secret Audit","text":"<pre><code># List all secrets across repositories\nclassroom-pilot secrets list --config assignment.conf &gt; secret_audit.txt\n\n# Check secret distribution status\nclassroom-pilot --verbose secrets list --config assignment.conf\n\n# Verify specific secrets\nclassroom-pilot secrets list --config assignment.conf --secrets \"API_KEY,GRADING_TOKEN\"\n</code></pre>"},{"location":"workflows/secrets-management/#distribution-monitoring","title":"Distribution Monitoring","text":"<pre><code># Monitor secret distribution in real-time\nclassroom-pilot --verbose secrets add --config assignment.conf\n\n# Check for distribution failures\nclassroom-pilot secrets add --config assignment.conf 2&gt;&amp;1 | grep -i error\n\n# Validate distribution success\nclassroom-pilot secrets list --config assignment.conf | grep -c \"API_KEY\"\n</code></pre>"},{"location":"workflows/secrets-management/#integration-with-automation","title":"\ud83d\udd04 Integration with Automation","text":""},{"location":"workflows/secrets-management/#automated-secret-management","title":"Automated Secret Management","text":"<pre><code># Setup automated secret rotation\ncat &gt; secret-rotation.conf &lt;&lt; 'EOF'\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/homework1\"\nGITHUB_TOKEN_FILE=\"automation_token.txt\"\nSECRETS_LIST=\"API_KEY,DATABASE_URL\"\n\n# Automation schedules\nAUTOMATION_SCHEDULE_SECRETS=\"0 3 * * 1\"  # Monday at 3 AM\nAUTOMATION_SCHEDULE_ROTATION=\"0 2 1 * *\" # First day of month at 2 AM\nEOF\n\nclassroom-pilot automation scheduler setup --config secret-rotation.conf\n</code></pre>"},{"location":"workflows/secrets-management/#workflow-integration","title":"Workflow Integration","text":"<pre><code># Integrate secret management with complete workflow\nclassroom-pilot assignments orchestrate --config assignment.conf\n\n# This automatically:\n# 1. Discovers student repositories\n# 2. Distributes configured secrets\n# 3. Validates secret distribution\n# 4. Reports success/failure status\n</code></pre>"},{"location":"workflows/secrets-management/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"workflows/secrets-management/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Authentication Failures:    <pre><code># Check token permissions\nclassroom-pilot --verbose secrets add --config assignment.conf\n</code></pre></p> </li> <li> <p>Secret Not Found:    <pre><code># Verify secret configuration\nclassroom-pilot --dry-run secrets add --config assignment.conf\n</code></pre></p> </li> <li> <p>Distribution Failures:    <pre><code># Check repository access\nclassroom-pilot repos fetch --config assignment.conf\n</code></pre></p> </li> </ol>"},{"location":"workflows/secrets-management/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable detailed logging\nclassroom-pilot --verbose secrets add --config assignment.conf\n\n# Dry-run with maximum detail\nclassroom-pilot --dry-run --verbose secrets add --config assignment.conf\n</code></pre>"},{"location":"workflows/secrets-management/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Assignment Orchestrator - Complete workflow automation</li> <li>Automation Suite - Comprehensive automation capabilities</li> <li>Cron Automation - Scheduled secret management</li> <li>Main CLI Reference - Complete command documentation</li> </ul>"},{"location":"workflows/secrets-management/#examples-use-cases","title":"\ud83d\udca1 Examples &amp; Use Cases","text":""},{"location":"workflows/secrets-management/#exam-environment-setup","title":"Exam Environment Setup","text":"<pre><code># Setup secure exam environment\ncat &gt; exam-secrets.conf &lt;&lt; 'EOF'\nCLASSROOM_URL=\"https://classroom.github.com/classrooms/123/assignments/midterm\"\nGITHUB_TOKEN_FILE=\"exam_token.txt\"\nSECRETS_LIST=\"EXAM_API_KEY,GRADING_DATABASE,SECURE_TOKEN\"\nEXCLUDE_REPOS=\"template,instructor-solution\"\nEOF\n\n# Distribute exam secrets\nclassroom-pilot secrets add --config exam-secrets.conf\n\n# Verify distribution\nclassroom-pilot secrets list --config exam-secrets.conf\n</code></pre>"},{"location":"workflows/secrets-management/#api-key-management","title":"API Key Management","text":"<pre><code># Rotate API keys for new semester\nOLD_KEY=\"old_api_key_value\"\nNEW_KEY=\"new_api_key_value\"\n\n# Remove old key\nAPI_KEY=\"$OLD_KEY\" classroom-pilot secrets remove --config assignment.conf --secrets \"API_KEY\"\n\n# Add new key\nAPI_KEY=\"$NEW_KEY\" classroom-pilot secrets add --config assignment.conf --secrets \"API_KEY\"\n\n# Verify update\nclassroom-pilot secrets list --config assignment.conf --secrets \"API_KEY\"\n</code></pre> <p>GitHub Secrets Management provides secure, efficient handling of sensitive information across GitHub Classroom assignments.</p>"}]}